// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensordata.proto

#include "osi_sensordata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class DetectedEntityHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectedEntityHeader>
      _instance;
} _DetectedEntityHeader_default_instance_;
class SensorDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorData>
      _instance;
} _SensorData_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5fsensordata_2eproto {
void InitDefaultsDetectedEntityHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::osi3::_DetectedEntityHeader_default_instance_;
    new (ptr) ::osi3::DetectedEntityHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedEntityHeader::InitAsDefaultInstance();
}

void InitDefaultsDetectedEntityHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDetectedEntityHeaderImpl);
}

void InitDefaultsSensorDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fversion_2eproto::InitDefaultsInterfaceVersion();
  protobuf_osi_5fcommon_2eproto::InitDefaultsTimestamp();
  protobuf_osi_5fcommon_2eproto::InitDefaultsBaseMoving();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsMountingPosition();
  protobuf_osi_5fsensorview_2eproto::InitDefaultsSensorView();
  protobuf_osi_5fsensordata_2eproto::InitDefaultsDetectedEntityHeader();
  protobuf_osi_5fdetectedobject_2eproto::InitDefaultsDetectedStationaryObject();
  protobuf_osi_5fdetectedobject_2eproto::InitDefaultsDetectedMovingObject();
  protobuf_osi_5fdetectedtrafficsign_2eproto::InitDefaultsDetectedTrafficSign();
  protobuf_osi_5fdetectedtrafficlight_2eproto::InitDefaultsDetectedTrafficLight();
  protobuf_osi_5fdetectedroadmarking_2eproto::InitDefaultsDetectedRoadMarking();
  protobuf_osi_5fdetectedlane_2eproto::InitDefaultsDetectedLaneBoundary();
  protobuf_osi_5fdetectedlane_2eproto::InitDefaultsDetectedLane();
  protobuf_osi_5fdetectedoccupant_2eproto::InitDefaultsDetectedOccupant();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsFeatureData();
  {
    void* ptr = &::osi3::_SensorData_default_instance_;
    new (ptr) ::osi3::SensorData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::SensorData::InitAsDefaultInstance();
}

void InitDefaultsSensorData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSensorDataImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::DetectedEntityHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::DetectedEntityHeader, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::DetectedEntityHeader, cycle_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::DetectedEntityHeader, data_qualifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, host_vehicle_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, host_vehicle_location_rmse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, mounting_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, mounting_position_rmse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, sensor_view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, last_measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, stationary_object_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, stationary_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, moving_object_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, moving_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, traffic_sign_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, traffic_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, traffic_light_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, road_marking_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, road_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, lane_boundary_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, lane_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, lane_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, occupant_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, occupant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorData, feature_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::DetectedEntityHeader)},
  { 8, -1, sizeof(::osi3::SensorData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_DetectedEntityHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_SensorData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_sensordata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024osi_sensordata.proto\022\004osi3\032\021osi_versio"
      "n.proto\032\020osi_common.proto\032\035osi_detectedt"
      "rafficsign.proto\032\036osi_detectedtrafficlig"
      "ht.proto\032\035osi_detectedroadmarking.proto\032"
      "\026osi_detectedlane.proto\032\030osi_detectedobj"
      "ect.proto\032\032osi_detectedoccupant.proto\032\024o"
      "si_sensorview.proto\032\025osi_featuredata.pro"
      "to\"\216\003\n\024DetectedEntityHeader\022)\n\020measureme"
      "nt_time\030\001 \001(\0132\017.osi3.Timestamp\022\025\n\rcycle_"
      "counter\030\002 \001(\004\022@\n\016data_qualifier\030\003 \001(\0162(."
      "osi3.DetectedEntityHeader.DataQualifier\""
      "\361\001\n\rDataQualifier\022\032\n\026DATA_QUALIFIER_UNKN"
      "OWN\020\000\022\030\n\024DATA_QUALIFIER_OTHER\020\001\022\034\n\030DATA_"
      "QUALIFIER_AVAILABLE\020\002\022$\n DATA_QUALIFIER_"
      "AVAILABLE_REDUCED\020\003\022 \n\034DATA_QUALIFIER_NO"
      "T_AVAILABLE\020\004\022\034\n\030DATA_QUALIFIER_BLINDNES"
      "S\020\005\022&\n\"DATA_QUALIFIER_TEMPORARY_AVAILABL"
      "E\020\006\"\226\n\n\nSensorData\022\'\n\007version\030\001 \001(\0132\026.os"
      "i3.InterfaceVersion\022\"\n\ttimestamp\030\002 \001(\0132\017"
      ".osi3.Timestamp\022/\n\025host_vehicle_location"
      "\030\003 \001(\0132\020.osi3.BaseMoving\0224\n\032host_vehicle"
      "_location_rmse\030\004 \001(\0132\020.osi3.BaseMoving\022#"
      "\n\tsensor_id\030\005 \001(\0132\020.osi3.Identifier\0221\n\021m"
      "ounting_position\030\006 \001(\0132\026.osi3.MountingPo"
      "sition\0226\n\026mounting_position_rmse\030\007 \001(\0132\026"
      ".osi3.MountingPosition\022%\n\013sensor_view\030\010 "
      "\003(\0132\020.osi3.SensorView\022.\n\025last_measuremen"
      "t_time\030\t \001(\0132\017.osi3.Timestamp\022<\n\030station"
      "ary_object_header\030\n \001(\0132\032.osi3.DetectedE"
      "ntityHeader\0229\n\021stationary_object\030\013 \003(\0132\036"
      ".osi3.DetectedStationaryObject\0228\n\024moving"
      "_object_header\030\014 \001(\0132\032.osi3.DetectedEnti"
      "tyHeader\0221\n\rmoving_object\030\r \003(\0132\032.osi3.D"
      "etectedMovingObject\0227\n\023traffic_sign_head"
      "er\030\016 \001(\0132\032.osi3.DetectedEntityHeader\022/\n\014"
      "traffic_sign\030\017 \003(\0132\031.osi3.DetectedTraffi"
      "cSign\0228\n\024traffic_light_header\030\020 \001(\0132\032.os"
      "i3.DetectedEntityHeader\0221\n\rtraffic_light"
      "\030\021 \003(\0132\032.osi3.DetectedTrafficLight\0227\n\023ro"
      "ad_marking_header\030\022 \001(\0132\032.osi3.DetectedE"
      "ntityHeader\022/\n\014road_marking\030\023 \003(\0132\031.osi3"
      ".DetectedRoadMarking\0228\n\024lane_boundary_he"
      "ader\030\024 \001(\0132\032.osi3.DetectedEntityHeader\0221"
      "\n\rlane_boundary\030\025 \003(\0132\032.osi3.DetectedLan"
      "eBoundary\022/\n\013lane_header\030\026 \001(\0132\032.osi3.De"
      "tectedEntityHeader\022 \n\004lane\030\027 \003(\0132\022.osi3."
      "DetectedLane\0223\n\017occupant_header\030\030 \001(\0132\032."
      "osi3.DetectedEntityHeader\022(\n\010occupant\030\031 "
      "\003(\0132\026.osi3.DetectedOccupant\022\'\n\014feature_d"
      "ata\030\032 \001(\0132\021.osi3.FeatureDataB\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2000);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_sensordata.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fversion_2eproto::AddDescriptors();
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
  ::protobuf_osi_5fdetectedtrafficsign_2eproto::AddDescriptors();
  ::protobuf_osi_5fdetectedtrafficlight_2eproto::AddDescriptors();
  ::protobuf_osi_5fdetectedroadmarking_2eproto::AddDescriptors();
  ::protobuf_osi_5fdetectedlane_2eproto::AddDescriptors();
  ::protobuf_osi_5fdetectedobject_2eproto::AddDescriptors();
  ::protobuf_osi_5fdetectedoccupant_2eproto::AddDescriptors();
  ::protobuf_osi_5fsensorview_2eproto::AddDescriptors();
  ::protobuf_osi_5ffeaturedata_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5fsensordata_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* DetectedEntityHeader_DataQualifier_descriptor() {
  protobuf_osi_5fsensordata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fsensordata_2eproto::file_level_enum_descriptors[0];
}
bool DetectedEntityHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_UNKNOWN;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_OTHER;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_NOT_AVAILABLE;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_BLINDNESS;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MIN;
const DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MAX;
const int DetectedEntityHeader::DataQualifier_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DetectedEntityHeader::InitAsDefaultInstance() {
  ::osi3::_DetectedEntityHeader_default_instance_._instance.get_mutable()->measurement_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
}
void DetectedEntityHeader::clear_measurement_time() {
  if (GetArenaNoVirtual() == NULL && measurement_time_ != NULL) {
    delete measurement_time_;
  }
  measurement_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedEntityHeader::kMeasurementTimeFieldNumber;
const int DetectedEntityHeader::kCycleCounterFieldNumber;
const int DetectedEntityHeader::kDataQualifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedEntityHeader::DetectedEntityHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fsensordata_2eproto::InitDefaultsDetectedEntityHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedEntityHeader)
}
DetectedEntityHeader::DetectedEntityHeader(const DetectedEntityHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_measurement_time()) {
    measurement_time_ = new ::osi3::Timestamp(*from.measurement_time_);
  } else {
    measurement_time_ = NULL;
  }
  ::memcpy(&cycle_counter_, &from.cycle_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_qualifier_) -
    reinterpret_cast<char*>(&cycle_counter_)) + sizeof(data_qualifier_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedEntityHeader)
}

void DetectedEntityHeader::SharedCtor() {
  ::memset(&measurement_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_qualifier_) -
      reinterpret_cast<char*>(&measurement_time_)) + sizeof(data_qualifier_));
  _cached_size_ = 0;
}

DetectedEntityHeader::~DetectedEntityHeader() {
  // @@protoc_insertion_point(destructor:osi3.DetectedEntityHeader)
  SharedDtor();
}

void DetectedEntityHeader::SharedDtor() {
  if (this != internal_default_instance()) delete measurement_time_;
}

void DetectedEntityHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedEntityHeader::descriptor() {
  ::protobuf_osi_5fsensordata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensordata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectedEntityHeader& DetectedEntityHeader::default_instance() {
  ::protobuf_osi_5fsensordata_2eproto::InitDefaultsDetectedEntityHeader();
  return *internal_default_instance();
}

DetectedEntityHeader* DetectedEntityHeader::New(::google::protobuf::Arena* arena) const {
  DetectedEntityHeader* n = new DetectedEntityHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedEntityHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedEntityHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && measurement_time_ != NULL) {
    delete measurement_time_;
  }
  measurement_time_ = NULL;
  ::memset(&cycle_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_qualifier_) -
      reinterpret_cast<char*>(&cycle_counter_)) + sizeof(data_qualifier_));
  _internal_metadata_.Clear();
}

bool DetectedEntityHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedEntityHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Timestamp measurement_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measurement_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cycle_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cycle_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_qualifier(static_cast< ::osi3::DetectedEntityHeader_DataQualifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedEntityHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedEntityHeader)
  return false;
#undef DO_
}

void DetectedEntityHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedEntityHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->measurement_time_, output);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cycle_counter(), output);
  }

  // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (this->data_qualifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_qualifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedEntityHeader)
}

::google::protobuf::uint8* DetectedEntityHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedEntityHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->measurement_time_, deterministic, target);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cycle_counter(), target);
  }

  // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (this->data_qualifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_qualifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedEntityHeader)
  return target;
}

size_t DetectedEntityHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedEntityHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->measurement_time_);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cycle_counter());
  }

  // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (this->data_qualifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_qualifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedEntityHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedEntityHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedEntityHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedEntityHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedEntityHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedEntityHeader)
    MergeFrom(*source);
  }
}

void DetectedEntityHeader::MergeFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedEntityHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_measurement_time()) {
    mutable_measurement_time()->::osi3::Timestamp::MergeFrom(from.measurement_time());
  }
  if (from.cycle_counter() != 0) {
    set_cycle_counter(from.cycle_counter());
  }
  if (from.data_qualifier() != 0) {
    set_data_qualifier(from.data_qualifier());
  }
}

void DetectedEntityHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedEntityHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedEntityHeader::CopyFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedEntityHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedEntityHeader::IsInitialized() const {
  return true;
}

void DetectedEntityHeader::Swap(DetectedEntityHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedEntityHeader::InternalSwap(DetectedEntityHeader* other) {
  using std::swap;
  swap(measurement_time_, other->measurement_time_);
  swap(cycle_counter_, other->cycle_counter_);
  swap(data_qualifier_, other->data_qualifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedEntityHeader::GetMetadata() const {
  protobuf_osi_5fsensordata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensordata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorData::InitAsDefaultInstance() {
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->host_vehicle_location_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->host_vehicle_location_rmse_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->last_measurement_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->stationary_object_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->moving_object_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->traffic_sign_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->traffic_light_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->road_marking_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->lane_boundary_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->lane_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->occupant_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->feature_data_ = const_cast< ::osi3::FeatureData*>(
      ::osi3::FeatureData::internal_default_instance());
}
void SensorData::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void SensorData::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void SensorData::clear_host_vehicle_location() {
  if (GetArenaNoVirtual() == NULL && host_vehicle_location_ != NULL) {
    delete host_vehicle_location_;
  }
  host_vehicle_location_ = NULL;
}
void SensorData::clear_host_vehicle_location_rmse() {
  if (GetArenaNoVirtual() == NULL && host_vehicle_location_rmse_ != NULL) {
    delete host_vehicle_location_rmse_;
  }
  host_vehicle_location_rmse_ = NULL;
}
void SensorData::clear_sensor_id() {
  if (GetArenaNoVirtual() == NULL && sensor_id_ != NULL) {
    delete sensor_id_;
  }
  sensor_id_ = NULL;
}
void SensorData::clear_mounting_position() {
  if (GetArenaNoVirtual() == NULL && mounting_position_ != NULL) {
    delete mounting_position_;
  }
  mounting_position_ = NULL;
}
void SensorData::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == NULL && mounting_position_rmse_ != NULL) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = NULL;
}
void SensorData::clear_sensor_view() {
  sensor_view_.Clear();
}
void SensorData::clear_last_measurement_time() {
  if (GetArenaNoVirtual() == NULL && last_measurement_time_ != NULL) {
    delete last_measurement_time_;
  }
  last_measurement_time_ = NULL;
}
void SensorData::clear_stationary_object() {
  stationary_object_.Clear();
}
void SensorData::clear_moving_object() {
  moving_object_.Clear();
}
void SensorData::clear_traffic_sign() {
  traffic_sign_.Clear();
}
void SensorData::clear_traffic_light() {
  traffic_light_.Clear();
}
void SensorData::clear_road_marking() {
  road_marking_.Clear();
}
void SensorData::clear_lane_boundary() {
  lane_boundary_.Clear();
}
void SensorData::clear_lane() {
  lane_.Clear();
}
void SensorData::clear_occupant() {
  occupant_.Clear();
}
void SensorData::clear_feature_data() {
  if (GetArenaNoVirtual() == NULL && feature_data_ != NULL) {
    delete feature_data_;
  }
  feature_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorData::kVersionFieldNumber;
const int SensorData::kTimestampFieldNumber;
const int SensorData::kHostVehicleLocationFieldNumber;
const int SensorData::kHostVehicleLocationRmseFieldNumber;
const int SensorData::kSensorIdFieldNumber;
const int SensorData::kMountingPositionFieldNumber;
const int SensorData::kMountingPositionRmseFieldNumber;
const int SensorData::kSensorViewFieldNumber;
const int SensorData::kLastMeasurementTimeFieldNumber;
const int SensorData::kStationaryObjectHeaderFieldNumber;
const int SensorData::kStationaryObjectFieldNumber;
const int SensorData::kMovingObjectHeaderFieldNumber;
const int SensorData::kMovingObjectFieldNumber;
const int SensorData::kTrafficSignHeaderFieldNumber;
const int SensorData::kTrafficSignFieldNumber;
const int SensorData::kTrafficLightHeaderFieldNumber;
const int SensorData::kTrafficLightFieldNumber;
const int SensorData::kRoadMarkingHeaderFieldNumber;
const int SensorData::kRoadMarkingFieldNumber;
const int SensorData::kLaneBoundaryHeaderFieldNumber;
const int SensorData::kLaneBoundaryFieldNumber;
const int SensorData::kLaneHeaderFieldNumber;
const int SensorData::kLaneFieldNumber;
const int SensorData::kOccupantHeaderFieldNumber;
const int SensorData::kOccupantFieldNumber;
const int SensorData::kFeatureDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorData::SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fsensordata_2eproto::InitDefaultsSensorData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_view_(from.sensor_view_),
      stationary_object_(from.stationary_object_),
      moving_object_(from.moving_object_),
      traffic_sign_(from.traffic_sign_),
      traffic_light_(from.traffic_light_),
      road_marking_(from.road_marking_),
      lane_boundary_(from.lane_boundary_),
      lane_(from.lane_),
      occupant_(from.occupant_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_host_vehicle_location()) {
    host_vehicle_location_ = new ::osi3::BaseMoving(*from.host_vehicle_location_);
  } else {
    host_vehicle_location_ = NULL;
  }
  if (from.has_host_vehicle_location_rmse()) {
    host_vehicle_location_rmse_ = new ::osi3::BaseMoving(*from.host_vehicle_location_rmse_);
  } else {
    host_vehicle_location_rmse_ = NULL;
  }
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = NULL;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = NULL;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = NULL;
  }
  if (from.has_last_measurement_time()) {
    last_measurement_time_ = new ::osi3::Timestamp(*from.last_measurement_time_);
  } else {
    last_measurement_time_ = NULL;
  }
  if (from.has_stationary_object_header()) {
    stationary_object_header_ = new ::osi3::DetectedEntityHeader(*from.stationary_object_header_);
  } else {
    stationary_object_header_ = NULL;
  }
  if (from.has_moving_object_header()) {
    moving_object_header_ = new ::osi3::DetectedEntityHeader(*from.moving_object_header_);
  } else {
    moving_object_header_ = NULL;
  }
  if (from.has_traffic_sign_header()) {
    traffic_sign_header_ = new ::osi3::DetectedEntityHeader(*from.traffic_sign_header_);
  } else {
    traffic_sign_header_ = NULL;
  }
  if (from.has_traffic_light_header()) {
    traffic_light_header_ = new ::osi3::DetectedEntityHeader(*from.traffic_light_header_);
  } else {
    traffic_light_header_ = NULL;
  }
  if (from.has_road_marking_header()) {
    road_marking_header_ = new ::osi3::DetectedEntityHeader(*from.road_marking_header_);
  } else {
    road_marking_header_ = NULL;
  }
  if (from.has_lane_boundary_header()) {
    lane_boundary_header_ = new ::osi3::DetectedEntityHeader(*from.lane_boundary_header_);
  } else {
    lane_boundary_header_ = NULL;
  }
  if (from.has_lane_header()) {
    lane_header_ = new ::osi3::DetectedEntityHeader(*from.lane_header_);
  } else {
    lane_header_ = NULL;
  }
  if (from.has_occupant_header()) {
    occupant_header_ = new ::osi3::DetectedEntityHeader(*from.occupant_header_);
  } else {
    occupant_header_ = NULL;
  }
  if (from.has_feature_data()) {
    feature_data_ = new ::osi3::FeatureData(*from.feature_data_);
  } else {
    feature_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.SensorData)
}

void SensorData::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_data_) -
      reinterpret_cast<char*>(&version_)) + sizeof(feature_data_));
  _cached_size_ = 0;
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:osi3.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_location_;
  if (this != internal_default_instance()) delete host_vehicle_location_rmse_;
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
  if (this != internal_default_instance()) delete last_measurement_time_;
  if (this != internal_default_instance()) delete stationary_object_header_;
  if (this != internal_default_instance()) delete moving_object_header_;
  if (this != internal_default_instance()) delete traffic_sign_header_;
  if (this != internal_default_instance()) delete traffic_light_header_;
  if (this != internal_default_instance()) delete road_marking_header_;
  if (this != internal_default_instance()) delete lane_boundary_header_;
  if (this != internal_default_instance()) delete lane_header_;
  if (this != internal_default_instance()) delete occupant_header_;
  if (this != internal_default_instance()) delete feature_data_;
}

void SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  ::protobuf_osi_5fsensordata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensordata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorData& SensorData::default_instance() {
  ::protobuf_osi_5fsensordata_2eproto::InitDefaultsSensorData();
  return *internal_default_instance();
}

SensorData* SensorData::New(::google::protobuf::Arena* arena) const {
  SensorData* n = new SensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_view_.Clear();
  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && host_vehicle_location_ != NULL) {
    delete host_vehicle_location_;
  }
  host_vehicle_location_ = NULL;
  if (GetArenaNoVirtual() == NULL && host_vehicle_location_rmse_ != NULL) {
    delete host_vehicle_location_rmse_;
  }
  host_vehicle_location_rmse_ = NULL;
  if (GetArenaNoVirtual() == NULL && sensor_id_ != NULL) {
    delete sensor_id_;
  }
  sensor_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && mounting_position_ != NULL) {
    delete mounting_position_;
  }
  mounting_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && mounting_position_rmse_ != NULL) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_measurement_time_ != NULL) {
    delete last_measurement_time_;
  }
  last_measurement_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && stationary_object_header_ != NULL) {
    delete stationary_object_header_;
  }
  stationary_object_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && moving_object_header_ != NULL) {
    delete moving_object_header_;
  }
  moving_object_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && traffic_sign_header_ != NULL) {
    delete traffic_sign_header_;
  }
  traffic_sign_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && traffic_light_header_ != NULL) {
    delete traffic_light_header_;
  }
  traffic_light_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && road_marking_header_ != NULL) {
    delete road_marking_header_;
  }
  road_marking_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_boundary_header_ != NULL) {
    delete lane_boundary_header_;
  }
  lane_boundary_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_header_ != NULL) {
    delete lane_header_;
  }
  lane_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && occupant_header_ != NULL) {
    delete occupant_header_;
  }
  occupant_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && feature_data_ != NULL) {
    delete feature_data_;
  }
  feature_data_ = NULL;
  _internal_metadata_.Clear();
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving host_vehicle_location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_host_vehicle_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving host_vehicle_location_rmse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_host_vehicle_location_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier sensor_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.SensorView sensor_view = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sensor_view()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp last_measurement_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_measurement_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader stationary_object_header = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stationary_object_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedStationaryObject stationary_object = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stationary_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader moving_object_header = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_moving_object_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedMovingObject moving_object = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_moving_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader traffic_sign_header = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_sign_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader traffic_light_header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedTrafficLight traffic_light = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader road_marking_header = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_road_marking_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedRoadMarking road_marking = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_road_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader lane_boundary_header = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_boundary_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader lane_header = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedLane lane = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader occupant_header = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occupant_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedOccupant occupant = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_occupant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.FeatureData feature_data = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorData)
  return false;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // .osi3.BaseMoving host_vehicle_location = 3;
  if (this->has_host_vehicle_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->host_vehicle_location_, output);
  }

  // .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (this->has_host_vehicle_location_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->host_vehicle_location_rmse_, output);
  }

  // .osi3.Identifier sensor_id = 5;
  if (this->has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sensor_id_, output);
  }

  // .osi3.MountingPosition mounting_position = 6;
  if (this->has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->mounting_position_, output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 7;
  if (this->has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->mounting_position_rmse_, output);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_view_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sensor_view(static_cast<int>(i)), output);
  }

  // .osi3.Timestamp last_measurement_time = 9;
  if (this->has_last_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->last_measurement_time_, output);
  }

  // .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (this->has_stationary_object_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->stationary_object_header_, output);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->stationary_object(static_cast<int>(i)), output);
  }

  // .osi3.DetectedEntityHeader moving_object_header = 12;
  if (this->has_moving_object_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->moving_object_header_, output);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->moving_object(static_cast<int>(i)), output);
  }

  // .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (this->has_traffic_sign_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->traffic_sign_header_, output);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->traffic_sign(static_cast<int>(i)), output);
  }

  // .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (this->has_traffic_light_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->traffic_light_header_, output);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->traffic_light(static_cast<int>(i)), output);
  }

  // .osi3.DetectedEntityHeader road_marking_header = 18;
  if (this->has_road_marking_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->road_marking_header_, output);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->road_marking(static_cast<int>(i)), output);
  }

  // .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (this->has_lane_boundary_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->lane_boundary_header_, output);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->lane_boundary(static_cast<int>(i)), output);
  }

  // .osi3.DetectedEntityHeader lane_header = 22;
  if (this->has_lane_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->lane_header_, output);
  }

  // repeated .osi3.DetectedLane lane = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->lane(static_cast<int>(i)), output);
  }

  // .osi3.DetectedEntityHeader occupant_header = 24;
  if (this->has_occupant_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->occupant_header_, output);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->occupant(static_cast<int>(i)), output);
  }

  // .osi3.FeatureData feature_data = 26;
  if (this->has_feature_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->feature_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorData)
}

::google::protobuf::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->version_, deterministic, target);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->timestamp_, deterministic, target);
  }

  // .osi3.BaseMoving host_vehicle_location = 3;
  if (this->has_host_vehicle_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->host_vehicle_location_, deterministic, target);
  }

  // .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (this->has_host_vehicle_location_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->host_vehicle_location_rmse_, deterministic, target);
  }

  // .osi3.Identifier sensor_id = 5;
  if (this->has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->sensor_id_, deterministic, target);
  }

  // .osi3.MountingPosition mounting_position = 6;
  if (this->has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->mounting_position_, deterministic, target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 7;
  if (this->has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->mounting_position_rmse_, deterministic, target);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_view_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->sensor_view(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.Timestamp last_measurement_time = 9;
  if (this->has_last_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->last_measurement_time_, deterministic, target);
  }

  // .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (this->has_stationary_object_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->stationary_object_header_, deterministic, target);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->stationary_object(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.DetectedEntityHeader moving_object_header = 12;
  if (this->has_moving_object_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->moving_object_header_, deterministic, target);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->moving_object(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (this->has_traffic_sign_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->traffic_sign_header_, deterministic, target);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->traffic_sign(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (this->has_traffic_light_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->traffic_light_header_, deterministic, target);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->traffic_light(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.DetectedEntityHeader road_marking_header = 18;
  if (this->has_road_marking_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, *this->road_marking_header_, deterministic, target);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->road_marking(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (this->has_lane_boundary_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->lane_boundary_header_, deterministic, target);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->lane_boundary(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.DetectedEntityHeader lane_header = 22;
  if (this->has_lane_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, *this->lane_header_, deterministic, target);
  }

  // repeated .osi3.DetectedLane lane = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->lane(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.DetectedEntityHeader occupant_header = 24;
  if (this->has_occupant_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, *this->occupant_header_, deterministic, target);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->occupant(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.FeatureData feature_data = 26;
  if (this->has_feature_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, *this->feature_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.SensorView sensor_view = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_view_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_view(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->stationary_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stationary_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->moving_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->moving_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_light(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->road_marking_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_marking(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_boundary_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_boundary(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedLane lane = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->occupant_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->occupant(static_cast<int>(i)));
    }
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->version_);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->timestamp_);
  }

  // .osi3.BaseMoving host_vehicle_location = 3;
  if (this->has_host_vehicle_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->host_vehicle_location_);
  }

  // .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (this->has_host_vehicle_location_rmse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->host_vehicle_location_rmse_);
  }

  // .osi3.Identifier sensor_id = 5;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 6;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 7;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mounting_position_rmse_);
  }

  // .osi3.Timestamp last_measurement_time = 9;
  if (this->has_last_measurement_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->last_measurement_time_);
  }

  // .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (this->has_stationary_object_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->stationary_object_header_);
  }

  // .osi3.DetectedEntityHeader moving_object_header = 12;
  if (this->has_moving_object_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->moving_object_header_);
  }

  // .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (this->has_traffic_sign_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->traffic_sign_header_);
  }

  // .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (this->has_traffic_light_header()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->traffic_light_header_);
  }

  // .osi3.DetectedEntityHeader road_marking_header = 18;
  if (this->has_road_marking_header()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->road_marking_header_);
  }

  // .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (this->has_lane_boundary_header()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lane_boundary_header_);
  }

  // .osi3.DetectedEntityHeader lane_header = 22;
  if (this->has_lane_header()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lane_header_);
  }

  // .osi3.DetectedEntityHeader occupant_header = 24;
  if (this->has_occupant_header()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->occupant_header_);
  }

  // .osi3.FeatureData feature_data = 26;
  if (this->has_feature_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->feature_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_view_.MergeFrom(from.sensor_view_);
  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_host_vehicle_location()) {
    mutable_host_vehicle_location()->::osi3::BaseMoving::MergeFrom(from.host_vehicle_location());
  }
  if (from.has_host_vehicle_location_rmse()) {
    mutable_host_vehicle_location_rmse()->::osi3::BaseMoving::MergeFrom(from.host_vehicle_location_rmse());
  }
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (from.has_last_measurement_time()) {
    mutable_last_measurement_time()->::osi3::Timestamp::MergeFrom(from.last_measurement_time());
  }
  if (from.has_stationary_object_header()) {
    mutable_stationary_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from.stationary_object_header());
  }
  if (from.has_moving_object_header()) {
    mutable_moving_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from.moving_object_header());
  }
  if (from.has_traffic_sign_header()) {
    mutable_traffic_sign_header()->::osi3::DetectedEntityHeader::MergeFrom(from.traffic_sign_header());
  }
  if (from.has_traffic_light_header()) {
    mutable_traffic_light_header()->::osi3::DetectedEntityHeader::MergeFrom(from.traffic_light_header());
  }
  if (from.has_road_marking_header()) {
    mutable_road_marking_header()->::osi3::DetectedEntityHeader::MergeFrom(from.road_marking_header());
  }
  if (from.has_lane_boundary_header()) {
    mutable_lane_boundary_header()->::osi3::DetectedEntityHeader::MergeFrom(from.lane_boundary_header());
  }
  if (from.has_lane_header()) {
    mutable_lane_header()->::osi3::DetectedEntityHeader::MergeFrom(from.lane_header());
  }
  if (from.has_occupant_header()) {
    mutable_occupant_header()->::osi3::DetectedEntityHeader::MergeFrom(from.occupant_header());
  }
  if (from.has_feature_data()) {
    mutable_feature_data()->::osi3::FeatureData::MergeFrom(from.feature_data());
  }
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  sensor_view_.InternalSwap(&other->sensor_view_);
  stationary_object_.InternalSwap(&other->stationary_object_);
  moving_object_.InternalSwap(&other->moving_object_);
  traffic_sign_.InternalSwap(&other->traffic_sign_);
  traffic_light_.InternalSwap(&other->traffic_light_);
  road_marking_.InternalSwap(&other->road_marking_);
  lane_boundary_.InternalSwap(&other->lane_boundary_);
  lane_.InternalSwap(&other->lane_);
  occupant_.InternalSwap(&other->occupant_);
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(host_vehicle_location_, other->host_vehicle_location_);
  swap(host_vehicle_location_rmse_, other->host_vehicle_location_rmse_);
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(last_measurement_time_, other->last_measurement_time_);
  swap(stationary_object_header_, other->stationary_object_header_);
  swap(moving_object_header_, other->moving_object_header_);
  swap(traffic_sign_header_, other->traffic_sign_header_);
  swap(traffic_light_header_, other->traffic_light_header_);
  swap(road_marking_header_, other->road_marking_header_);
  swap(lane_boundary_header_, other->lane_boundary_header_);
  swap(lane_header_, other->lane_header_);
  swap(occupant_header_, other->occupant_header_);
  swap(feature_data_, other->feature_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_osi_5fsensordata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensordata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
