// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_featuredata.proto

#include "osi_featuredata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class FeatureDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeatureData>
      _instance;
} _FeatureData_default_instance_;
class SensorDetectionHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorDetectionHeader>
      _instance;
} _SensorDetectionHeader_default_instance_;
class RadarDetectionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarDetectionData>
      _instance;
} _RadarDetectionData_default_instance_;
class RadarDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarDetection>
      _instance;
} _RadarDetection_default_instance_;
class LidarDetectionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarDetectionData>
      _instance;
} _LidarDetectionData_default_instance_;
class LidarDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarDetection>
      _instance;
} _LidarDetection_default_instance_;
class UltrasonicDetectionSpecificHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UltrasonicDetectionSpecificHeader>
      _instance;
} _UltrasonicDetectionSpecificHeader_default_instance_;
class UltrasonicDetectionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UltrasonicDetectionData>
      _instance;
} _UltrasonicDetectionData_default_instance_;
class UltrasonicDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UltrasonicDetection>
      _instance;
} _UltrasonicDetection_default_instance_;
class UltrasonicIndirectDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UltrasonicIndirectDetection>
      _instance;
} _UltrasonicIndirectDetection_default_instance_;
class CameraDetectionSpecificHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraDetectionSpecificHeader>
      _instance;
} _CameraDetectionSpecificHeader_default_instance_;
class CameraDetectionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraDetectionData>
      _instance;
} _CameraDetectionData_default_instance_;
class CameraDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraDetection>
      _instance;
} _CameraDetection_default_instance_;
class CameraPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraPoint>
      _instance;
} _CameraPoint_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5ffeaturedata_2eproto {
void InitDefaultsFeatureDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fversion_2eproto::InitDefaultsInterfaceVersion();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsRadarDetectionData();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsLidarDetectionData();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetectionData();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetectionData();
  {
    void* ptr = &::osi3::_FeatureData_default_instance_;
    new (ptr) ::osi3::FeatureData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::FeatureData::InitAsDefaultInstance();
}

void InitDefaultsFeatureData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFeatureDataImpl);
}

void InitDefaultsSensorDetectionHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsTimestamp();
  protobuf_osi_5fcommon_2eproto::InitDefaultsMountingPosition();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_SensorDetectionHeader_default_instance_;
    new (ptr) ::osi3::SensorDetectionHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::SensorDetectionHeader::InitAsDefaultInstance();
}

void InitDefaultsSensorDetectionHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSensorDetectionHeaderImpl);
}

void InitDefaultsRadarDetectionDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsSensorDetectionHeader();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsRadarDetection();
  {
    void* ptr = &::osi3::_RadarDetectionData_default_instance_;
    new (ptr) ::osi3::RadarDetectionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarDetectionData::InitAsDefaultInstance();
}

void InitDefaultsRadarDetectionData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadarDetectionDataImpl);
}

void InitDefaultsRadarDetectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsSpherical3d();
  {
    void* ptr = &::osi3::_RadarDetection_default_instance_;
    new (ptr) ::osi3::RadarDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarDetection::InitAsDefaultInstance();
}

void InitDefaultsRadarDetection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadarDetectionImpl);
}

void InitDefaultsLidarDetectionDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsSensorDetectionHeader();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsLidarDetection();
  {
    void* ptr = &::osi3::_LidarDetectionData_default_instance_;
    new (ptr) ::osi3::LidarDetectionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LidarDetectionData::InitAsDefaultInstance();
}

void InitDefaultsLidarDetectionData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarDetectionDataImpl);
}

void InitDefaultsLidarDetectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsSpherical3d();
  {
    void* ptr = &::osi3::_LidarDetection_default_instance_;
    new (ptr) ::osi3::LidarDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LidarDetection::InitAsDefaultInstance();
}

void InitDefaultsLidarDetection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarDetectionImpl);
}

void InitDefaultsUltrasonicDetectionSpecificHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_UltrasonicDetectionSpecificHeader_default_instance_;
    new (ptr) ::osi3::UltrasonicDetectionSpecificHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicDetectionSpecificHeader::InitAsDefaultInstance();
}

void InitDefaultsUltrasonicDetectionSpecificHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUltrasonicDetectionSpecificHeaderImpl);
}

void InitDefaultsUltrasonicDetectionDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsSensorDetectionHeader();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetectionSpecificHeader();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetection();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicIndirectDetection();
  {
    void* ptr = &::osi3::_UltrasonicDetectionData_default_instance_;
    new (ptr) ::osi3::UltrasonicDetectionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicDetectionData::InitAsDefaultInstance();
}

void InitDefaultsUltrasonicDetectionData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUltrasonicDetectionDataImpl);
}

void InitDefaultsUltrasonicDetectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_UltrasonicDetection_default_instance_;
    new (ptr) ::osi3::UltrasonicDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicDetection::InitAsDefaultInstance();
}

void InitDefaultsUltrasonicDetection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUltrasonicDetectionImpl);
}

void InitDefaultsUltrasonicIndirectDetectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsVector3d();
  {
    void* ptr = &::osi3::_UltrasonicIndirectDetection_default_instance_;
    new (ptr) ::osi3::UltrasonicIndirectDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicIndirectDetection::InitAsDefaultInstance();
}

void InitDefaultsUltrasonicIndirectDetection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUltrasonicIndirectDetectionImpl);
}

void InitDefaultsCameraDetectionSpecificHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_CameraDetectionSpecificHeader_default_instance_;
    new (ptr) ::osi3::CameraDetectionSpecificHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraDetectionSpecificHeader::InitAsDefaultInstance();
}

void InitDefaultsCameraDetectionSpecificHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraDetectionSpecificHeaderImpl);
}

void InitDefaultsCameraDetectionDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsSensorDetectionHeader();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetectionSpecificHeader();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetection();
  protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraPoint();
  {
    void* ptr = &::osi3::_CameraDetectionData_default_instance_;
    new (ptr) ::osi3::CameraDetectionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraDetectionData::InitAsDefaultInstance();
}

void InitDefaultsCameraDetectionData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraDetectionDataImpl);
}

void InitDefaultsCameraDetectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::osi3::_CameraDetection_default_instance_;
    new (ptr) ::osi3::CameraDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraDetection::InitAsDefaultInstance();
}

void InitDefaultsCameraDetection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraDetectionImpl);
}

void InitDefaultsCameraPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsSpherical3d();
  {
    void* ptr = &::osi3::_CameraPoint_default_instance_;
    new (ptr) ::osi3::CameraPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraPoint::InitAsDefaultInstance();
}

void InitDefaultsCameraPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraPointImpl);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::FeatureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::FeatureData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::FeatureData, radar_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::FeatureData, lidar_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::FeatureData, ultrasonic_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::FeatureData, camera_sensor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, cycle_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, mounting_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, mounting_position_rmse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, data_qualifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, number_of_valid_detections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::SensorDetectionHeader, extended_qualifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetectionData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetectionData, detection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, existence_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, position_rmse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, radial_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, radial_velocity_rmse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, rcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, snr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, point_target_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, ambiguity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarDetection, classification_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetectionData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetectionData, detection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, existence_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, position_rmse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, height_rmse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, free_space_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, classification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarDetection, reflectivity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionSpecificHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionSpecificHeader, max_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionSpecificHeader, number_of_valid_indirect_detections_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionData, specific_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionData, detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetectionData, indirect_detection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetection, existence_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetection, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicDetection, distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, existence_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, ellipsoid_radial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, ellipsoid_axial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, receiver_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, receiver_origin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetectionSpecificHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetectionSpecificHeader, number_of_valid_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetectionData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetectionData, specific_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetectionData, detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetectionData, point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, existence_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, time_difference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, image_shape_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_background_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_foreground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_flat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_upright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_ground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_sky_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_vegetation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_non_driving_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_non_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_stationary_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_moving_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_landmark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_traffic_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_road_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_animal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, color_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, ambiguity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, first_point_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraDetection, number_of_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraPoint, existence_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraPoint, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraPoint, point_rmse_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::FeatureData)},
  { 10, -1, sizeof(::osi3::SensorDetectionHeader)},
  { 23, -1, sizeof(::osi3::RadarDetectionData)},
  { 30, -1, sizeof(::osi3::RadarDetection)},
  { 46, -1, sizeof(::osi3::LidarDetectionData)},
  { 53, -1, sizeof(::osi3::LidarDetection)},
  { 68, -1, sizeof(::osi3::UltrasonicDetectionSpecificHeader)},
  { 75, -1, sizeof(::osi3::UltrasonicDetectionData)},
  { 84, -1, sizeof(::osi3::UltrasonicDetection)},
  { 92, -1, sizeof(::osi3::UltrasonicIndirectDetection)},
  { 103, -1, sizeof(::osi3::CameraDetectionSpecificHeader)},
  { 109, -1, sizeof(::osi3::CameraDetectionData)},
  { 118, -1, sizeof(::osi3::CameraDetection)},
  { 155, -1, sizeof(::osi3::CameraPoint)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_FeatureData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_SensorDetectionHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_RadarDetectionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_RadarDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_LidarDetectionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_LidarDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_UltrasonicDetectionSpecificHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_UltrasonicDetectionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_UltrasonicDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_UltrasonicIndirectDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_CameraDetectionSpecificHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_CameraDetectionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_CameraDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_CameraPoint_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_featuredata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025osi_featuredata.proto\022\004osi3\032\021osi_versi"
      "on.proto\032\020osi_common.proto\"\202\002\n\013FeatureDa"
      "ta\022\'\n\007version\030\001 \001(\0132\026.osi3.InterfaceVers"
      "ion\022.\n\014radar_sensor\030\002 \003(\0132\030.osi3.RadarDe"
      "tectionData\022.\n\014lidar_sensor\030\003 \003(\0132\030.osi3"
      ".LidarDetectionData\0228\n\021ultrasonic_sensor"
      "\030\004 \003(\0132\035.osi3.UltrasonicDetectionData\0220\n"
      "\rcamera_sensor\030\005 \003(\0132\031.osi3.CameraDetect"
      "ionData\"\352\t\n\025SensorDetectionHeader\022)\n\020mea"
      "surement_time\030\001 \001(\0132\017.osi3.Timestamp\022\025\n\r"
      "cycle_counter\030\002 \001(\004\0221\n\021mounting_position"
      "\030\003 \001(\0132\026.osi3.MountingPosition\0226\n\026mounti"
      "ng_position_rmse\030\004 \001(\0132\026.osi3.MountingPo"
      "sition\022A\n\016data_qualifier\030\005 \001(\0162).osi3.Se"
      "nsorDetectionHeader.DataQualifier\022\"\n\032num"
      "ber_of_valid_detections\030\006 \001(\r\022#\n\tsensor_"
      "id\030\007 \001(\0132\020.osi3.Identifier\022I\n\022extended_q"
      "ualifier\030\010 \001(\0162-.osi3.SensorDetectionHea"
      "der.ExtendedQualifier\"\215\002\n\rDataQualifier\022"
      "\032\n\026DATA_QUALIFIER_UNKNOWN\020\000\022\030\n\024DATA_QUAL"
      "IFIER_OTHER\020\001\022\034\n\030DATA_QUALIFIER_AVAILABL"
      "E\020\002\022$\n DATA_QUALIFIER_AVAILABLE_REDUCED\020"
      "\003\022 \n\034DATA_QUALIFIER_NOT_AVAILABLE\020\004\022\034\n\030D"
      "ATA_QUALIFIER_BLINDNESS\020\005\022&\n\"DATA_QUALIF"
      "IER_TEMPORARY_AVAILABLE\020\006\022\032\n\026DATA_QUALIF"
      "IER_INVALID\020\007\"\274\004\n\021ExtendedQualifier\022\036\n\032E"
      "XTENDED_QUALIFIER_UNKNOWN\020\000\022\034\n\030EXTENDED_"
      "QUALIFIER_OTHER\020\001\022,\n(EXTENDED_QUALIFIER_"
      "NORMAL_OPERATION_MODE\020\002\022\'\n#EXTENDED_QUAL"
      "IFIER_POWER_UP_OR_DOWN\020\003\022,\n(EXTENDED_QUA"
      "LIFIER_SENSOR_NOT_CALIBRATED\020\004\022%\n!EXTEND"
      "ED_QUALIFIER_SENSOR_BLOCKED\020\005\022(\n$EXTENDE"
      "D_QUALIFIER_SENSOR_MISALIGNED\020\006\0229\n5EXTEN"
      "DED_QUALIFIER_BAD_SENSOR_ENVIRONMENTAL_C"
      "ONDITION\020\007\022,\n(EXTENDED_QUALIFIER_REDUCED"
      "_FIELD_OF_VIEW\020\010\022*\n&EXTENDED_QUALIFIER_I"
      "NPUT_NOT_AVAILABLE\020\t\022&\n\"EXTENDED_QUALIFI"
      "ER_INTERNAL_REASON\020\n\022+\n\'EXTENDED_QUALIFI"
      "ER_EXTERNAL_DISTURBANCE\020\013\022)\n%EXTENDED_QU"
      "ALIFIER_BEGINNING_BLOCKAGE\020\014\"j\n\022RadarDet"
      "ectionData\022+\n\006header\030\001 \001(\0132\033.osi3.Sensor"
      "DetectionHeader\022\'\n\tdetection\030\002 \003(\0132\024.osi"
      "3.RadarDetection\"\365\002\n\016RadarDetection\022\035\n\025e"
      "xistence_probability\030\001 \001(\001\022#\n\tobject_id\030"
      "\002 \001(\0132\020.osi3.Identifier\022#\n\010position\030\003 \001("
      "\0132\021.osi3.Spherical3d\022(\n\rposition_rmse\030\004 "
      "\001(\0132\021.osi3.Spherical3d\022\027\n\017radial_velocit"
      "y\030\005 \001(\001\022\034\n\024radial_velocity_rmse\030\006 \001(\001\022\013\n"
      "\003rcs\030\007 \001(\001\022\013\n\003snr\030\010 \001(\001\022 \n\030point_target_"
      "probability\030\t \001(\001\022&\n\014ambiguity_id\030\n \001(\0132"
      "\020.osi3.Identifier\0225\n\016classification\030\013 \001("
      "\0162\035.osi3.DetectionClassification\"j\n\022Lida"
      "rDetectionData\022+\n\006header\030\001 \001(\0132\033.osi3.Se"
      "nsorDetectionHeader\022\'\n\tdetection\030\002 \003(\0132\024"
      ".osi3.LidarDetection\"\310\002\n\016LidarDetection\022"
      "\035\n\025existence_probability\030\001 \001(\001\022#\n\tobject"
      "_id\030\002 \001(\0132\020.osi3.Identifier\022#\n\010position\030"
      "\003 \001(\0132\021.osi3.Spherical3d\022(\n\rposition_rms"
      "e\030\004 \001(\0132\021.osi3.Spherical3d\022\016\n\006height\030\005 \001"
      "(\001\022\023\n\013height_rmse\030\006 \001(\001\022\021\n\tintensity\030\007 \001"
      "(\001\022\036\n\026free_space_probability\030\010 \001(\001\0225\n\016cl"
      "assification\030\t \001(\0162\035.osi3.DetectionClass"
      "ification\022\024\n\014reflectivity\030\n \001(\001\"c\n!Ultra"
      "sonicDetectionSpecificHeader\022\021\n\tmax_rang"
      "e\030\001 \001(\001\022+\n#number_of_valid_indirect_dete"
      "ctions\030\002 \001(\r\"\365\001\n\027UltrasonicDetectionData"
      "\022+\n\006header\030\001 \001(\0132\033.osi3.SensorDetectionH"
      "eader\022@\n\017specific_header\030\003 \001(\0132\'.osi3.Ul"
      "trasonicDetectionSpecificHeader\022,\n\tdetec"
      "tion\030\002 \003(\0132\031.osi3.UltrasonicDetection\022=\n"
      "\022indirect_detection\030\004 \003(\0132!.osi3.Ultraso"
      "nicIndirectDetection\"k\n\023UltrasonicDetect"
      "ion\022\035\n\025existence_probability\030\001 \001(\001\022#\n\tob"
      "ject_id\030\002 \001(\0132\020.osi3.Identifier\022\020\n\010dista"
      "nce\030\003 \001(\001\"\344\001\n\033UltrasonicIndirectDetectio"
      "n\022\035\n\025existence_probability\030\001 \001(\001\022#\n\tobje"
      "ct_id\030\002 \001(\0132\020.osi3.Identifier\022\030\n\020ellipso"
      "id_radial\030\003 \001(\001\022\027\n\017ellipsoid_axial\030\004 \001(\001"
      "\022%\n\013receiver_id\030\005 \001(\0132\020.osi3.Identifier\022"
      "\'\n\017receiver_origin\030\006 \001(\0132\016.osi3.Vector3d"
      "\"\?\n\035CameraDetectionSpecificHeader\022\036\n\026num"
      "ber_of_valid_points\030\001 \001(\r\"\314\001\n\023CameraDete"
      "ctionData\022+\n\006header\030\001 \001(\0132\033.osi3.SensorD"
      "etectionHeader\022<\n\017specific_header\030\003 \001(\0132"
      "#.osi3.CameraDetectionSpecificHeader\022(\n\t"
      "detection\030\002 \003(\0132\025.osi3.CameraDetection\022 "
      "\n\005point\030\004 \003(\0132\021.osi3.CameraPoint\"\361\r\n\017Cam"
      "eraDetection\022\035\n\025existence_probability\030\001 "
      "\001(\001\022#\n\tobject_id\030\002 \001(\0132\020.osi3.Identifier"
      "\022(\n\017time_difference\030\003 \001(\0132\017.osi3.Timesta"
      "mp\022>\n\020image_shape_type\030\004 \001(\0162$.osi3.Came"
      "raDetection.ImageShapeType\022\'\n\037shape_clas"
      "sification_background\030\005 \001(\010\022\'\n\037shape_cla"
      "ssification_foreground\030\006 \001(\010\022!\n\031shape_cl"
      "assification_flat\030\007 \001(\010\022$\n\034shape_classif"
      "ication_upright\030\010 \001(\010\022#\n\033shape_classific"
      "ation_ground\030\t \001(\010\022 \n\030shape_classificati"
      "on_sky\030\n \001(\010\022\'\n\037shape_classification_veg"
      "etation\030\013 \001(\010\022!\n\031shape_classification_ro"
      "ad\030\014 \001(\010\022-\n%shape_classification_non_dri"
      "ving_lane\030\r \001(\010\022%\n\035shape_classification_"
      "non_road\030\016 \001(\010\022.\n&shape_classification_s"
      "tationary_object\030\017 \001(\010\022*\n\"shape_classifi"
      "cation_moving_object\030\020 \001(\010\022%\n\035shape_clas"
      "sification_landmark\030\021 \001(\010\022)\n!shape_class"
      "ification_traffic_sign\030\022 \001(\010\022*\n\"shape_cl"
      "assification_traffic_light\030\023 \001(\010\022)\n!shap"
      "e_classification_road_marking\030\024 \001(\010\022$\n\034s"
      "hape_classification_vehicle\030\025 \001(\010\022\'\n\037sha"
      "pe_classification_pedestrian\030\026 \001(\010\022#\n\033sh"
      "ape_classification_animal\030\027 \001(\010\022-\n%shape"
      "_classification_pedestrian_front\030\030 \001(\010\022,"
      "\n$shape_classification_pedestrian_side\030\031"
      " \001(\010\022,\n$shape_classification_pedestrian_"
      "rear\030\032 \001(\010\022(\n shape_classification_proba"
      "bility\030\033 \001(\001\022*\n\005color\030\034 \001(\0162\033.osi3.Camer"
      "aDetection.Color\022\031\n\021color_probability\030\035 "
      "\001(\001\022&\n\014ambiguity_id\030\036 \001(\0132\020.osi3.Identif"
      "ier\022\031\n\021first_point_index\030\037 \001(\r\022\030\n\020number"
      "_of_points\030  \001(\r\"\331\001\n\005Color\022\021\n\rCOLOR_UNKN"
      "OWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\017\n\013COLOR_BLACK\020\002\022"
      "\016\n\nCOLOR_GREY\020\003\022\017\n\013COLOR_WHITE\020\004\022\020\n\014COLO"
      "R_YELLOW\020\005\022\020\n\014COLOR_ORANGE\020\006\022\r\n\tCOLOR_RE"
      "D\020\007\022\020\n\014COLOR_VIOLET\020\010\022\016\n\nCOLOR_BLUE\020\t\022\017\n"
      "\013COLOR_GREEN\020\n\022\024\n\020COLOR_REFLECTIVE\020\013\"\375\001\n"
      "\016ImageShapeType\022\034\n\030IMAGE_SHAPE_TYPE_UNKN"
      "OWN\020\000\022\032\n\026IMAGE_SHAPE_TYPE_OTHER\020\001\022\032\n\026IMA"
      "GE_SHAPE_TYPE_POINT\020\002\022\030\n\024IMAGE_SHAPE_TYP"
      "E_BOX\020\003\022\034\n\030IMAGE_SHAPE_TYPE_ELLIPSE\020\004\022\034\n"
      "\030IMAGE_SHAPE_TYPE_POLYGON\020\005\022\035\n\031IMAGE_SHA"
      "PE_TYPE_POLYLINE\020\006\022 \n\034IMAGE_SHAPE_TYPE_P"
      "OINT_CLOUD\020\007\"u\n\013CameraPoint\022\035\n\025existence"
      "_probability\030\001 \001(\001\022 \n\005point\030\002 \001(\0132\021.osi3"
      ".Spherical3d\022%\n\npoint_rmse\030\003 \001(\0132\021.osi3."
      "Spherical3d*\206\002\n\027DetectionClassification\022"
      "$\n DETECTION_CLASSIFICATION_UNKNOWN\020\000\022\"\n"
      "\036DETECTION_CLASSIFICATION_OTHER\020\001\022$\n DET"
      "ECTION_CLASSIFICATION_INVALID\020\002\022$\n DETEC"
      "TION_CLASSIFICATION_CLUTTER\020\003\022)\n%DETECTI"
      "ON_CLASSIFICATION_OVERDRIVABLE\020\004\022*\n&DETE"
      "CTION_CLASSIFICATION_UNDERDRIVABLE\020\005B\002H\001"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_featuredata.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fversion_2eproto::AddDescriptors();
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5ffeaturedata_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* SensorDetectionHeader_DataQualifier_descriptor() {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ffeaturedata_2eproto::file_level_enum_descriptors[0];
}
bool SensorDetectionHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_UNKNOWN;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_OTHER;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_AVAILABLE;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_NOT_AVAILABLE;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_BLINDNESS;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_INVALID;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DataQualifier_MIN;
const SensorDetectionHeader_DataQualifier SensorDetectionHeader::DataQualifier_MAX;
const int SensorDetectionHeader::DataQualifier_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SensorDetectionHeader_ExtendedQualifier_descriptor() {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ffeaturedata_2eproto::file_level_enum_descriptors[1];
}
bool SensorDetectionHeader_ExtendedQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_UNKNOWN;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_OTHER;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_NORMAL_OPERATION_MODE;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_POWER_UP_OR_DOWN;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_SENSOR_NOT_CALIBRATED;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_SENSOR_BLOCKED;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_SENSOR_MISALIGNED;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_BAD_SENSOR_ENVIRONMENTAL_CONDITION;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_REDUCED_FIELD_OF_VIEW;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_INPUT_NOT_AVAILABLE;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_INTERNAL_REASON;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_EXTERNAL_DISTURBANCE;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_BEGINNING_BLOCKAGE;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::ExtendedQualifier_MIN;
const SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::ExtendedQualifier_MAX;
const int SensorDetectionHeader::ExtendedQualifier_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CameraDetection_Color_descriptor() {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ffeaturedata_2eproto::file_level_enum_descriptors[2];
}
bool CameraDetection_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraDetection_Color CameraDetection::COLOR_UNKNOWN;
const CameraDetection_Color CameraDetection::COLOR_OTHER;
const CameraDetection_Color CameraDetection::COLOR_BLACK;
const CameraDetection_Color CameraDetection::COLOR_GREY;
const CameraDetection_Color CameraDetection::COLOR_WHITE;
const CameraDetection_Color CameraDetection::COLOR_YELLOW;
const CameraDetection_Color CameraDetection::COLOR_ORANGE;
const CameraDetection_Color CameraDetection::COLOR_RED;
const CameraDetection_Color CameraDetection::COLOR_VIOLET;
const CameraDetection_Color CameraDetection::COLOR_BLUE;
const CameraDetection_Color CameraDetection::COLOR_GREEN;
const CameraDetection_Color CameraDetection::COLOR_REFLECTIVE;
const CameraDetection_Color CameraDetection::Color_MIN;
const CameraDetection_Color CameraDetection::Color_MAX;
const int CameraDetection::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CameraDetection_ImageShapeType_descriptor() {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ffeaturedata_2eproto::file_level_enum_descriptors[3];
}
bool CameraDetection_ImageShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_UNKNOWN;
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_OTHER;
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POINT;
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_BOX;
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_ELLIPSE;
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POLYGON;
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POLYLINE;
const CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POINT_CLOUD;
const CameraDetection_ImageShapeType CameraDetection::ImageShapeType_MIN;
const CameraDetection_ImageShapeType CameraDetection::ImageShapeType_MAX;
const int CameraDetection::ImageShapeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DetectionClassification_descriptor() {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ffeaturedata_2eproto::file_level_enum_descriptors[4];
}
bool DetectionClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FeatureData::InitAsDefaultInstance() {
  ::osi3::_FeatureData_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
}
void FeatureData::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureData::kVersionFieldNumber;
const int FeatureData::kRadarSensorFieldNumber;
const int FeatureData::kLidarSensorFieldNumber;
const int FeatureData::kUltrasonicSensorFieldNumber;
const int FeatureData::kCameraSensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureData::FeatureData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsFeatureData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.FeatureData)
}
FeatureData::FeatureData(const FeatureData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      radar_sensor_(from.radar_sensor_),
      lidar_sensor_(from.lidar_sensor_),
      ultrasonic_sensor_(from.ultrasonic_sensor_),
      camera_sensor_(from.camera_sensor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.FeatureData)
}

void FeatureData::SharedCtor() {
  version_ = NULL;
  _cached_size_ = 0;
}

FeatureData::~FeatureData() {
  // @@protoc_insertion_point(destructor:osi3.FeatureData)
  SharedDtor();
}

void FeatureData::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
}

void FeatureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureData::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureData& FeatureData::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsFeatureData();
  return *internal_default_instance();
}

FeatureData* FeatureData::New(::google::protobuf::Arena* arena) const {
  FeatureData* n = new FeatureData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.FeatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radar_sensor_.Clear();
  lidar_sensor_.Clear();
  ultrasonic_sensor_.Clear();
  camera_sensor_.Clear();
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  _internal_metadata_.Clear();
}

bool FeatureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.FeatureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RadarDetectionData radar_sensor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_radar_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LidarDetectionData lidar_sensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lidar_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ultrasonic_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraDetectionData camera_sensor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_camera_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.FeatureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.FeatureData)
  return false;
#undef DO_
}

void FeatureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.FeatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // repeated .osi3.RadarDetectionData radar_sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radar_sensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->radar_sensor(static_cast<int>(i)), output);
  }

  // repeated .osi3.LidarDetectionData lidar_sensor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_sensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lidar_sensor(static_cast<int>(i)), output);
  }

  // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ultrasonic_sensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ultrasonic_sensor(static_cast<int>(i)), output);
  }

  // repeated .osi3.CameraDetectionData camera_sensor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_sensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_sensor(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.FeatureData)
}

::google::protobuf::uint8* FeatureData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.FeatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->version_, deterministic, target);
  }

  // repeated .osi3.RadarDetectionData radar_sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radar_sensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->radar_sensor(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.LidarDetectionData lidar_sensor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_sensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lidar_sensor(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ultrasonic_sensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ultrasonic_sensor(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.CameraDetectionData camera_sensor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_sensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->camera_sensor(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.FeatureData)
  return target;
}

size_t FeatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.FeatureData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.RadarDetectionData radar_sensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->radar_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->radar_sensor(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LidarDetectionData lidar_sensor = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lidar_sensor(static_cast<int>(i)));
    }
  }

  // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ultrasonic_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ultrasonic_sensor(static_cast<int>(i)));
    }
  }

  // repeated .osi3.CameraDetectionData camera_sensor = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->camera_sensor(static_cast<int>(i)));
    }
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.FeatureData)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.FeatureData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.FeatureData)
    MergeFrom(*source);
  }
}

void FeatureData::MergeFrom(const FeatureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.FeatureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radar_sensor_.MergeFrom(from.radar_sensor_);
  lidar_sensor_.MergeFrom(from.lidar_sensor_);
  ultrasonic_sensor_.MergeFrom(from.ultrasonic_sensor_);
  camera_sensor_.MergeFrom(from.camera_sensor_);
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
}

void FeatureData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.FeatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureData::CopyFrom(const FeatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.FeatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureData::IsInitialized() const {
  return true;
}

void FeatureData::Swap(FeatureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureData::InternalSwap(FeatureData* other) {
  using std::swap;
  radar_sensor_.InternalSwap(&other->radar_sensor_);
  lidar_sensor_.InternalSwap(&other->lidar_sensor_);
  ultrasonic_sensor_.InternalSwap(&other->ultrasonic_sensor_);
  camera_sensor_.InternalSwap(&other->camera_sensor_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureData::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorDetectionHeader::InitAsDefaultInstance() {
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->measurement_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
void SensorDetectionHeader::clear_measurement_time() {
  if (GetArenaNoVirtual() == NULL && measurement_time_ != NULL) {
    delete measurement_time_;
  }
  measurement_time_ = NULL;
}
void SensorDetectionHeader::clear_mounting_position() {
  if (GetArenaNoVirtual() == NULL && mounting_position_ != NULL) {
    delete mounting_position_;
  }
  mounting_position_ = NULL;
}
void SensorDetectionHeader::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == NULL && mounting_position_rmse_ != NULL) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = NULL;
}
void SensorDetectionHeader::clear_sensor_id() {
  if (GetArenaNoVirtual() == NULL && sensor_id_ != NULL) {
    delete sensor_id_;
  }
  sensor_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorDetectionHeader::kMeasurementTimeFieldNumber;
const int SensorDetectionHeader::kCycleCounterFieldNumber;
const int SensorDetectionHeader::kMountingPositionFieldNumber;
const int SensorDetectionHeader::kMountingPositionRmseFieldNumber;
const int SensorDetectionHeader::kDataQualifierFieldNumber;
const int SensorDetectionHeader::kNumberOfValidDetectionsFieldNumber;
const int SensorDetectionHeader::kSensorIdFieldNumber;
const int SensorDetectionHeader::kExtendedQualifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorDetectionHeader::SensorDetectionHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsSensorDetectionHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorDetectionHeader)
}
SensorDetectionHeader::SensorDetectionHeader(const SensorDetectionHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_measurement_time()) {
    measurement_time_ = new ::osi3::Timestamp(*from.measurement_time_);
  } else {
    measurement_time_ = NULL;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = NULL;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = NULL;
  }
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = NULL;
  }
  ::memcpy(&cycle_counter_, &from.cycle_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&extended_qualifier_) -
    reinterpret_cast<char*>(&cycle_counter_)) + sizeof(extended_qualifier_));
  // @@protoc_insertion_point(copy_constructor:osi3.SensorDetectionHeader)
}

void SensorDetectionHeader::SharedCtor() {
  ::memset(&measurement_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extended_qualifier_) -
      reinterpret_cast<char*>(&measurement_time_)) + sizeof(extended_qualifier_));
  _cached_size_ = 0;
}

SensorDetectionHeader::~SensorDetectionHeader() {
  // @@protoc_insertion_point(destructor:osi3.SensorDetectionHeader)
  SharedDtor();
}

void SensorDetectionHeader::SharedDtor() {
  if (this != internal_default_instance()) delete measurement_time_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
  if (this != internal_default_instance()) delete sensor_id_;
}

void SensorDetectionHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorDetectionHeader::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorDetectionHeader& SensorDetectionHeader::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsSensorDetectionHeader();
  return *internal_default_instance();
}

SensorDetectionHeader* SensorDetectionHeader::New(::google::protobuf::Arena* arena) const {
  SensorDetectionHeader* n = new SensorDetectionHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorDetectionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorDetectionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && measurement_time_ != NULL) {
    delete measurement_time_;
  }
  measurement_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && mounting_position_ != NULL) {
    delete mounting_position_;
  }
  mounting_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && mounting_position_rmse_ != NULL) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = NULL;
  if (GetArenaNoVirtual() == NULL && sensor_id_ != NULL) {
    delete sensor_id_;
  }
  sensor_id_ = NULL;
  ::memset(&cycle_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extended_qualifier_) -
      reinterpret_cast<char*>(&cycle_counter_)) + sizeof(extended_qualifier_));
  _internal_metadata_.Clear();
}

bool SensorDetectionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorDetectionHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Timestamp measurement_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measurement_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cycle_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cycle_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_qualifier(static_cast< ::osi3::SensorDetectionHeader_DataQualifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_valid_detections = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_valid_detections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier sensor_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_extended_qualifier(static_cast< ::osi3::SensorDetectionHeader_ExtendedQualifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorDetectionHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorDetectionHeader)
  return false;
#undef DO_
}

void SensorDetectionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorDetectionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->measurement_time_, output);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cycle_counter(), output);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mounting_position_, output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mounting_position_rmse_, output);
  }

  // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
  if (this->data_qualifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->data_qualifier(), output);
  }

  // uint32 number_of_valid_detections = 6;
  if (this->number_of_valid_detections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->number_of_valid_detections(), output);
  }

  // .osi3.Identifier sensor_id = 7;
  if (this->has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sensor_id_, output);
  }

  // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
  if (this->extended_qualifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->extended_qualifier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorDetectionHeader)
}

::google::protobuf::uint8* SensorDetectionHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorDetectionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->measurement_time_, deterministic, target);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cycle_counter(), target);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->mounting_position_, deterministic, target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->mounting_position_rmse_, deterministic, target);
  }

  // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
  if (this->data_qualifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->data_qualifier(), target);
  }

  // uint32 number_of_valid_detections = 6;
  if (this->number_of_valid_detections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_valid_detections(), target);
  }

  // .osi3.Identifier sensor_id = 7;
  if (this->has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->sensor_id_, deterministic, target);
  }

  // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
  if (this->extended_qualifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->extended_qualifier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorDetectionHeader)
  return target;
}

size_t SensorDetectionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorDetectionHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->measurement_time_);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mounting_position_rmse_);
  }

  // .osi3.Identifier sensor_id = 7;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_id_);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cycle_counter());
  }

  // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
  if (this->data_qualifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_qualifier());
  }

  // uint32 number_of_valid_detections = 6;
  if (this->number_of_valid_detections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_valid_detections());
  }

  // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
  if (this->extended_qualifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->extended_qualifier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorDetectionHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorDetectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorDetectionHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorDetectionHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorDetectionHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorDetectionHeader)
    MergeFrom(*source);
  }
}

void SensorDetectionHeader::MergeFrom(const SensorDetectionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorDetectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_measurement_time()) {
    mutable_measurement_time()->::osi3::Timestamp::MergeFrom(from.measurement_time());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.cycle_counter() != 0) {
    set_cycle_counter(from.cycle_counter());
  }
  if (from.data_qualifier() != 0) {
    set_data_qualifier(from.data_qualifier());
  }
  if (from.number_of_valid_detections() != 0) {
    set_number_of_valid_detections(from.number_of_valid_detections());
  }
  if (from.extended_qualifier() != 0) {
    set_extended_qualifier(from.extended_qualifier());
  }
}

void SensorDetectionHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorDetectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDetectionHeader::CopyFrom(const SensorDetectionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorDetectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDetectionHeader::IsInitialized() const {
  return true;
}

void SensorDetectionHeader::Swap(SensorDetectionHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorDetectionHeader::InternalSwap(SensorDetectionHeader* other) {
  using std::swap;
  swap(measurement_time_, other->measurement_time_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(sensor_id_, other->sensor_id_);
  swap(cycle_counter_, other->cycle_counter_);
  swap(data_qualifier_, other->data_qualifier_);
  swap(number_of_valid_detections_, other->number_of_valid_detections_);
  swap(extended_qualifier_, other->extended_qualifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorDetectionHeader::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RadarDetectionData::InitAsDefaultInstance() {
  ::osi3::_RadarDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarDetectionData::kHeaderFieldNumber;
const int RadarDetectionData::kDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarDetectionData::RadarDetectionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsRadarDetectionData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarDetectionData)
}
RadarDetectionData::RadarDetectionData(const RadarDetectionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detection_(from.detection_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.RadarDetectionData)
}

void RadarDetectionData::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

RadarDetectionData::~RadarDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.RadarDetectionData)
  SharedDtor();
}

void RadarDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RadarDetectionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarDetectionData::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarDetectionData& RadarDetectionData::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsRadarDetectionData();
  return *internal_default_instance();
}

RadarDetectionData* RadarDetectionData::New(::google::protobuf::Arena* arena) const {
  RadarDetectionData* n = new RadarDetectionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool RadarDetectionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarDetectionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RadarDetection detection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarDetectionData)
  return false;
#undef DO_
}

void RadarDetectionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .osi3.RadarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detection(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarDetectionData)
}

::google::protobuf::uint8* RadarDetectionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .osi3.RadarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarDetectionData)
  return target;
}

size_t RadarDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarDetectionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.RadarDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarDetectionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarDetectionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarDetectionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarDetectionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarDetectionData)
    MergeFrom(*source);
  }
}

void RadarDetectionData::MergeFrom(const RadarDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
}

void RadarDetectionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarDetectionData::CopyFrom(const RadarDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarDetectionData::IsInitialized() const {
  return true;
}

void RadarDetectionData::Swap(RadarDetectionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarDetectionData::InternalSwap(RadarDetectionData* other) {
  using std::swap;
  detection_.InternalSwap(&other->detection_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarDetectionData::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RadarDetection::InitAsDefaultInstance() {
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->position_rmse_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->ambiguity_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
void RadarDetection::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
void RadarDetection::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void RadarDetection::clear_position_rmse() {
  if (GetArenaNoVirtual() == NULL && position_rmse_ != NULL) {
    delete position_rmse_;
  }
  position_rmse_ = NULL;
}
void RadarDetection::clear_ambiguity_id() {
  if (GetArenaNoVirtual() == NULL && ambiguity_id_ != NULL) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarDetection::kExistenceProbabilityFieldNumber;
const int RadarDetection::kObjectIdFieldNumber;
const int RadarDetection::kPositionFieldNumber;
const int RadarDetection::kPositionRmseFieldNumber;
const int RadarDetection::kRadialVelocityFieldNumber;
const int RadarDetection::kRadialVelocityRmseFieldNumber;
const int RadarDetection::kRcsFieldNumber;
const int RadarDetection::kSnrFieldNumber;
const int RadarDetection::kPointTargetProbabilityFieldNumber;
const int RadarDetection::kAmbiguityIdFieldNumber;
const int RadarDetection::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarDetection::RadarDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsRadarDetection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarDetection)
}
RadarDetection::RadarDetection(const RadarDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::osi3::Spherical3d(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_position_rmse()) {
    position_rmse_ = new ::osi3::Spherical3d(*from.position_rmse_);
  } else {
    position_rmse_ = NULL;
  }
  if (from.has_ambiguity_id()) {
    ambiguity_id_ = new ::osi3::Identifier(*from.ambiguity_id_);
  } else {
    ambiguity_id_ = NULL;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:osi3.RadarDetection)
}

void RadarDetection::SharedCtor() {
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(classification_));
  _cached_size_ = 0;
}

RadarDetection::~RadarDetection() {
  // @@protoc_insertion_point(destructor:osi3.RadarDetection)
  SharedDtor();
}

void RadarDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_rmse_;
  if (this != internal_default_instance()) delete ambiguity_id_;
}

void RadarDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarDetection::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarDetection& RadarDetection::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsRadarDetection();
  return *internal_default_instance();
}

RadarDetection* RadarDetection::New(::google::protobuf::Arena* arena) const {
  RadarDetection* n = new RadarDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_rmse_ != NULL) {
    delete position_rmse_;
  }
  position_rmse_ = NULL;
  if (GetArenaNoVirtual() == NULL && ambiguity_id_ != NULL) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = NULL;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  _internal_metadata_.Clear();
}

bool RadarDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position_rmse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radial_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radial_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radial_velocity_rmse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radial_velocity_rmse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rcs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double snr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double point_target_probability = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_target_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier ambiguity_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambiguity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectionClassification classification = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification(static_cast< ::osi3::DetectionClassification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarDetection)
  return false;
#undef DO_
}

void RadarDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_id_, output);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->position_rmse_, output);
  }

  // double radial_velocity = 5;
  if (this->radial_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->radial_velocity(), output);
  }

  // double radial_velocity_rmse = 6;
  if (this->radial_velocity_rmse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->radial_velocity_rmse(), output);
  }

  // double rcs = 7;
  if (this->rcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rcs(), output);
  }

  // double snr = 8;
  if (this->snr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->snr(), output);
  }

  // double point_target_probability = 9;
  if (this->point_target_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->point_target_probability(), output);
  }

  // .osi3.Identifier ambiguity_id = 10;
  if (this->has_ambiguity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->ambiguity_id_, output);
  }

  // .osi3.DetectionClassification classification = 11;
  if (this->classification() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->classification(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarDetection)
}

::google::protobuf::uint8* RadarDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->object_id_, deterministic, target);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->position_, deterministic, target);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->position_rmse_, deterministic, target);
  }

  // double radial_velocity = 5;
  if (this->radial_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->radial_velocity(), target);
  }

  // double radial_velocity_rmse = 6;
  if (this->radial_velocity_rmse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->radial_velocity_rmse(), target);
  }

  // double rcs = 7;
  if (this->rcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rcs(), target);
  }

  // double snr = 8;
  if (this->snr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->snr(), target);
  }

  // double point_target_probability = 9;
  if (this->point_target_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->point_target_probability(), target);
  }

  // .osi3.Identifier ambiguity_id = 10;
  if (this->has_ambiguity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->ambiguity_id_, deterministic, target);
  }

  // .osi3.DetectionClassification classification = 11;
  if (this->classification() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->classification(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarDetection)
  return target;
}

size_t RadarDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->object_id_);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_rmse_);
  }

  // .osi3.Identifier ambiguity_id = 10;
  if (this->has_ambiguity_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ambiguity_id_);
  }

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    total_size += 1 + 8;
  }

  // double radial_velocity = 5;
  if (this->radial_velocity() != 0) {
    total_size += 1 + 8;
  }

  // double radial_velocity_rmse = 6;
  if (this->radial_velocity_rmse() != 0) {
    total_size += 1 + 8;
  }

  // double rcs = 7;
  if (this->rcs() != 0) {
    total_size += 1 + 8;
  }

  // double snr = 8;
  if (this->snr() != 0) {
    total_size += 1 + 8;
  }

  // double point_target_probability = 9;
  if (this->point_target_probability() != 0) {
    total_size += 1 + 8;
  }

  // .osi3.DetectionClassification classification = 11;
  if (this->classification() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->classification());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarDetection)
    MergeFrom(*source);
  }
}

void RadarDetection::MergeFrom(const RadarDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_position()) {
    mutable_position()->::osi3::Spherical3d::MergeFrom(from.position());
  }
  if (from.has_position_rmse()) {
    mutable_position_rmse()->::osi3::Spherical3d::MergeFrom(from.position_rmse());
  }
  if (from.has_ambiguity_id()) {
    mutable_ambiguity_id()->::osi3::Identifier::MergeFrom(from.ambiguity_id());
  }
  if (from.existence_probability() != 0) {
    set_existence_probability(from.existence_probability());
  }
  if (from.radial_velocity() != 0) {
    set_radial_velocity(from.radial_velocity());
  }
  if (from.radial_velocity_rmse() != 0) {
    set_radial_velocity_rmse(from.radial_velocity_rmse());
  }
  if (from.rcs() != 0) {
    set_rcs(from.rcs());
  }
  if (from.snr() != 0) {
    set_snr(from.snr());
  }
  if (from.point_target_probability() != 0) {
    set_point_target_probability(from.point_target_probability());
  }
  if (from.classification() != 0) {
    set_classification(from.classification());
  }
}

void RadarDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarDetection::CopyFrom(const RadarDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarDetection::IsInitialized() const {
  return true;
}

void RadarDetection::Swap(RadarDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarDetection::InternalSwap(RadarDetection* other) {
  using std::swap;
  swap(object_id_, other->object_id_);
  swap(position_, other->position_);
  swap(position_rmse_, other->position_rmse_);
  swap(ambiguity_id_, other->ambiguity_id_);
  swap(existence_probability_, other->existence_probability_);
  swap(radial_velocity_, other->radial_velocity_);
  swap(radial_velocity_rmse_, other->radial_velocity_rmse_);
  swap(rcs_, other->rcs_);
  swap(snr_, other->snr_);
  swap(point_target_probability_, other->point_target_probability_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarDetection::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarDetectionData::InitAsDefaultInstance() {
  ::osi3::_LidarDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarDetectionData::kHeaderFieldNumber;
const int LidarDetectionData::kDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarDetectionData::LidarDetectionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsLidarDetectionData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarDetectionData)
}
LidarDetectionData::LidarDetectionData(const LidarDetectionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detection_(from.detection_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LidarDetectionData)
}

void LidarDetectionData::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

LidarDetectionData::~LidarDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.LidarDetectionData)
  SharedDtor();
}

void LidarDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LidarDetectionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarDetectionData::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarDetectionData& LidarDetectionData::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsLidarDetectionData();
  return *internal_default_instance();
}

LidarDetectionData* LidarDetectionData::New(::google::protobuf::Arena* arena) const {
  LidarDetectionData* n = new LidarDetectionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool LidarDetectionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarDetectionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LidarDetection detection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarDetectionData)
  return false;
#undef DO_
}

void LidarDetectionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .osi3.LidarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detection(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarDetectionData)
}

::google::protobuf::uint8* LidarDetectionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .osi3.LidarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarDetectionData)
  return target;
}

size_t LidarDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarDetectionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.LidarDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarDetectionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarDetectionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarDetectionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarDetectionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarDetectionData)
    MergeFrom(*source);
  }
}

void LidarDetectionData::MergeFrom(const LidarDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
}

void LidarDetectionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarDetectionData::CopyFrom(const LidarDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarDetectionData::IsInitialized() const {
  return true;
}

void LidarDetectionData::Swap(LidarDetectionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarDetectionData::InternalSwap(LidarDetectionData* other) {
  using std::swap;
  detection_.InternalSwap(&other->detection_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarDetectionData::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarDetection::InitAsDefaultInstance() {
  ::osi3::_LidarDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LidarDetection_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_LidarDetection_default_instance_._instance.get_mutable()->position_rmse_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
}
void LidarDetection::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
void LidarDetection::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void LidarDetection::clear_position_rmse() {
  if (GetArenaNoVirtual() == NULL && position_rmse_ != NULL) {
    delete position_rmse_;
  }
  position_rmse_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarDetection::kExistenceProbabilityFieldNumber;
const int LidarDetection::kObjectIdFieldNumber;
const int LidarDetection::kPositionFieldNumber;
const int LidarDetection::kPositionRmseFieldNumber;
const int LidarDetection::kHeightFieldNumber;
const int LidarDetection::kHeightRmseFieldNumber;
const int LidarDetection::kIntensityFieldNumber;
const int LidarDetection::kFreeSpaceProbabilityFieldNumber;
const int LidarDetection::kClassificationFieldNumber;
const int LidarDetection::kReflectivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarDetection::LidarDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsLidarDetection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarDetection)
}
LidarDetection::LidarDetection(const LidarDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::osi3::Spherical3d(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_position_rmse()) {
    position_rmse_ = new ::osi3::Spherical3d(*from.position_rmse_);
  } else {
    position_rmse_ = NULL;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:osi3.LidarDetection)
}

void LidarDetection::SharedCtor() {
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(classification_));
  _cached_size_ = 0;
}

LidarDetection::~LidarDetection() {
  // @@protoc_insertion_point(destructor:osi3.LidarDetection)
  SharedDtor();
}

void LidarDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_rmse_;
}

void LidarDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarDetection::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarDetection& LidarDetection::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsLidarDetection();
  return *internal_default_instance();
}

LidarDetection* LidarDetection::New(::google::protobuf::Arena* arena) const {
  LidarDetection* n = new LidarDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_rmse_ != NULL) {
    delete position_rmse_;
  }
  position_rmse_ = NULL;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  _internal_metadata_.Clear();
}

bool LidarDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position_rmse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height_rmse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_rmse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double intensity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double free_space_probability = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &free_space_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectionClassification classification = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification(static_cast< ::osi3::DetectionClassification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reflectivity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reflectivity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarDetection)
  return false;
#undef DO_
}

void LidarDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_id_, output);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->position_rmse_, output);
  }

  // double height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // double height_rmse = 6;
  if (this->height_rmse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->height_rmse(), output);
  }

  // double intensity = 7;
  if (this->intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->intensity(), output);
  }

  // double free_space_probability = 8;
  if (this->free_space_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->free_space_probability(), output);
  }

  // .osi3.DetectionClassification classification = 9;
  if (this->classification() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->classification(), output);
  }

  // double reflectivity = 10;
  if (this->reflectivity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->reflectivity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarDetection)
}

::google::protobuf::uint8* LidarDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->object_id_, deterministic, target);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->position_, deterministic, target);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->position_rmse_, deterministic, target);
  }

  // double height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // double height_rmse = 6;
  if (this->height_rmse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->height_rmse(), target);
  }

  // double intensity = 7;
  if (this->intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->intensity(), target);
  }

  // double free_space_probability = 8;
  if (this->free_space_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->free_space_probability(), target);
  }

  // .osi3.DetectionClassification classification = 9;
  if (this->classification() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->classification(), target);
  }

  // double reflectivity = 10;
  if (this->reflectivity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->reflectivity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarDetection)
  return target;
}

size_t LidarDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->object_id_);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_rmse_);
  }

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    total_size += 1 + 8;
  }

  // double height = 5;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double height_rmse = 6;
  if (this->height_rmse() != 0) {
    total_size += 1 + 8;
  }

  // double intensity = 7;
  if (this->intensity() != 0) {
    total_size += 1 + 8;
  }

  // double free_space_probability = 8;
  if (this->free_space_probability() != 0) {
    total_size += 1 + 8;
  }

  // double reflectivity = 10;
  if (this->reflectivity() != 0) {
    total_size += 1 + 8;
  }

  // .osi3.DetectionClassification classification = 9;
  if (this->classification() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->classification());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarDetection)
    MergeFrom(*source);
  }
}

void LidarDetection::MergeFrom(const LidarDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_position()) {
    mutable_position()->::osi3::Spherical3d::MergeFrom(from.position());
  }
  if (from.has_position_rmse()) {
    mutable_position_rmse()->::osi3::Spherical3d::MergeFrom(from.position_rmse());
  }
  if (from.existence_probability() != 0) {
    set_existence_probability(from.existence_probability());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.height_rmse() != 0) {
    set_height_rmse(from.height_rmse());
  }
  if (from.intensity() != 0) {
    set_intensity(from.intensity());
  }
  if (from.free_space_probability() != 0) {
    set_free_space_probability(from.free_space_probability());
  }
  if (from.reflectivity() != 0) {
    set_reflectivity(from.reflectivity());
  }
  if (from.classification() != 0) {
    set_classification(from.classification());
  }
}

void LidarDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarDetection::CopyFrom(const LidarDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarDetection::IsInitialized() const {
  return true;
}

void LidarDetection::Swap(LidarDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarDetection::InternalSwap(LidarDetection* other) {
  using std::swap;
  swap(object_id_, other->object_id_);
  swap(position_, other->position_);
  swap(position_rmse_, other->position_rmse_);
  swap(existence_probability_, other->existence_probability_);
  swap(height_, other->height_);
  swap(height_rmse_, other->height_rmse_);
  swap(intensity_, other->intensity_);
  swap(free_space_probability_, other->free_space_probability_);
  swap(reflectivity_, other->reflectivity_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarDetection::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UltrasonicDetectionSpecificHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicDetectionSpecificHeader::kMaxRangeFieldNumber;
const int UltrasonicDetectionSpecificHeader::kNumberOfValidIndirectDetectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicDetectionSpecificHeader::UltrasonicDetectionSpecificHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetectionSpecificHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicDetectionSpecificHeader)
}
UltrasonicDetectionSpecificHeader::UltrasonicDetectionSpecificHeader(const UltrasonicDetectionSpecificHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_range_, &from.max_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_valid_indirect_detections_) -
    reinterpret_cast<char*>(&max_range_)) + sizeof(number_of_valid_indirect_detections_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicDetectionSpecificHeader)
}

void UltrasonicDetectionSpecificHeader::SharedCtor() {
  ::memset(&max_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_valid_indirect_detections_) -
      reinterpret_cast<char*>(&max_range_)) + sizeof(number_of_valid_indirect_detections_));
  _cached_size_ = 0;
}

UltrasonicDetectionSpecificHeader::~UltrasonicDetectionSpecificHeader() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicDetectionSpecificHeader)
  SharedDtor();
}

void UltrasonicDetectionSpecificHeader::SharedDtor() {
}

void UltrasonicDetectionSpecificHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicDetectionSpecificHeader::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UltrasonicDetectionSpecificHeader& UltrasonicDetectionSpecificHeader::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetectionSpecificHeader();
  return *internal_default_instance();
}

UltrasonicDetectionSpecificHeader* UltrasonicDetectionSpecificHeader::New(::google::protobuf::Arena* arena) const {
  UltrasonicDetectionSpecificHeader* n = new UltrasonicDetectionSpecificHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicDetectionSpecificHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicDetectionSpecificHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_valid_indirect_detections_) -
      reinterpret_cast<char*>(&max_range_)) + sizeof(number_of_valid_indirect_detections_));
  _internal_metadata_.Clear();
}

bool UltrasonicDetectionSpecificHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicDetectionSpecificHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_valid_indirect_detections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_valid_indirect_detections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicDetectionSpecificHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicDetectionSpecificHeader)
  return false;
#undef DO_
}

void UltrasonicDetectionSpecificHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicDetectionSpecificHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_range = 1;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_range(), output);
  }

  // uint32 number_of_valid_indirect_detections = 2;
  if (this->number_of_valid_indirect_detections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number_of_valid_indirect_detections(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicDetectionSpecificHeader)
}

::google::protobuf::uint8* UltrasonicDetectionSpecificHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicDetectionSpecificHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_range = 1;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_range(), target);
  }

  // uint32 number_of_valid_indirect_detections = 2;
  if (this->number_of_valid_indirect_detections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number_of_valid_indirect_detections(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicDetectionSpecificHeader)
  return target;
}

size_t UltrasonicDetectionSpecificHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicDetectionSpecificHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double max_range = 1;
  if (this->max_range() != 0) {
    total_size += 1 + 8;
  }

  // uint32 number_of_valid_indirect_detections = 2;
  if (this->number_of_valid_indirect_detections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_valid_indirect_detections());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicDetectionSpecificHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDetectionSpecificHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicDetectionSpecificHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicDetectionSpecificHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicDetectionSpecificHeader)
    MergeFrom(*source);
  }
}

void UltrasonicDetectionSpecificHeader::MergeFrom(const UltrasonicDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
  if (from.number_of_valid_indirect_detections() != 0) {
    set_number_of_valid_indirect_detections(from.number_of_valid_indirect_detections());
  }
}

void UltrasonicDetectionSpecificHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDetectionSpecificHeader::CopyFrom(const UltrasonicDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDetectionSpecificHeader::IsInitialized() const {
  return true;
}

void UltrasonicDetectionSpecificHeader::Swap(UltrasonicDetectionSpecificHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicDetectionSpecificHeader::InternalSwap(UltrasonicDetectionSpecificHeader* other) {
  using std::swap;
  swap(max_range_, other->max_range_);
  swap(number_of_valid_indirect_detections_, other->number_of_valid_indirect_detections_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicDetectionSpecificHeader::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UltrasonicDetectionData::InitAsDefaultInstance() {
  ::osi3::_UltrasonicDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
  ::osi3::_UltrasonicDetectionData_default_instance_._instance.get_mutable()->specific_header_ = const_cast< ::osi3::UltrasonicDetectionSpecificHeader*>(
      ::osi3::UltrasonicDetectionSpecificHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicDetectionData::kHeaderFieldNumber;
const int UltrasonicDetectionData::kSpecificHeaderFieldNumber;
const int UltrasonicDetectionData::kDetectionFieldNumber;
const int UltrasonicDetectionData::kIndirectDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicDetectionData::UltrasonicDetectionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetectionData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicDetectionData)
}
UltrasonicDetectionData::UltrasonicDetectionData(const UltrasonicDetectionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detection_(from.detection_),
      indirect_detection_(from.indirect_detection_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_specific_header()) {
    specific_header_ = new ::osi3::UltrasonicDetectionSpecificHeader(*from.specific_header_);
  } else {
    specific_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicDetectionData)
}

void UltrasonicDetectionData::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specific_header_) -
      reinterpret_cast<char*>(&header_)) + sizeof(specific_header_));
  _cached_size_ = 0;
}

UltrasonicDetectionData::~UltrasonicDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicDetectionData)
  SharedDtor();
}

void UltrasonicDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete specific_header_;
}

void UltrasonicDetectionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicDetectionData::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UltrasonicDetectionData& UltrasonicDetectionData::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetectionData();
  return *internal_default_instance();
}

UltrasonicDetectionData* UltrasonicDetectionData::New(::google::protobuf::Arena* arena) const {
  UltrasonicDetectionData* n = new UltrasonicDetectionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  indirect_detection_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && specific_header_ != NULL) {
    delete specific_header_;
  }
  specific_header_ = NULL;
  _internal_metadata_.Clear();
}

bool UltrasonicDetectionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicDetectionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicDetection detection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_specific_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_indirect_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicDetectionData)
  return false;
#undef DO_
}

void UltrasonicDetectionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .osi3.UltrasonicDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detection(static_cast<int>(i)), output);
  }

  // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->specific_header_, output);
  }

  // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indirect_detection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->indirect_detection(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicDetectionData)
}

::google::protobuf::uint8* UltrasonicDetectionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .osi3.UltrasonicDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->specific_header_, deterministic, target);
  }

  // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indirect_detection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->indirect_detection(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicDetectionData)
  return target;
}

size_t UltrasonicDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicDetectionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.UltrasonicDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->indirect_detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->indirect_detection(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->specific_header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicDetectionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDetectionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicDetectionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicDetectionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicDetectionData)
    MergeFrom(*source);
  }
}

void UltrasonicDetectionData::MergeFrom(const UltrasonicDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  indirect_detection_.MergeFrom(from.indirect_detection_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
  if (from.has_specific_header()) {
    mutable_specific_header()->::osi3::UltrasonicDetectionSpecificHeader::MergeFrom(from.specific_header());
  }
}

void UltrasonicDetectionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDetectionData::CopyFrom(const UltrasonicDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDetectionData::IsInitialized() const {
  return true;
}

void UltrasonicDetectionData::Swap(UltrasonicDetectionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicDetectionData::InternalSwap(UltrasonicDetectionData* other) {
  using std::swap;
  detection_.InternalSwap(&other->detection_);
  indirect_detection_.InternalSwap(&other->indirect_detection_);
  swap(header_, other->header_);
  swap(specific_header_, other->specific_header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicDetectionData::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UltrasonicDetection::InitAsDefaultInstance() {
  ::osi3::_UltrasonicDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
void UltrasonicDetection::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicDetection::kExistenceProbabilityFieldNumber;
const int UltrasonicDetection::kObjectIdFieldNumber;
const int UltrasonicDetection::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicDetection::UltrasonicDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicDetection)
}
UltrasonicDetection::UltrasonicDetection(const UltrasonicDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicDetection)
}

void UltrasonicDetection::SharedCtor() {
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(distance_));
  _cached_size_ = 0;
}

UltrasonicDetection::~UltrasonicDetection() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicDetection)
  SharedDtor();
}

void UltrasonicDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
}

void UltrasonicDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicDetection::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UltrasonicDetection& UltrasonicDetection::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicDetection();
  return *internal_default_instance();
}

UltrasonicDetection* UltrasonicDetection::New(::google::protobuf::Arena* arena) const {
  UltrasonicDetection* n = new UltrasonicDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

bool UltrasonicDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicDetection)
  return false;
#undef DO_
}

void UltrasonicDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_id_, output);
  }

  // double distance = 3;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicDetection)
}

::google::protobuf::uint8* UltrasonicDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->object_id_, deterministic, target);
  }

  // double distance = 3;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicDetection)
  return target;
}

size_t UltrasonicDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->object_id_);
  }

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    total_size += 1 + 8;
  }

  // double distance = 3;
  if (this->distance() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicDetection)
    MergeFrom(*source);
  }
}

void UltrasonicDetection::MergeFrom(const UltrasonicDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.existence_probability() != 0) {
    set_existence_probability(from.existence_probability());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void UltrasonicDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDetection::CopyFrom(const UltrasonicDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDetection::IsInitialized() const {
  return true;
}

void UltrasonicDetection::Swap(UltrasonicDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicDetection::InternalSwap(UltrasonicDetection* other) {
  using std::swap;
  swap(object_id_, other->object_id_);
  swap(existence_probability_, other->existence_probability_);
  swap(distance_, other->distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicDetection::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UltrasonicIndirectDetection::InitAsDefaultInstance() {
  ::osi3::_UltrasonicIndirectDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_UltrasonicIndirectDetection_default_instance_._instance.get_mutable()->receiver_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_UltrasonicIndirectDetection_default_instance_._instance.get_mutable()->receiver_origin_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
void UltrasonicIndirectDetection::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
void UltrasonicIndirectDetection::clear_receiver_id() {
  if (GetArenaNoVirtual() == NULL && receiver_id_ != NULL) {
    delete receiver_id_;
  }
  receiver_id_ = NULL;
}
void UltrasonicIndirectDetection::clear_receiver_origin() {
  if (GetArenaNoVirtual() == NULL && receiver_origin_ != NULL) {
    delete receiver_origin_;
  }
  receiver_origin_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicIndirectDetection::kExistenceProbabilityFieldNumber;
const int UltrasonicIndirectDetection::kObjectIdFieldNumber;
const int UltrasonicIndirectDetection::kEllipsoidRadialFieldNumber;
const int UltrasonicIndirectDetection::kEllipsoidAxialFieldNumber;
const int UltrasonicIndirectDetection::kReceiverIdFieldNumber;
const int UltrasonicIndirectDetection::kReceiverOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicIndirectDetection::UltrasonicIndirectDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicIndirectDetection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicIndirectDetection)
}
UltrasonicIndirectDetection::UltrasonicIndirectDetection(const UltrasonicIndirectDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  if (from.has_receiver_id()) {
    receiver_id_ = new ::osi3::Identifier(*from.receiver_id_);
  } else {
    receiver_id_ = NULL;
  }
  if (from.has_receiver_origin()) {
    receiver_origin_ = new ::osi3::Vector3d(*from.receiver_origin_);
  } else {
    receiver_origin_ = NULL;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&ellipsoid_axial_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(ellipsoid_axial_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicIndirectDetection)
}

void UltrasonicIndirectDetection::SharedCtor() {
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ellipsoid_axial_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(ellipsoid_axial_));
  _cached_size_ = 0;
}

UltrasonicIndirectDetection::~UltrasonicIndirectDetection() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicIndirectDetection)
  SharedDtor();
}

void UltrasonicIndirectDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete receiver_id_;
  if (this != internal_default_instance()) delete receiver_origin_;
}

void UltrasonicIndirectDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicIndirectDetection::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UltrasonicIndirectDetection& UltrasonicIndirectDetection::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsUltrasonicIndirectDetection();
  return *internal_default_instance();
}

UltrasonicIndirectDetection* UltrasonicIndirectDetection::New(::google::protobuf::Arena* arena) const {
  UltrasonicIndirectDetection* n = new UltrasonicIndirectDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicIndirectDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicIndirectDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && receiver_id_ != NULL) {
    delete receiver_id_;
  }
  receiver_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && receiver_origin_ != NULL) {
    delete receiver_origin_;
  }
  receiver_origin_ = NULL;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ellipsoid_axial_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(ellipsoid_axial_));
  _internal_metadata_.Clear();
}

bool UltrasonicIndirectDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicIndirectDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ellipsoid_radial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipsoid_radial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ellipsoid_axial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipsoid_axial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier receiver_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d receiver_origin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicIndirectDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicIndirectDetection)
  return false;
#undef DO_
}

void UltrasonicIndirectDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicIndirectDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_id_, output);
  }

  // double ellipsoid_radial = 3;
  if (this->ellipsoid_radial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ellipsoid_radial(), output);
  }

  // double ellipsoid_axial = 4;
  if (this->ellipsoid_axial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ellipsoid_axial(), output);
  }

  // .osi3.Identifier receiver_id = 5;
  if (this->has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->receiver_id_, output);
  }

  // .osi3.Vector3d receiver_origin = 6;
  if (this->has_receiver_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->receiver_origin_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicIndirectDetection)
}

::google::protobuf::uint8* UltrasonicIndirectDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicIndirectDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->object_id_, deterministic, target);
  }

  // double ellipsoid_radial = 3;
  if (this->ellipsoid_radial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ellipsoid_radial(), target);
  }

  // double ellipsoid_axial = 4;
  if (this->ellipsoid_axial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ellipsoid_axial(), target);
  }

  // .osi3.Identifier receiver_id = 5;
  if (this->has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->receiver_id_, deterministic, target);
  }

  // .osi3.Vector3d receiver_origin = 6;
  if (this->has_receiver_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->receiver_origin_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicIndirectDetection)
  return target;
}

size_t UltrasonicIndirectDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicIndirectDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->object_id_);
  }

  // .osi3.Identifier receiver_id = 5;
  if (this->has_receiver_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->receiver_id_);
  }

  // .osi3.Vector3d receiver_origin = 6;
  if (this->has_receiver_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->receiver_origin_);
  }

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    total_size += 1 + 8;
  }

  // double ellipsoid_radial = 3;
  if (this->ellipsoid_radial() != 0) {
    total_size += 1 + 8;
  }

  // double ellipsoid_axial = 4;
  if (this->ellipsoid_axial() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicIndirectDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicIndirectDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicIndirectDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicIndirectDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicIndirectDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicIndirectDetection)
    MergeFrom(*source);
  }
}

void UltrasonicIndirectDetection::MergeFrom(const UltrasonicIndirectDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicIndirectDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_receiver_id()) {
    mutable_receiver_id()->::osi3::Identifier::MergeFrom(from.receiver_id());
  }
  if (from.has_receiver_origin()) {
    mutable_receiver_origin()->::osi3::Vector3d::MergeFrom(from.receiver_origin());
  }
  if (from.existence_probability() != 0) {
    set_existence_probability(from.existence_probability());
  }
  if (from.ellipsoid_radial() != 0) {
    set_ellipsoid_radial(from.ellipsoid_radial());
  }
  if (from.ellipsoid_axial() != 0) {
    set_ellipsoid_axial(from.ellipsoid_axial());
  }
}

void UltrasonicIndirectDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicIndirectDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicIndirectDetection::CopyFrom(const UltrasonicIndirectDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicIndirectDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicIndirectDetection::IsInitialized() const {
  return true;
}

void UltrasonicIndirectDetection::Swap(UltrasonicIndirectDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicIndirectDetection::InternalSwap(UltrasonicIndirectDetection* other) {
  using std::swap;
  swap(object_id_, other->object_id_);
  swap(receiver_id_, other->receiver_id_);
  swap(receiver_origin_, other->receiver_origin_);
  swap(existence_probability_, other->existence_probability_);
  swap(ellipsoid_radial_, other->ellipsoid_radial_);
  swap(ellipsoid_axial_, other->ellipsoid_axial_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicIndirectDetection::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraDetectionSpecificHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraDetectionSpecificHeader::kNumberOfValidPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraDetectionSpecificHeader::CameraDetectionSpecificHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetectionSpecificHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraDetectionSpecificHeader)
}
CameraDetectionSpecificHeader::CameraDetectionSpecificHeader(const CameraDetectionSpecificHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_of_valid_points_ = from.number_of_valid_points_;
  // @@protoc_insertion_point(copy_constructor:osi3.CameraDetectionSpecificHeader)
}

void CameraDetectionSpecificHeader::SharedCtor() {
  number_of_valid_points_ = 0u;
  _cached_size_ = 0;
}

CameraDetectionSpecificHeader::~CameraDetectionSpecificHeader() {
  // @@protoc_insertion_point(destructor:osi3.CameraDetectionSpecificHeader)
  SharedDtor();
}

void CameraDetectionSpecificHeader::SharedDtor() {
}

void CameraDetectionSpecificHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraDetectionSpecificHeader::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraDetectionSpecificHeader& CameraDetectionSpecificHeader::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetectionSpecificHeader();
  return *internal_default_instance();
}

CameraDetectionSpecificHeader* CameraDetectionSpecificHeader::New(::google::protobuf::Arena* arena) const {
  CameraDetectionSpecificHeader* n = new CameraDetectionSpecificHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraDetectionSpecificHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraDetectionSpecificHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_of_valid_points_ = 0u;
  _internal_metadata_.Clear();
}

bool CameraDetectionSpecificHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraDetectionSpecificHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number_of_valid_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_valid_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraDetectionSpecificHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraDetectionSpecificHeader)
  return false;
#undef DO_
}

void CameraDetectionSpecificHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraDetectionSpecificHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_valid_points = 1;
  if (this->number_of_valid_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_valid_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraDetectionSpecificHeader)
}

::google::protobuf::uint8* CameraDetectionSpecificHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraDetectionSpecificHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_valid_points = 1;
  if (this->number_of_valid_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_valid_points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraDetectionSpecificHeader)
  return target;
}

size_t CameraDetectionSpecificHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraDetectionSpecificHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 number_of_valid_points = 1;
  if (this->number_of_valid_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_valid_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraDetectionSpecificHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDetectionSpecificHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraDetectionSpecificHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraDetectionSpecificHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraDetectionSpecificHeader)
    MergeFrom(*source);
  }
}

void CameraDetectionSpecificHeader::MergeFrom(const CameraDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number_of_valid_points() != 0) {
    set_number_of_valid_points(from.number_of_valid_points());
  }
}

void CameraDetectionSpecificHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDetectionSpecificHeader::CopyFrom(const CameraDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetectionSpecificHeader::IsInitialized() const {
  return true;
}

void CameraDetectionSpecificHeader::Swap(CameraDetectionSpecificHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraDetectionSpecificHeader::InternalSwap(CameraDetectionSpecificHeader* other) {
  using std::swap;
  swap(number_of_valid_points_, other->number_of_valid_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraDetectionSpecificHeader::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraDetectionData::InitAsDefaultInstance() {
  ::osi3::_CameraDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
  ::osi3::_CameraDetectionData_default_instance_._instance.get_mutable()->specific_header_ = const_cast< ::osi3::CameraDetectionSpecificHeader*>(
      ::osi3::CameraDetectionSpecificHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraDetectionData::kHeaderFieldNumber;
const int CameraDetectionData::kSpecificHeaderFieldNumber;
const int CameraDetectionData::kDetectionFieldNumber;
const int CameraDetectionData::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraDetectionData::CameraDetectionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetectionData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraDetectionData)
}
CameraDetectionData::CameraDetectionData(const CameraDetectionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detection_(from.detection_),
      point_(from.point_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_specific_header()) {
    specific_header_ = new ::osi3::CameraDetectionSpecificHeader(*from.specific_header_);
  } else {
    specific_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.CameraDetectionData)
}

void CameraDetectionData::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specific_header_) -
      reinterpret_cast<char*>(&header_)) + sizeof(specific_header_));
  _cached_size_ = 0;
}

CameraDetectionData::~CameraDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.CameraDetectionData)
  SharedDtor();
}

void CameraDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete specific_header_;
}

void CameraDetectionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraDetectionData::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraDetectionData& CameraDetectionData::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetectionData();
  return *internal_default_instance();
}

CameraDetectionData* CameraDetectionData::New(::google::protobuf::Arena* arena) const {
  CameraDetectionData* n = new CameraDetectionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  point_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && specific_header_ != NULL) {
    delete specific_header_;
  }
  specific_header_ = NULL;
  _internal_metadata_.Clear();
}

bool CameraDetectionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraDetectionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraDetection detection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.CameraDetectionSpecificHeader specific_header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_specific_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraPoint point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraDetectionData)
  return false;
#undef DO_
}

void CameraDetectionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .osi3.CameraDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detection(static_cast<int>(i)), output);
  }

  // .osi3.CameraDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->specific_header_, output);
  }

  // repeated .osi3.CameraPoint point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->point(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraDetectionData)
}

::google::protobuf::uint8* CameraDetectionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraDetectionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .osi3.CameraDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.CameraDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->specific_header_, deterministic, target);
  }

  // repeated .osi3.CameraPoint point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->point(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraDetectionData)
  return target;
}

size_t CameraDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraDetectionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.CameraDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // repeated .osi3.CameraPoint point = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .osi3.CameraDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->specific_header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraDetectionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDetectionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraDetectionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraDetectionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraDetectionData)
    MergeFrom(*source);
  }
}

void CameraDetectionData::MergeFrom(const CameraDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  point_.MergeFrom(from.point_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
  if (from.has_specific_header()) {
    mutable_specific_header()->::osi3::CameraDetectionSpecificHeader::MergeFrom(from.specific_header());
  }
}

void CameraDetectionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDetectionData::CopyFrom(const CameraDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetectionData::IsInitialized() const {
  return true;
}

void CameraDetectionData::Swap(CameraDetectionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraDetectionData::InternalSwap(CameraDetectionData* other) {
  using std::swap;
  detection_.InternalSwap(&other->detection_);
  point_.InternalSwap(&other->point_);
  swap(header_, other->header_);
  swap(specific_header_, other->specific_header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraDetectionData::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraDetection::InitAsDefaultInstance() {
  ::osi3::_CameraDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_CameraDetection_default_instance_._instance.get_mutable()->time_difference_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_CameraDetection_default_instance_._instance.get_mutable()->ambiguity_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
void CameraDetection::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
void CameraDetection::clear_time_difference() {
  if (GetArenaNoVirtual() == NULL && time_difference_ != NULL) {
    delete time_difference_;
  }
  time_difference_ = NULL;
}
void CameraDetection::clear_ambiguity_id() {
  if (GetArenaNoVirtual() == NULL && ambiguity_id_ != NULL) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraDetection::kExistenceProbabilityFieldNumber;
const int CameraDetection::kObjectIdFieldNumber;
const int CameraDetection::kTimeDifferenceFieldNumber;
const int CameraDetection::kImageShapeTypeFieldNumber;
const int CameraDetection::kShapeClassificationBackgroundFieldNumber;
const int CameraDetection::kShapeClassificationForegroundFieldNumber;
const int CameraDetection::kShapeClassificationFlatFieldNumber;
const int CameraDetection::kShapeClassificationUprightFieldNumber;
const int CameraDetection::kShapeClassificationGroundFieldNumber;
const int CameraDetection::kShapeClassificationSkyFieldNumber;
const int CameraDetection::kShapeClassificationVegetationFieldNumber;
const int CameraDetection::kShapeClassificationRoadFieldNumber;
const int CameraDetection::kShapeClassificationNonDrivingLaneFieldNumber;
const int CameraDetection::kShapeClassificationNonRoadFieldNumber;
const int CameraDetection::kShapeClassificationStationaryObjectFieldNumber;
const int CameraDetection::kShapeClassificationMovingObjectFieldNumber;
const int CameraDetection::kShapeClassificationLandmarkFieldNumber;
const int CameraDetection::kShapeClassificationTrafficSignFieldNumber;
const int CameraDetection::kShapeClassificationTrafficLightFieldNumber;
const int CameraDetection::kShapeClassificationRoadMarkingFieldNumber;
const int CameraDetection::kShapeClassificationVehicleFieldNumber;
const int CameraDetection::kShapeClassificationPedestrianFieldNumber;
const int CameraDetection::kShapeClassificationAnimalFieldNumber;
const int CameraDetection::kShapeClassificationPedestrianFrontFieldNumber;
const int CameraDetection::kShapeClassificationPedestrianSideFieldNumber;
const int CameraDetection::kShapeClassificationPedestrianRearFieldNumber;
const int CameraDetection::kShapeClassificationProbabilityFieldNumber;
const int CameraDetection::kColorFieldNumber;
const int CameraDetection::kColorProbabilityFieldNumber;
const int CameraDetection::kAmbiguityIdFieldNumber;
const int CameraDetection::kFirstPointIndexFieldNumber;
const int CameraDetection::kNumberOfPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraDetection::CameraDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraDetection)
}
CameraDetection::CameraDetection(const CameraDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  if (from.has_time_difference()) {
    time_difference_ = new ::osi3::Timestamp(*from.time_difference_);
  } else {
    time_difference_ = NULL;
  }
  if (from.has_ambiguity_id()) {
    ambiguity_id_ = new ::osi3::Identifier(*from.ambiguity_id_);
  } else {
    ambiguity_id_ = NULL;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_points_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(number_of_points_));
  // @@protoc_insertion_point(copy_constructor:osi3.CameraDetection)
}

void CameraDetection::SharedCtor() {
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_points_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(number_of_points_));
  _cached_size_ = 0;
}

CameraDetection::~CameraDetection() {
  // @@protoc_insertion_point(destructor:osi3.CameraDetection)
  SharedDtor();
}

void CameraDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete time_difference_;
  if (this != internal_default_instance()) delete ambiguity_id_;
}

void CameraDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraDetection::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraDetection& CameraDetection::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraDetection();
  return *internal_default_instance();
}

CameraDetection* CameraDetection::New(::google::protobuf::Arena* arena) const {
  CameraDetection* n = new CameraDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_difference_ != NULL) {
    delete time_difference_;
  }
  time_difference_ = NULL;
  if (GetArenaNoVirtual() == NULL && ambiguity_id_ != NULL) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = NULL;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_points_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(number_of_points_));
  _internal_metadata_.Clear();
}

bool CameraDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp time_difference = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_difference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_shape_type(static_cast< ::osi3::CameraDetection_ImageShapeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_background = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_background_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_foreground = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_foreground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_flat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_flat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_upright = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_upright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_ground = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_sky = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_sky_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_vegetation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_vegetation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_road = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_road_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_non_driving_lane = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_non_driving_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_non_road = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_non_road_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_stationary_object = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_stationary_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_moving_object = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_moving_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_landmark = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_landmark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_traffic_sign = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_traffic_sign_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_traffic_light = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_traffic_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_road_marking = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_road_marking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_vehicle = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_animal = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_animal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian_front = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_front_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian_side = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian_rear = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_rear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double shape_classification_probability = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shape_classification_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.CameraDetection.Color color = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::CameraDetection_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double color_probability = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &color_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier ambiguity_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambiguity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 first_point_index = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_point_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_points = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraDetection)
  return false;
#undef DO_
}

void CameraDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_id_, output);
  }

  // .osi3.Timestamp time_difference = 3;
  if (this->has_time_difference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->time_difference_, output);
  }

  // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
  if (this->image_shape_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->image_shape_type(), output);
  }

  // bool shape_classification_background = 5;
  if (this->shape_classification_background() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shape_classification_background(), output);
  }

  // bool shape_classification_foreground = 6;
  if (this->shape_classification_foreground() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->shape_classification_foreground(), output);
  }

  // bool shape_classification_flat = 7;
  if (this->shape_classification_flat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->shape_classification_flat(), output);
  }

  // bool shape_classification_upright = 8;
  if (this->shape_classification_upright() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shape_classification_upright(), output);
  }

  // bool shape_classification_ground = 9;
  if (this->shape_classification_ground() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->shape_classification_ground(), output);
  }

  // bool shape_classification_sky = 10;
  if (this->shape_classification_sky() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->shape_classification_sky(), output);
  }

  // bool shape_classification_vegetation = 11;
  if (this->shape_classification_vegetation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->shape_classification_vegetation(), output);
  }

  // bool shape_classification_road = 12;
  if (this->shape_classification_road() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->shape_classification_road(), output);
  }

  // bool shape_classification_non_driving_lane = 13;
  if (this->shape_classification_non_driving_lane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->shape_classification_non_driving_lane(), output);
  }

  // bool shape_classification_non_road = 14;
  if (this->shape_classification_non_road() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->shape_classification_non_road(), output);
  }

  // bool shape_classification_stationary_object = 15;
  if (this->shape_classification_stationary_object() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->shape_classification_stationary_object(), output);
  }

  // bool shape_classification_moving_object = 16;
  if (this->shape_classification_moving_object() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->shape_classification_moving_object(), output);
  }

  // bool shape_classification_landmark = 17;
  if (this->shape_classification_landmark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->shape_classification_landmark(), output);
  }

  // bool shape_classification_traffic_sign = 18;
  if (this->shape_classification_traffic_sign() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->shape_classification_traffic_sign(), output);
  }

  // bool shape_classification_traffic_light = 19;
  if (this->shape_classification_traffic_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->shape_classification_traffic_light(), output);
  }

  // bool shape_classification_road_marking = 20;
  if (this->shape_classification_road_marking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->shape_classification_road_marking(), output);
  }

  // bool shape_classification_vehicle = 21;
  if (this->shape_classification_vehicle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->shape_classification_vehicle(), output);
  }

  // bool shape_classification_pedestrian = 22;
  if (this->shape_classification_pedestrian() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->shape_classification_pedestrian(), output);
  }

  // bool shape_classification_animal = 23;
  if (this->shape_classification_animal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->shape_classification_animal(), output);
  }

  // bool shape_classification_pedestrian_front = 24;
  if (this->shape_classification_pedestrian_front() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->shape_classification_pedestrian_front(), output);
  }

  // bool shape_classification_pedestrian_side = 25;
  if (this->shape_classification_pedestrian_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->shape_classification_pedestrian_side(), output);
  }

  // bool shape_classification_pedestrian_rear = 26;
  if (this->shape_classification_pedestrian_rear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->shape_classification_pedestrian_rear(), output);
  }

  // double shape_classification_probability = 27;
  if (this->shape_classification_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->shape_classification_probability(), output);
  }

  // .osi3.CameraDetection.Color color = 28;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->color(), output);
  }

  // double color_probability = 29;
  if (this->color_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->color_probability(), output);
  }

  // .osi3.Identifier ambiguity_id = 30;
  if (this->has_ambiguity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->ambiguity_id_, output);
  }

  // uint32 first_point_index = 31;
  if (this->first_point_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->first_point_index(), output);
  }

  // uint32 number_of_points = 32;
  if (this->number_of_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->number_of_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraDetection)
}

::google::protobuf::uint8* CameraDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->object_id_, deterministic, target);
  }

  // .osi3.Timestamp time_difference = 3;
  if (this->has_time_difference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->time_difference_, deterministic, target);
  }

  // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
  if (this->image_shape_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->image_shape_type(), target);
  }

  // bool shape_classification_background = 5;
  if (this->shape_classification_background() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shape_classification_background(), target);
  }

  // bool shape_classification_foreground = 6;
  if (this->shape_classification_foreground() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->shape_classification_foreground(), target);
  }

  // bool shape_classification_flat = 7;
  if (this->shape_classification_flat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->shape_classification_flat(), target);
  }

  // bool shape_classification_upright = 8;
  if (this->shape_classification_upright() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shape_classification_upright(), target);
  }

  // bool shape_classification_ground = 9;
  if (this->shape_classification_ground() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->shape_classification_ground(), target);
  }

  // bool shape_classification_sky = 10;
  if (this->shape_classification_sky() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->shape_classification_sky(), target);
  }

  // bool shape_classification_vegetation = 11;
  if (this->shape_classification_vegetation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->shape_classification_vegetation(), target);
  }

  // bool shape_classification_road = 12;
  if (this->shape_classification_road() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->shape_classification_road(), target);
  }

  // bool shape_classification_non_driving_lane = 13;
  if (this->shape_classification_non_driving_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->shape_classification_non_driving_lane(), target);
  }

  // bool shape_classification_non_road = 14;
  if (this->shape_classification_non_road() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->shape_classification_non_road(), target);
  }

  // bool shape_classification_stationary_object = 15;
  if (this->shape_classification_stationary_object() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->shape_classification_stationary_object(), target);
  }

  // bool shape_classification_moving_object = 16;
  if (this->shape_classification_moving_object() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->shape_classification_moving_object(), target);
  }

  // bool shape_classification_landmark = 17;
  if (this->shape_classification_landmark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->shape_classification_landmark(), target);
  }

  // bool shape_classification_traffic_sign = 18;
  if (this->shape_classification_traffic_sign() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->shape_classification_traffic_sign(), target);
  }

  // bool shape_classification_traffic_light = 19;
  if (this->shape_classification_traffic_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->shape_classification_traffic_light(), target);
  }

  // bool shape_classification_road_marking = 20;
  if (this->shape_classification_road_marking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->shape_classification_road_marking(), target);
  }

  // bool shape_classification_vehicle = 21;
  if (this->shape_classification_vehicle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->shape_classification_vehicle(), target);
  }

  // bool shape_classification_pedestrian = 22;
  if (this->shape_classification_pedestrian() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->shape_classification_pedestrian(), target);
  }

  // bool shape_classification_animal = 23;
  if (this->shape_classification_animal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->shape_classification_animal(), target);
  }

  // bool shape_classification_pedestrian_front = 24;
  if (this->shape_classification_pedestrian_front() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->shape_classification_pedestrian_front(), target);
  }

  // bool shape_classification_pedestrian_side = 25;
  if (this->shape_classification_pedestrian_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->shape_classification_pedestrian_side(), target);
  }

  // bool shape_classification_pedestrian_rear = 26;
  if (this->shape_classification_pedestrian_rear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->shape_classification_pedestrian_rear(), target);
  }

  // double shape_classification_probability = 27;
  if (this->shape_classification_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->shape_classification_probability(), target);
  }

  // .osi3.CameraDetection.Color color = 28;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->color(), target);
  }

  // double color_probability = 29;
  if (this->color_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->color_probability(), target);
  }

  // .osi3.Identifier ambiguity_id = 30;
  if (this->has_ambiguity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->ambiguity_id_, deterministic, target);
  }

  // uint32 first_point_index = 31;
  if (this->first_point_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->first_point_index(), target);
  }

  // uint32 number_of_points = 32;
  if (this->number_of_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->number_of_points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraDetection)
  return target;
}

size_t CameraDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->object_id_);
  }

  // .osi3.Timestamp time_difference = 3;
  if (this->has_time_difference()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_difference_);
  }

  // .osi3.Identifier ambiguity_id = 30;
  if (this->has_ambiguity_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ambiguity_id_);
  }

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    total_size += 1 + 8;
  }

  // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
  if (this->image_shape_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_shape_type());
  }

  // bool shape_classification_background = 5;
  if (this->shape_classification_background() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_foreground = 6;
  if (this->shape_classification_foreground() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_flat = 7;
  if (this->shape_classification_flat() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_upright = 8;
  if (this->shape_classification_upright() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_ground = 9;
  if (this->shape_classification_ground() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_sky = 10;
  if (this->shape_classification_sky() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_vegetation = 11;
  if (this->shape_classification_vegetation() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_road = 12;
  if (this->shape_classification_road() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_non_driving_lane = 13;
  if (this->shape_classification_non_driving_lane() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_non_road = 14;
  if (this->shape_classification_non_road() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_stationary_object = 15;
  if (this->shape_classification_stationary_object() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_moving_object = 16;
  if (this->shape_classification_moving_object() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_landmark = 17;
  if (this->shape_classification_landmark() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_traffic_sign = 18;
  if (this->shape_classification_traffic_sign() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_traffic_light = 19;
  if (this->shape_classification_traffic_light() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_road_marking = 20;
  if (this->shape_classification_road_marking() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_vehicle = 21;
  if (this->shape_classification_vehicle() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian = 22;
  if (this->shape_classification_pedestrian() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_animal = 23;
  if (this->shape_classification_animal() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian_front = 24;
  if (this->shape_classification_pedestrian_front() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian_side = 25;
  if (this->shape_classification_pedestrian_side() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian_rear = 26;
  if (this->shape_classification_pedestrian_rear() != 0) {
    total_size += 2 + 1;
  }

  // .osi3.CameraDetection.Color color = 28;
  if (this->color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // double shape_classification_probability = 27;
  if (this->shape_classification_probability() != 0) {
    total_size += 2 + 8;
  }

  // double color_probability = 29;
  if (this->color_probability() != 0) {
    total_size += 2 + 8;
  }

  // uint32 first_point_index = 31;
  if (this->first_point_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_point_index());
  }

  // uint32 number_of_points = 32;
  if (this->number_of_points() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraDetection)
    MergeFrom(*source);
  }
}

void CameraDetection::MergeFrom(const CameraDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_time_difference()) {
    mutable_time_difference()->::osi3::Timestamp::MergeFrom(from.time_difference());
  }
  if (from.has_ambiguity_id()) {
    mutable_ambiguity_id()->::osi3::Identifier::MergeFrom(from.ambiguity_id());
  }
  if (from.existence_probability() != 0) {
    set_existence_probability(from.existence_probability());
  }
  if (from.image_shape_type() != 0) {
    set_image_shape_type(from.image_shape_type());
  }
  if (from.shape_classification_background() != 0) {
    set_shape_classification_background(from.shape_classification_background());
  }
  if (from.shape_classification_foreground() != 0) {
    set_shape_classification_foreground(from.shape_classification_foreground());
  }
  if (from.shape_classification_flat() != 0) {
    set_shape_classification_flat(from.shape_classification_flat());
  }
  if (from.shape_classification_upright() != 0) {
    set_shape_classification_upright(from.shape_classification_upright());
  }
  if (from.shape_classification_ground() != 0) {
    set_shape_classification_ground(from.shape_classification_ground());
  }
  if (from.shape_classification_sky() != 0) {
    set_shape_classification_sky(from.shape_classification_sky());
  }
  if (from.shape_classification_vegetation() != 0) {
    set_shape_classification_vegetation(from.shape_classification_vegetation());
  }
  if (from.shape_classification_road() != 0) {
    set_shape_classification_road(from.shape_classification_road());
  }
  if (from.shape_classification_non_driving_lane() != 0) {
    set_shape_classification_non_driving_lane(from.shape_classification_non_driving_lane());
  }
  if (from.shape_classification_non_road() != 0) {
    set_shape_classification_non_road(from.shape_classification_non_road());
  }
  if (from.shape_classification_stationary_object() != 0) {
    set_shape_classification_stationary_object(from.shape_classification_stationary_object());
  }
  if (from.shape_classification_moving_object() != 0) {
    set_shape_classification_moving_object(from.shape_classification_moving_object());
  }
  if (from.shape_classification_landmark() != 0) {
    set_shape_classification_landmark(from.shape_classification_landmark());
  }
  if (from.shape_classification_traffic_sign() != 0) {
    set_shape_classification_traffic_sign(from.shape_classification_traffic_sign());
  }
  if (from.shape_classification_traffic_light() != 0) {
    set_shape_classification_traffic_light(from.shape_classification_traffic_light());
  }
  if (from.shape_classification_road_marking() != 0) {
    set_shape_classification_road_marking(from.shape_classification_road_marking());
  }
  if (from.shape_classification_vehicle() != 0) {
    set_shape_classification_vehicle(from.shape_classification_vehicle());
  }
  if (from.shape_classification_pedestrian() != 0) {
    set_shape_classification_pedestrian(from.shape_classification_pedestrian());
  }
  if (from.shape_classification_animal() != 0) {
    set_shape_classification_animal(from.shape_classification_animal());
  }
  if (from.shape_classification_pedestrian_front() != 0) {
    set_shape_classification_pedestrian_front(from.shape_classification_pedestrian_front());
  }
  if (from.shape_classification_pedestrian_side() != 0) {
    set_shape_classification_pedestrian_side(from.shape_classification_pedestrian_side());
  }
  if (from.shape_classification_pedestrian_rear() != 0) {
    set_shape_classification_pedestrian_rear(from.shape_classification_pedestrian_rear());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.shape_classification_probability() != 0) {
    set_shape_classification_probability(from.shape_classification_probability());
  }
  if (from.color_probability() != 0) {
    set_color_probability(from.color_probability());
  }
  if (from.first_point_index() != 0) {
    set_first_point_index(from.first_point_index());
  }
  if (from.number_of_points() != 0) {
    set_number_of_points(from.number_of_points());
  }
}

void CameraDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDetection::CopyFrom(const CameraDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetection::IsInitialized() const {
  return true;
}

void CameraDetection::Swap(CameraDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraDetection::InternalSwap(CameraDetection* other) {
  using std::swap;
  swap(object_id_, other->object_id_);
  swap(time_difference_, other->time_difference_);
  swap(ambiguity_id_, other->ambiguity_id_);
  swap(existence_probability_, other->existence_probability_);
  swap(image_shape_type_, other->image_shape_type_);
  swap(shape_classification_background_, other->shape_classification_background_);
  swap(shape_classification_foreground_, other->shape_classification_foreground_);
  swap(shape_classification_flat_, other->shape_classification_flat_);
  swap(shape_classification_upright_, other->shape_classification_upright_);
  swap(shape_classification_ground_, other->shape_classification_ground_);
  swap(shape_classification_sky_, other->shape_classification_sky_);
  swap(shape_classification_vegetation_, other->shape_classification_vegetation_);
  swap(shape_classification_road_, other->shape_classification_road_);
  swap(shape_classification_non_driving_lane_, other->shape_classification_non_driving_lane_);
  swap(shape_classification_non_road_, other->shape_classification_non_road_);
  swap(shape_classification_stationary_object_, other->shape_classification_stationary_object_);
  swap(shape_classification_moving_object_, other->shape_classification_moving_object_);
  swap(shape_classification_landmark_, other->shape_classification_landmark_);
  swap(shape_classification_traffic_sign_, other->shape_classification_traffic_sign_);
  swap(shape_classification_traffic_light_, other->shape_classification_traffic_light_);
  swap(shape_classification_road_marking_, other->shape_classification_road_marking_);
  swap(shape_classification_vehicle_, other->shape_classification_vehicle_);
  swap(shape_classification_pedestrian_, other->shape_classification_pedestrian_);
  swap(shape_classification_animal_, other->shape_classification_animal_);
  swap(shape_classification_pedestrian_front_, other->shape_classification_pedestrian_front_);
  swap(shape_classification_pedestrian_side_, other->shape_classification_pedestrian_side_);
  swap(shape_classification_pedestrian_rear_, other->shape_classification_pedestrian_rear_);
  swap(color_, other->color_);
  swap(shape_classification_probability_, other->shape_classification_probability_);
  swap(color_probability_, other->color_probability_);
  swap(first_point_index_, other->first_point_index_);
  swap(number_of_points_, other->number_of_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraDetection::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraPoint::InitAsDefaultInstance() {
  ::osi3::_CameraPoint_default_instance_._instance.get_mutable()->point_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_CameraPoint_default_instance_._instance.get_mutable()->point_rmse_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
}
void CameraPoint::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}
void CameraPoint::clear_point_rmse() {
  if (GetArenaNoVirtual() == NULL && point_rmse_ != NULL) {
    delete point_rmse_;
  }
  point_rmse_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraPoint::kExistenceProbabilityFieldNumber;
const int CameraPoint::kPointFieldNumber;
const int CameraPoint::kPointRmseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraPoint::CameraPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraPoint)
}
CameraPoint::CameraPoint(const CameraPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::osi3::Spherical3d(*from.point_);
  } else {
    point_ = NULL;
  }
  if (from.has_point_rmse()) {
    point_rmse_ = new ::osi3::Spherical3d(*from.point_rmse_);
  } else {
    point_rmse_ = NULL;
  }
  existence_probability_ = from.existence_probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.CameraPoint)
}

void CameraPoint::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&existence_probability_) -
      reinterpret_cast<char*>(&point_)) + sizeof(existence_probability_));
  _cached_size_ = 0;
}

CameraPoint::~CameraPoint() {
  // @@protoc_insertion_point(destructor:osi3.CameraPoint)
  SharedDtor();
}

void CameraPoint::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete point_rmse_;
}

void CameraPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraPoint::descriptor() {
  ::protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraPoint& CameraPoint::default_instance() {
  ::protobuf_osi_5ffeaturedata_2eproto::InitDefaultsCameraPoint();
  return *internal_default_instance();
}

CameraPoint* CameraPoint::New(::google::protobuf::Arena* arena) const {
  CameraPoint* n = new CameraPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  if (GetArenaNoVirtual() == NULL && point_rmse_ != NULL) {
    delete point_rmse_;
  }
  point_rmse_ = NULL;
  existence_probability_ = 0;
  _internal_metadata_.Clear();
}

bool CameraPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d point_rmse = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraPoint)
  return false;
#undef DO_
}

void CameraPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Spherical3d point = 2;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point_, output);
  }

  // .osi3.Spherical3d point_rmse = 3;
  if (this->has_point_rmse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->point_rmse_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraPoint)
}

::google::protobuf::uint8* CameraPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Spherical3d point = 2;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->point_, deterministic, target);
  }

  // .osi3.Spherical3d point_rmse = 3;
  if (this->has_point_rmse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->point_rmse_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraPoint)
  return target;
}

size_t CameraPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Spherical3d point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->point_);
  }

  // .osi3.Spherical3d point_rmse = 3;
  if (this->has_point_rmse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->point_rmse_);
  }

  // double existence_probability = 1;
  if (this->existence_probability() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraPoint)
    MergeFrom(*source);
  }
}

void CameraPoint::MergeFrom(const CameraPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::osi3::Spherical3d::MergeFrom(from.point());
  }
  if (from.has_point_rmse()) {
    mutable_point_rmse()->::osi3::Spherical3d::MergeFrom(from.point_rmse());
  }
  if (from.existence_probability() != 0) {
    set_existence_probability(from.existence_probability());
  }
}

void CameraPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraPoint::CopyFrom(const CameraPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPoint::IsInitialized() const {
  return true;
}

void CameraPoint::Swap(CameraPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraPoint::InternalSwap(CameraPoint* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(point_rmse_, other->point_rmse_);
  swap(existence_probability_, other->existence_probability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraPoint::GetMetadata() const {
  protobuf_osi_5ffeaturedata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ffeaturedata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
