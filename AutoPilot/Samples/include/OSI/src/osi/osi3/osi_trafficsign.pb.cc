// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficsign.proto

#include "osi_trafficsign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class TrafficSignValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignValue>
      _instance;
} _TrafficSignValue_default_instance_;
class TrafficSign_MainSign_ClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_MainSign_Classification>
      _instance;
} _TrafficSign_MainSign_Classification_default_instance_;
class TrafficSign_MainSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_MainSign>
      _instance;
} _TrafficSign_MainSign_default_instance_;
class TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_SupplementarySign_Classification_Arrow>
      _instance;
} _TrafficSign_SupplementarySign_Classification_Arrow_default_instance_;
class TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_SupplementarySign_Classification>
      _instance;
} _TrafficSign_SupplementarySign_Classification_default_instance_;
class TrafficSign_SupplementarySignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_SupplementarySign>
      _instance;
} _TrafficSign_SupplementarySign_default_instance_;
class TrafficSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign>
      _instance;
} _TrafficSign_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5ftrafficsign_2eproto {
void InitDefaultsTrafficSignValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_TrafficSignValue_default_instance_;
    new (ptr) ::osi3::TrafficSignValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSignValue::InitAsDefaultInstance();
}

void InitDefaultsTrafficSignValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSignValueImpl);
}

void InitDefaultsTrafficSign_MainSign_ClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSignValue();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_TrafficSign_MainSign_Classification_default_instance_;
    new (ptr) ::osi3::TrafficSign_MainSign_Classification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_MainSign_Classification::InitAsDefaultInstance();
}

void InitDefaultsTrafficSign_MainSign_Classification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSign_MainSign_ClassificationImpl);
}

void InitDefaultsTrafficSign_MainSignImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsBaseStationary();
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_MainSign_Classification();
  {
    void* ptr = &::osi3::_TrafficSign_MainSign_default_instance_;
    new (ptr) ::osi3::TrafficSign_MainSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_MainSign::InitAsDefaultInstance();
}

void InitDefaultsTrafficSign_MainSign() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSign_MainSignImpl);
}

void InitDefaultsTrafficSign_SupplementarySign_Classification_ArrowImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_TrafficSign_SupplementarySign_Classification_Arrow_default_instance_;
    new (ptr) ::osi3::TrafficSign_SupplementarySign_Classification_Arrow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_SupplementarySign_Classification_Arrow::InitAsDefaultInstance();
}

void InitDefaultsTrafficSign_SupplementarySign_Classification_Arrow() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSign_SupplementarySign_Classification_ArrowImpl);
}

void InitDefaultsTrafficSign_SupplementarySign_ClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSignValue();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign_Classification_Arrow();
  {
    void* ptr = &::osi3::_TrafficSign_SupplementarySign_Classification_default_instance_;
    new (ptr) ::osi3::TrafficSign_SupplementarySign_Classification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_SupplementarySign_Classification::InitAsDefaultInstance();
}

void InitDefaultsTrafficSign_SupplementarySign_Classification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSign_SupplementarySign_ClassificationImpl);
}

void InitDefaultsTrafficSign_SupplementarySignImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsBaseStationary();
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign_Classification();
  {
    void* ptr = &::osi3::_TrafficSign_SupplementarySign_default_instance_;
    new (ptr) ::osi3::TrafficSign_SupplementarySign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_SupplementarySign::InitAsDefaultInstance();
}

void InitDefaultsTrafficSign_SupplementarySign() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSign_SupplementarySignImpl);
}

void InitDefaultsTrafficSignImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_MainSign();
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign();
  {
    void* ptr = &::osi3::_TrafficSign_default_instance_;
    new (ptr) ::osi3::TrafficSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign::InitAsDefaultInstance();
}

void InitDefaultsTrafficSign() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSignImpl);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSignValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSignValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSignValue, value_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSignValue, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, variability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, direction_scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, assigned_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, vertically_mirrored_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, is_out_of_service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_MainSign, classification_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, variability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, assigned_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, arrow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, is_out_of_service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, classification_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign, main_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficSign, supplementary_sign_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::TrafficSignValue)},
  { 8, -1, sizeof(::osi3::TrafficSign_MainSign_Classification)},
  { 20, -1, sizeof(::osi3::TrafficSign_MainSign)},
  { 27, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification_Arrow)},
  { 34, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification)},
  { 46, -1, sizeof(::osi3::TrafficSign_SupplementarySign)},
  { 53, -1, sizeof(::osi3::TrafficSign)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficSignValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficSign_MainSign_Classification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficSign_MainSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficSign_SupplementarySign_Classification_Arrow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficSign_SupplementarySign_Classification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficSign_SupplementarySign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficSign_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_trafficsign.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025osi_trafficsign.proto\022\004osi3\032\020osi_commo"
      "n.proto\"\205\003\n\020TrafficSignValue\022\r\n\005value\030\001 "
      "\001(\001\022/\n\nvalue_unit\030\002 \001(\0162\033.osi3.TrafficSi"
      "gnValue.Unit\022\014\n\004text\030\003 \001(\t\"\242\002\n\004Unit\022\020\n\014U"
      "NIT_UNKNOWN\020\000\022\016\n\nUNIT_OTHER\020\001\022\020\n\014UNIT_NO"
      "_UNIT\020\002\022\033\n\027UNIT_KILOMETER_PER_HOUR\020\003\022\026\n\022"
      "UNIT_MILE_PER_HOUR\020\004\022\016\n\nUNIT_METER\020\005\022\022\n\016"
      "UNIT_KILOMETER\020\006\022\r\n\tUNIT_FEET\020\007\022\r\n\tUNIT_"
      "MILE\020\010\022\023\n\017UNIT_METRIC_TON\020\t\022\021\n\rUNIT_LONG"
      "_TON\020\n\022\022\n\016UNIT_SHORT_TON\020\013\022\020\n\014UNIT_MINUT"
      "ES\020\014\022\014\n\010UNIT_DAY\020\r\022\023\n\017UNIT_PERCENTAGE\020\016\""
      "\351d\n\013TrafficSign\022\034\n\002id\030\001 \001(\0132\020.osi3.Ident"
      "ifier\022-\n\tmain_sign\030\002 \001(\0132\032.osi3.TrafficS"
      "ign.MainSign\022\?\n\022supplementary_sign\030\003 \003(\013"
      "2#.osi3.TrafficSign.SupplementarySign\032\371\?"
      "\n\010MainSign\022\"\n\004base\030\001 \001(\0132\024.osi3.BaseStat"
      "ionary\022A\n\016classification\030\002 \001(\0132).osi3.Tr"
      "afficSign.MainSign.Classification\032\205\?\n\016Cl"
      "assification\0222\n\013variability\030\001 \001(\0162\035.osi3"
      ".TrafficSign.Variability\022<\n\004type\030\002 \001(\0162."
      ".osi3.TrafficSign.MainSign.Classificatio"
      "n.Type\022%\n\005value\030\003 \001(\0132\026.osi3.TrafficSign"
      "Value\022Q\n\017direction_scope\030\004 \001(\01628.osi3.Tr"
      "afficSign.MainSign.Classification.Direct"
      "ionScope\022*\n\020assigned_lane_id\030\005 \003(\0132\020.osi"
      "3.Identifier\022\033\n\023vertically_mirrored\030\006 \001("
      "\010\022\031\n\021is_out_of_service\030\007 \001(\010\"\340:\n\004Type\022\020\n"
      "\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\024\n\020TYPE_"
      "DANGER_SPOT\020\002\022\027\n\023TYPE_ZEBRA_CROSSING\020W\022\017"
      "\n\013TYPE_FLIGHT\020n\022\020\n\013TYPE_CATTLE\020\310\001\022\026\n\021TYP"
      "E_HORSE_RIDERS\020\305\001\022\024\n\017TYPE_AMPHIBIANS\020\274\001\022"
      "\026\n\022TYPE_FALLING_ROCKS\020`\022\024\n\020TYPE_SNOW_OR_"
      "ICE\020^\022\025\n\021TYPE_LOOSE_GRAVEL\020a\022\022\n\016TYPE_WAT"
      "ERSIDE\020f\022\023\n\016TYPE_CLEARANCE\020\322\001\022\027\n\023TYPE_MO"
      "VABLE_BRIDGE\020e\022,\n(TYPE_RIGHT_BEFORE_LEFT"
      "_NEXT_INTERSECTION\020\003\022\022\n\016TYPE_TURN_LEFT\020\004"
      "\022\023\n\017TYPE_TURN_RIGHT\020\005\022\031\n\025TYPE_DOUBLE_TUR"
      "N_LEFT\020\006\022\032\n\026TYPE_DOUBLE_TURN_RIGHT\020\007\022\027\n\023"
      "TYPE_HILL_DOWNWARDS\020\010\022\025\n\021TYPE_HILL_UPWAR"
      "DS\020\t\022\024\n\020TYPE_UNEVEN_ROAD\020]\022#\n\037TYPE_ROAD_"
      "SLIPPERY_WET_OR_DIRTY\020_\022\023\n\017TYPE_SIDE_WIN"
      "DS\020b\022\027\n\023TYPE_ROAD_NARROWING\020\n\022\035\n\031TYPE_RO"
      "AD_NARROWING_RIGHT\020\014\022\034\n\030TYPE_ROAD_NARROW"
      "ING_LEFT\020\013\022\023\n\017TYPE_ROAD_WORKS\020\r\022\027\n\023TYPE_"
      "TRAFFIC_QUEUES\020d\022\030\n\024TYPE_TWO_WAY_TRAFFIC"
      "\020\016\022 \n\034TYPE_ATTENTION_TRAFFIC_LIGHT\020\017\022\024\n\020"
      "TYPE_PEDESTRIANS\020g\022\032\n\026TYPE_CHILDREN_CROS"
      "SING\020j\022\024\n\020TYPE_CYCLE_ROUTE\020k\022\026\n\022TYPE_DEE"
      "R_CROSSING\020m\022 \n\033TYPE_UNGATED_LEVEL_CROSS"
      "ING\020\220\001\022\036\n\032TYPE_LEVEL_CROSSING_MARKER\020p\022\""
      "\n\035TYPE_RAILWAY_TRAFFIC_PRIORITY\020\207\001\022\021\n\rTY"
      "PE_GIVE_WAY\020\020\022\r\n\tTYPE_STOP\020\021\022\'\n#TYPE_PRI"
      "ORITY_TO_OPPOSITE_DIRECTION\020\022\0223\n/TYPE_PR"
      "IORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN"
      "\020\023\022\035\n\031TYPE_PRESCRIBED_LEFT_TURN\020\024\022\036\n\032TYP"
      "E_PRESCRIBED_RIGHT_TURN\020\025\022\034\n\030TYPE_PRESCR"
      "IBED_STRAIGHT\020\026\022\035\n\031TYPE_PRESCRIBED_RIGHT"
      "_WAY\020\030\022\034\n\030TYPE_PRESCRIBED_LEFT_WAY\020\027\022+\n\'"
      "TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT\020"
      "\032\022*\n&TYPE_PRESCRIBED_LEFT_TURN_AND_STRAI"
      "GHT\020\031\022,\n(TYPE_PRESCRIBED_LEFT_TURN_AND_R"
      "IGHT_TURN\020\033\0225\n1TYPE_PRESCRIBED_LEFT_TURN"
      "_RIGHT_TURN_AND_STRAIGHT\020\034\022\023\n\017TYPE_ROUND"
      "ABOUT\020\035\022\024\n\020TYPE_ONEWAY_LEFT\020\036\022\025\n\021TYPE_ON"
      "EWAY_RIGHT\020\037\022\022\n\016TYPE_PASS_LEFT\020 \022\023\n\017TYPE"
      "_PASS_RIGHT\020!\022$\n\037TYPE_SIDE_LANE_OPEN_FOR"
      "_TRAFFIC\020\200\001\022&\n!TYPE_SIDE_LANE_CLOSED_FOR"
      "_TRAFFIC\020\201\001\022\'\n\"TYPE_SIDE_LANE_CLOSING_FO"
      "R_TRAFFIC\020\202\001\022\022\n\rTYPE_BUS_STOP\020\211\001\022\024\n\017TYPE"
      "_TAXI_STAND\020\212\001\022\027\n\022TYPE_BICYCLES_ONLY\020\221\001\022"
      "\033\n\026TYPE_HORSE_RIDERS_ONLY\020\222\001\022\032\n\025TYPE_PED"
      "ESTRIANS_ONLY\020\223\001\022*\n%TYPE_BICYCLES_PEDEST"
      "RIANS_SHARED_ONLY\020\224\001\0222\n-TYPE_BICYCLES_PE"
      "DESTRIANS_SEPARATED_LEFT_ONLY\020\225\001\0223\n.TYPE"
      "_BICYCLES_PEDESTRIANS_SEPARATED_RIGHT_ON"
      "LY\020\226\001\022\037\n\032TYPE_PEDESTRIAN_ZONE_BEGIN\020\227\001\022\035"
      "\n\030TYPE_PEDESTRIAN_ZONE_END\020\230\001\022\034\n\027TYPE_BI"
      "CYCLE_ROAD_BEGIN\020\231\001\022\032\n\025TYPE_BICYCLE_ROAD"
      "_END\020\232\001\022\021\n\rTYPE_BUS_LANE\020\"\022\027\n\023TYPE_BUS_L"
      "ANE_BEGIN\020#\022\025\n\021TYPE_BUS_LANE_END\020$\022\027\n\023TY"
      "PE_ALL_PROHIBITED\020%\022(\n$TYPE_MOTORIZED_MU"
      "LTITRACK_PROHIBITED\020&\022\032\n\026TYPE_TRUCKS_PRO"
      "HIBITED\020\'\022\034\n\030TYPE_BICYCLES_PROHIBITED\020(\022"
      "\037\n\033TYPE_MOTORCYCLES_PROHIBITED\020)\022\033\n\026TYPE"
      "_MOPEDS_PROHIBITED\020\233\001\022!\n\034TYPE_HORSE_RIDE"
      "RS_PROHIBITED\020\234\001\022$\n\037TYPE_HORSE_CARRIAGES"
      "_PROHIBITED\020\235\001\022\033\n\026TYPE_CATTLE_PROHIBITED"
      "\020\236\001\022\032\n\025TYPE_BUSES_PROHIBITED\020\237\001\022\031\n\024TYPE_"
      "CARS_PROHIBITED\020\240\001\022\"\n\035TYPE_CARS_TRAILERS"
      "_PROHIBITED\020\241\001\022$\n\037TYPE_TRUCKS_TRAILERS_P"
      "ROHIBITED\020\242\001\022\035\n\030TYPE_TRACTORS_PROHIBITED"
      "\020\243\001\022\037\n\033TYPE_PEDESTRIANS_PROHIBITED\020*\022\"\n\036"
      "TYPE_MOTOR_VEHICLES_PROHIBITED\020+\022-\n(TYPE"
      "_HAZARDOUS_GOODS_VEHICLES_PROHIBITED\020\244\001\022"
      ")\n$TYPE_OVER_WEIGHT_VEHICLES_PROHIBITED\020"
      "\245\001\022.\n)TYPE_VEHICLES_AXLE_OVER_WEIGHT_PRO"
      "HIBITED\020\246\001\022*\n%TYPE_VEHICLES_EXCESS_WIDTH"
      "_PROHIBITED\020\247\001\022+\n&TYPE_VEHICLES_EXCESS_H"
      "EIGHT_PROHIBITED\020\250\001\022+\n&TYPE_VEHICLES_EXC"
      "ESS_LENGTH_PROHIBITED\020\251\001\022\025\n\021TYPE_DO_NOT_"
      "ENTER\020,\022\036\n\031TYPE_SNOW_CHAINS_REQUIRED\020\252\001\022"
      "-\n(TYPE_WATER_POLLUTANT_VEHICLES_PROHIBI"
      "TED\020\253\001\022!\n\035TYPE_ENVIRONMENTAL_ZONE_BEGIN\020"
      "-\022\037\n\033TYPE_ENVIRONMENTAL_ZONE_END\020.\022\027\n\023TY"
      "PE_NO_U_TURN_LEFT\020/\022\030\n\024TYPE_NO_U_TURN_RI"
      "GHT\0200\022\037\n\033TYPE_PRESCRIBED_U_TURN_LEFT\0201\022 "
      "\n\034TYPE_PRESCRIBED_U_TURN_RIGHT\0202\022$\n TYPE"
      "_MINIMUM_DISTANCE_FOR_TRUCKS\0203\022\032\n\026TYPE_S"
      "PEED_LIMIT_BEGIN\0204\022\037\n\033TYPE_SPEED_LIMIT_Z"
      "ONE_BEGIN\0205\022\035\n\031TYPE_SPEED_LIMIT_ZONE_END"
      "\0206\022\034\n\030TYPE_MINIMUM_SPEED_BEGIN\0207\022\035\n\031TYPE"
      "_OVERTAKING_BAN_BEGIN\0208\022(\n$TYPE_OVERTAKI"
      "NG_BAN_FOR_TRUCKS_BEGIN\0209\022\030\n\024TYPE_SPEED_"
      "LIMIT_END\020:\022\032\n\026TYPE_MINIMUM_SPEED_END\020;\022"
      "\033\n\027TYPE_OVERTAKING_BAN_END\020<\022&\n\"TYPE_OVE"
      "RTAKING_BAN_FOR_TRUCKS_END\020=\022\035\n\031TYPE_ALL"
      "_RESTRICTIONS_END\020>\022\024\n\020TYPE_NO_STOPPING\020"
      "\?\022\023\n\017TYPE_NO_PARKING\020@\022\036\n\032TYPE_NO_PARKIN"
      "G_ZONE_BEGIN\020A\022\034\n\030TYPE_NO_PARKING_ZONE_E"
      "ND\020B\022\'\n#TYPE_RIGHT_OF_WAY_NEXT_INTERSECT"
      "ION\020C\022\033\n\027TYPE_RIGHT_OF_WAY_BEGIN\020D\022\031\n\025TY"
      "PE_RIGHT_OF_WAY_END\020E\022)\n%TYPE_PRIORITY_O"
      "VER_OPPOSITE_DIRECTION\020F\0225\n1TYPE_PRIORIT"
      "Y_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN\020G\022"
      "\023\n\017TYPE_TOWN_BEGIN\020H\022\021\n\rTYPE_TOWN_END\020I\022"
      "\024\n\020TYPE_CAR_PARKING\020J\022\037\n\033TYPE_CAR_PARKIN"
      "G_ZONE_BEGIN\020K\022\035\n\031TYPE_CAR_PARKING_ZONE_"
      "END\020L\022$\n\037TYPE_SIDEWALK_HALF_PARKING_LEFT"
      "\020\254\001\022%\n TYPE_SIDEWALK_HALF_PARKING_RIGHT\020"
      "\255\001\022\037\n\032TYPE_SIDEWALK_PARKING_LEFT\020\256\001\022 \n\033T"
      "YPE_SIDEWALK_PARKING_RIGHT\020\257\001\0222\n-TYPE_SI"
      "DEWALK_PERPENDICULAR_HALF_PARKING_LEFT\020\260"
      "\001\0223\n.TYPE_SIDEWALK_PERPENDICULAR_HALF_PA"
      "RKING_RIGHT\020\261\001\022-\n(TYPE_SIDEWALK_PERPENDI"
      "CULAR_PARKING_LEFT\020\262\001\022.\n)TYPE_SIDEWALK_P"
      "ERPENDICULAR_PARKING_RIGHT\020\263\001\022\034\n\030TYPE_LI"
      "VING_STREET_BEGIN\020M\022\032\n\026TYPE_LIVING_STREE"
      "T_END\020N\022\017\n\013TYPE_TUNNEL\020O\022 \n\034TYPE_EMERGEN"
      "CY_STOPPING_LEFT\020P\022!\n\035TYPE_EMERGENCY_STO"
      "PPING_RIGHT\020Q\022\026\n\022TYPE_HIGHWAY_BEGIN\020R\022\024\n"
      "\020TYPE_HIGHWAY_END\020S\022\031\n\025TYPE_EXPRESSWAY_B"
      "EGIN\020T\022\027\n\023TYPE_EXPRESSWAY_END\020U\022\034\n\027TYPE_"
      "NAMED_HIGHWAY_EXIT\020\267\001\022\037\n\032TYPE_NAMED_EXPR"
      "ESSWAY_EXIT\020\270\001\022\031\n\024TYPE_NAMED_ROAD_EXIT\020\271"
      "\001\022\025\n\021TYPE_HIGHWAY_EXIT\020V\022\031\n\024TYPE_EXPRESS"
      "WAY_EXIT\020\272\001\022\027\n\022TYPE_ONEWAY_STREET\020\273\001\022\031\n\024"
      "TYPE_CROSSING_GUARDS\020\275\001\022\021\n\014TYPE_DEADEND\020"
      "\276\001\022-\n(TYPE_DEADEND_EXCLUDING_DESIGNATED_"
      "ACTORS\020\277\001\022\033\n\026TYPE_FIRST_AID_STATION\020\302\001\022\030"
      "\n\023TYPE_POLICE_STATION\020\303\001\022\023\n\016TYPE_TELEPHO"
      "NE\020\304\001\022\031\n\024TYPE_FILLING_STATION\020\306\001\022\017\n\nTYPE"
      "_HOTEL\020\311\001\022\r\n\010TYPE_INN\020\312\001\022\017\n\nTYPE_KIOSK\020\313"
      "\001\022\020\n\013TYPE_TOILET\020\314\001\022\020\n\013TYPE_CHAPEL\020\315\001\022\026\n"
      "\021TYPE_TOURIST_INFO\020\316\001\022\030\n\023TYPE_REPAIR_SER"
      "VICE\020\317\001\022\036\n\031TYPE_PEDESTRIAN_UNDERPASS\020\320\001\022"
      "\033\n\026TYPE_PEDESTRIAN_BRIDGE\020\321\001\022\026\n\021TYPE_CAM"
      "PER_PLACE\020\325\001\022$\n\037TYPE_ADVISORY_SPEED_LIMI"
      "T_BEGIN\020\326\001\022\"\n\035TYPE_ADVISORY_SPEED_LIMIT_"
      "END\020\327\001\022\024\n\017TYPE_PLACE_NAME\020\330\001\022\034\n\027TYPE_TOU"
      "RIST_ATTRACTION\020\331\001\022\027\n\022TYPE_TOURIST_ROUTE"
      "\020\332\001\022\026\n\021TYPE_TOURIST_AREA\020\333\001\022.\n)TYPE_SHOU"
      "LDER_NOT_PASSABLE_MOTOR_VEHICLES\020\334\001\022)\n$T"
      "YPE_SHOULDER_UNSAFE_TRUCKS_TRACTORS\020\335\001\022\024"
      "\n\017TYPE_TOLL_BEGIN\020\336\001\022\022\n\rTYPE_TOLL_END\020\337\001"
      "\022\023\n\016TYPE_TOLL_ROAD\020\340\001\022\021\n\014TYPE_CUSTOMS\020\341\001"
      "\022#\n\036TYPE_INTERNATIONAL_BORDER_INFO\020\342\001\022\036\n"
      "\031TYPE_STREETLIGHT_RED_BAND\020\343\001\022&\n!TYPE_FE"
      "DERAL_HIGHWAY_ROUTE_NUMBER\020\344\001\022\036\n\031TYPE_HI"
      "GHWAY_ROUTE_NUMBER\020\345\001\022$\n\037TYPE_HIGHWAY_IN"
      "TERCHANGE_NUMBER\020\346\001\022\037\n\032TYPE_EUROPEAN_ROU"
      "TE_NUMBER\020\347\001\022(\n#TYPE_FEDERAL_HIGHWAY_DIR"
      "ECTION_LEFT\020\350\001\022)\n$TYPE_FEDERAL_HIGHWAY_D"
      "IRECTION_RIGHT\020\351\001\022%\n TYPE_PRIMARY_ROAD_D"
      "IRECTION_LEFT\020\352\001\022&\n!TYPE_PRIMARY_ROAD_DI"
      "RECTION_RIGHT\020\353\001\022\'\n\"TYPE_SECONDARY_ROAD_"
      "DIRECTION_LEFT\020\354\001\022(\n#TYPE_SECONDARY_ROAD"
      "_DIRECTION_RIGHT\020\355\001\022*\n%TYPE_DIRECTION_DE"
      "SIGNATED_ACTORS_LEFT\020\356\001\022+\n&TYPE_DIRECTIO"
      "N_DESIGNATED_ACTORS_RIGHT\020\357\001\022#\n\036TYPE_ROU"
      "TING_DESIGNATED_ACTORS\020\360\001\022#\n\036TYPE_DIRECT"
      "ION_TO_HIGHWAY_LEFT\020\217\001\022#\n\037TYPE_DIRECTION"
      "_TO_HIGHWAY_RIGHT\020l\022,\n(TYPE_DIRECTION_TO"
      "_LOCAL_DESTINATION_LEFT\020\177\022.\n)TYPE_DIRECT"
      "ION_TO_LOCAL_DESTINATION_RIGHT\020\210\001\022 \n\034TYP"
      "E_CONSOLIDATED_DIRECTIONS\020v\022\024\n\020TYPE_STRE"
      "ET_NAME\020w\022\"\n\036TYPE_DIRECTION_PREANNOUNCEM"
      "ENT\020x\022.\n*TYPE_DIRECTION_PREANNOUNCEMENT_"
      "LANE_CONFIG\020y\0222\n.TYPE_DIRECTION_PREANNOU"
      "NCEMENT_HIGHWAY_ENTRIES\020z\022\035\n\031TYPE_HIGHWA"
      "Y_ANNOUNCEMENT\020{\022 \n\034TYPE_OTHER_ROAD_ANNO"
      "UNCEMENT\020|\022(\n$TYPE_HIGHWAY_ANNOUNCEMENT_"
      "TRUCK_STOP\020}\022+\n\'TYPE_HIGHWAY_PREANNOUNCE"
      "MENT_DIRECTIONS\020~\022\022\n\016TYPE_POLE_EXIT\020X\022 \n"
      "\033TYPE_HIGHWAY_DISTANCE_BOARD\020\264\001\022\025\n\020TYPE_"
      "DETOUR_LEFT\020\265\001\022\026\n\021TYPE_DETOUR_RIGHT\020\266\001\022\031"
      "\n\024TYPE_NUMBERED_DETOUR\020\203\001\022\026\n\021TYPE_DETOUR"
      "_BEGIN\020\204\001\022\024\n\017TYPE_DETOUR_END\020\205\001\022\036\n\031TYPE_"
      "DETOUR_ROUTING_BOARD\020\206\001\022\030\n\024TYPE_OPTIONAL"
      "_DETOUR\020o\022!\n\034TYPE_OPTIONAL_DETOUR_ROUTIN"
      "G\020\307\001\022\036\n\031TYPE_ROUTE_RECOMMENDATION\020\323\001\022\"\n\035"
      "TYPE_ROUTE_RECOMMENDATION_END\020\324\001\022\'\n\"TYPE"
      "_ANNOUNCE_LANE_TRANSITION_LEFT\020\300\001\022(\n#TYP"
      "E_ANNOUNCE_LANE_TRANSITION_RIGHT\020\301\001\022 \n\034T"
      "YPE_ANNOUNCE_RIGHT_LANE_END\020Z\022\037\n\033TYPE_AN"
      "NOUNCE_LEFT_LANE_END\020Y\022\"\n\036TYPE_ANNOUNCE_"
      "RIGHT_LANE_BEGIN\020s\022!\n\035TYPE_ANNOUNCE_LEFT"
      "_LANE_BEGIN\020t\022$\n TYPE_ANNOUNCE_LANE_CONS"
      "OLIDATION\020u\022\033\n\026TYPE_DETOUR_CITY_BLOCK\020\216\001"
      "\022\016\n\tTYPE_GATE\020\215\001\022\025\n\021TYPE_POLE_WARNING\020[\022"
      "\026\n\021TYPE_TRAFFIC_CONE\020\214\001\022\035\n\030TYPE_MOBILE_L"
      "ANE_CLOSURE\020\213\001\022\027\n\023TYPE_REFLECTOR_POST\020r\022"
      "\"\n\036TYPE_DIRECTIONAL_BOARD_WARNING\020q\022\026\n\022T"
      "YPE_GUIDING_PLATE\020h\022\035\n\031TYPE_GUIDING_PLAT"
      "E_WEDGES\020i\022\027\n\023TYPE_PARKING_HAZARD\020c\022\"\n\036T"
      "YPE_TRAFFIC_LIGHT_GREEN_ARROW\020\\\"\277\001\n\016Dire"
      "ctionScope\022\033\n\027DIRECTION_SCOPE_UNKNOWN\020\000\022"
      "\031\n\025DIRECTION_SCOPE_OTHER\020\001\022 \n\034DIRECTION_"
      "SCOPE_NO_DIRECTION\020\002\022\030\n\024DIRECTION_SCOPE_"
      "LEFT\020\003\022\031\n\025DIRECTION_SCOPE_RIGHT\020\004\022\036\n\032DIR"
      "ECTION_SCOPE_LEFT_RIGHT\020\005\032\337\"\n\021Supplement"
      "arySign\022\"\n\004base\030\001 \001(\0132\024.osi3.BaseStation"
      "ary\022J\n\016classification\030\002 \001(\01322.osi3.Traff"
      "icSign.SupplementarySign.Classification\032"
      "\331!\n\016Classification\0222\n\013variability\030\001 \001(\0162"
      "\035.osi3.TrafficSign.Variability\022E\n\004type\030\002"
      " \001(\01627.osi3.TrafficSign.SupplementarySig"
      "n.Classification.Type\022%\n\005value\030\003 \003(\0132\026.o"
      "si3.TrafficSignValue\022*\n\020assigned_lane_id"
      "\030\004 \003(\0132\020.osi3.Identifier\022G\n\005actor\030\005 \003(\0162"
      "8.osi3.TrafficSign.SupplementarySign.Cla"
      "ssification.Actor\022G\n\005arrow\030\006 \003(\01328.osi3."
      "TrafficSign.SupplementarySign.Classifica"
      "tion.Arrow\022\031\n\021is_out_of_service\030\007 \001(\010\032\222\n"
      "\n\005Arrow\022!\n\007lane_id\030\001 \003(\0132\020.osi3.Identifi"
      "er\022U\n\tdirection\030\002 \003(\0162B.osi3.TrafficSign"
      ".SupplementarySign.Classification.Arrow."
      "Direction\"\216\t\n\tDirection\022\025\n\021DIRECTION_UNK"
      "NOWN\020\000\022\023\n\017DIRECTION_OTHER\020\001\022\032\n\026DIRECTION"
      "_NO_DIRECTION\020\002\022\032\n\026DIRECTION_DIRECT_0_DE"
      "G\020\003\022!\n\035DIRECTION_DIRECT_45_DEG_RIGHT\020\004\022 "
      "\n\034DIRECTION_DIRECT_45_DEG_LEFT\020\005\022!\n\035DIRE"
      "CTION_DIRECT_90_DEG_RIGHT\020\006\022 \n\034DIRECTION"
      "_DIRECT_90_DEG_LEFT\020\007\022\"\n\036DIRECTION_DIREC"
      "T_135_DEG_RIGHT\020\010\022!\n\035DIRECTION_DIRECT_13"
      "5_DEG_LEFT\020\t\022\034\n\030DIRECTION_DIRECT_180_DEG"
      "\020\n\022\037\n\033DIRECTION_TURN_45_DEG_RIGHT\020\013\022\036\n\032D"
      "IRECTION_TURN_45_DEG_LEFT\020\014\022\037\n\033DIRECTION"
      "_TURN_90_DEG_RIGHT\020\r\022\036\n\032DIRECTION_TURN_9"
      "0_DEG_LEFT\020\016\022 \n\034DIRECTION_TURN_135_DEG_R"
      "IGHT\020\017\022\037\n\033DIRECTION_TURN_135_DEG_LEFT\020\020\022"
      " \n\034DIRECTION_TURN_180_DEG_RIGHT\020\021\022\037\n\033DIR"
      "ECTION_TURN_180_DEG_LEFT\020\022\022\032\n\026DIRECTION_"
      "CIRCLE_0_DEG\020\023\022!\n\035DIRECTION_CIRCLE_45_DE"
      "G_RIGHT\020\024\022 \n\034DIRECTION_CIRCLE_45_DEG_LEF"
      "T\020\025\022!\n\035DIRECTION_CIRCLE_90_DEG_RIGHT\020\026\022 "
      "\n\034DIRECTION_CIRCLE_90_DEG_LEFT\020\027\022\"\n\036DIRE"
      "CTION_CIRCLE_135_DEG_RIGHT\020\030\022!\n\035DIRECTIO"
      "N_CIRCLE_135_DEG_LEFT\020\031\022\034\n\030DIRECTION_CIR"
      "CLE_180_DEG\020\032\022%\n!DIRECTION_KEEP_LEFT_TO_"
      "TURN_0_DEG\020\033\022&\n\"DIRECTION_KEEP_RIGHT_TO_"
      "TURN_0_DEG\020\034\022,\n(DIRECTION_KEEP_LEFT_TO_T"
      "URN_90_DEG_RIGHT\020\035\022,\n(DIRECTION_KEEP_RIG"
      "HT_TO_TURN_90_DEG_LEFT\020\036\0227\n3DIRECTION_KE"
      "EP_LEFT_DRIVE_BACK_TO_TURN_90_DEG_RIGHT\020"
      "\037\0227\n3DIRECTION_KEEP_RIGHT_DRIVE_BACK_TO_"
      "TURN_90_DEG_LEFT\020 \"\265\n\n\004Type\022\020\n\014TYPE_UNKN"
      "OWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE_NO_SIGN\020\002\022"
      "\r\n\tTYPE_TEXT\020)\022\016\n\nTYPE_SPACE\020\'\022\r\n\tTYPE_T"
      "IME\020\032\022\016\n\nTYPE_ARROW\020\036\022\027\n\023TYPE_CONSTRAINE"
      "D_TO\020.\022\017\n\013TYPE_EXCEPT\020-\022\033\n\027TYPE_VALID_FO"
      "R_DISTANCE\020\003\022+\n\'TYPE_PRIORITY_ROAD_BOTTO"
      "M_LEFT_FOUR_WAY\020\033\022(\n$TYPE_PRIORITY_ROAD_"
      "TOP_LEFT_FOUR_WAY\020\034\0225\n1TYPE_PRIORITY_ROA"
      "D_BOTTOM_LEFT_THREE_WAY_STRAIGHT\020 \0225\n1TY"
      "PE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_S"
      "IDEWAYS\020!\0222\n.TYPE_PRIORITY_ROAD_TOP_LEFT"
      "_THREE_WAY_STRAIGHT\020\"\022,\n(TYPE_PRIORITY_R"
      "OAD_BOTTOM_RIGHT_FOUR_WAY\020\035\022)\n%TYPE_PRIO"
      "RITY_ROAD_TOP_RIGHT_FOUR_WAY\020\037\0226\n2TYPE_P"
      "RIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_STRA"
      "IGHT\020#\0225\n1TYPE_PRIORITY_ROAD_BOTTOM_RIGH"
      "T_THREE_WAY_SIDEWAY\020$\0223\n/TYPE_PRIORITY_R"
      "OAD_TOP_RIGHT_THREE_WAY_STRAIGHT\020%\022\032\n\026TY"
      "PE_VALID_IN_DISTANCE\020\004\022\020\n\014TYPE_STOP_IN\020\031"
      "\022\023\n\017TYPE_LEFT_ARROW\020\013\022\030\n\024TYPE_LEFT_BEND_"
      "ARROW\020\r\022\024\n\020TYPE_RIGHT_ARROW\020\014\022\031\n\025TYPE_RI"
      "GHT_BEND_ARROW\020\016\022\021\n\rTYPE_ACCIDENT\020(\022\r\n\tT"
      "YPE_SNOW\020\t\022\014\n\010TYPE_FOG\020\010\022$\n TYPE_ROLLING"
      "_HIGHWAY_INFORMATION\0200\022\021\n\rTYPE_SERVICES\020"
      "/\022\023\n\017TYPE_TIME_RANGE\020\005\022&\n\"TYPE_PARKING_D"
      "ISC_TIME_RESTRICTION\020+\022\017\n\013TYPE_WEIGHT\020\006\022"
      "\014\n\010TYPE_WET\020,\022\033\n\027TYPE_PARKING_CONSTRAINT"
      "\020*\022 \n\034TYPE_NO_WAITING_SIDE_STRIPES\020&\022\r\n\t"
      "TYPE_RAIN\020\007\022\022\n\016TYPE_SNOW_RAIN\020\n\022\016\n\nTYPE_"
      "NIGHT\020\023\022\023\n\017TYPE_STOP_4_WAY\020\025\022\016\n\nTYPE_TRU"
      "CK\020\017\022\037\n\033TYPE_TRACTORS_MAY_BE_PASSED\020\020\022\022\n"
      "\016TYPE_HAZARDOUS\020\021\022\020\n\014TYPE_TRAILER\020\022\022\r\n\tT"
      "YPE_ZONE\020\024\022\023\n\017TYPE_MOTORCYCLE\020\026\022\033\n\027TYPE_"
      "MOTORCYCLE_ALLOWED\020\027\022\014\n\010TYPE_CAR\020\030\"\376\t\n\005A"
      "ctor\022\021\n\rACTOR_UNKNOWN\020\000\022\017\n\013ACTOR_OTHER\020\001"
      "\022\022\n\016ACTOR_NO_ACTOR\020\002\022\037\n\033ACTOR_AGRICULTUR"
      "AL_VEHICLES\020\003\022\022\n\016ACTOR_BICYCLES\020\004\022\017\n\013ACT"
      "OR_BUSES\020\005\022\021\n\rACTOR_CAMPERS\020\006\022\022\n\016ACTOR_C"
      "ARAVANS\020\007\022\016\n\nACTOR_CARS\020\010\022\034\n\030ACTOR_CARS_"
      "WITH_CARAVANS\020\t\022\034\n\030ACTOR_CARS_WITH_TRAIL"
      "ERS\020\n\022\020\n\014ACTOR_CATTLE\020\013\022\022\n\016ACTOR_CHILDRE"
      "N\020\014\022\037\n\033ACTOR_CONSTRUCTION_VEHICLES\020\r\022\033\n\027"
      "ACTOR_DELIVERY_VEHICLES\020\016\022\032\n\026ACTOR_DISAB"
      "LED_PERSONS\020\017\022\020\n\014ACTOR_EBIKES\020\020\022\033\n\027ACTOR"
      "_ELECTRIC_VEHICLES\020\021\022\034\n\030ACTOR_EMERGENCY_"
      "VEHICLES\020\022\022\025\n\021ACTOR_FERRY_USERS\020\023\022\033\n\027ACT"
      "OR_FORESTRY_VEHICLES\020\024\022\"\n\036ACTOR_HAZARDOU"
      "S_GOODS_VEHICLES\020\025\022\031\n\025ACTOR_HORSE_CARRIA"
      "GES\020\026\022\026\n\022ACTOR_HORSE_RIDERS\020\027\022\030\n\024ACTOR_I"
      "NLINE_SKATERS\020\030\022\032\n\026ACTOR_MEDICAL_VEHICLE"
      "S\020\031\022\033\n\027ACTOR_MILITARY_VEHICLES\020\032\022\020\n\014ACTO"
      "R_MOPEDS\020\033\022\025\n\021ACTOR_MOTORCYCLES\020\034\022\'\n#ACT"
      "OR_MOTORIZED_MULTITRACK_VEHICLES\020\035\022*\n&AC"
      "TOR_OPERATIONAL_AND_UTILITY_VEHICLES\020\036\022\025"
      "\n\021ACTOR_PEDESTRIANS\020\037\022#\n\037ACTOR_PUBLIC_TR"
      "ANSPORT_VEHICLES\020 \022\032\n\026ACTOR_RAILROAD_TRA"
      "FFIC\020!\022\023\n\017ACTOR_RESIDENTS\020\"\022\032\n\026ACTOR_SLU"
      "RRY_TRANSPORT\020#\022\017\n\013ACTOR_TAXIS\020$\022\022\n\016ACTO"
      "R_TRACTORS\020%\022\022\n\016ACTOR_TRAILERS\020&\022\017\n\013ACTO"
      "R_TRAMS\020\'\022\020\n\014ACTOR_TRUCKS\020(\022\"\n\036ACTOR_TRU"
      "CKS_WITH_SEMITRAILERS\020)\022\036\n\032ACTOR_TRUCKS_"
      "WITH_TRAILERS\020*\022$\n ACTOR_VEHICLES_WITH_G"
      "REEN_BADGES\020+\022\"\n\036ACTOR_VEHICLES_WITH_RED"
      "_BADGES\020,\022%\n!ACTOR_VEHICLES_WITH_YELLOW_"
      "BADGES\020-\022\"\n\036ACTOR_WATER_POLLUTANT_VEHICL"
      "ES\020.\022\035\n\031ACTOR_WINTER_SPORTSPEOPLE\020/\"n\n\013V"
      "ariability\022\027\n\023VARIABILITY_UNKNOWN\020\000\022\025\n\021V"
      "ARIABILITY_OTHER\020\001\022\025\n\021VARIABILITY_FIXED\020"
      "\002\022\030\n\024VARIABILITY_VARIABLE\020\003B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 13359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_trafficsign.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5ftrafficsign_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* TrafficSignValue_Unit_descriptor() {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficsign_2eproto::file_level_enum_descriptors[0];
}
bool TrafficSignValue_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignValue_Unit TrafficSignValue::UNIT_UNKNOWN;
const TrafficSignValue_Unit TrafficSignValue::UNIT_OTHER;
const TrafficSignValue_Unit TrafficSignValue::UNIT_NO_UNIT;
const TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER_PER_HOUR;
const TrafficSignValue_Unit TrafficSignValue::UNIT_MILE_PER_HOUR;
const TrafficSignValue_Unit TrafficSignValue::UNIT_METER;
const TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER;
const TrafficSignValue_Unit TrafficSignValue::UNIT_FEET;
const TrafficSignValue_Unit TrafficSignValue::UNIT_MILE;
const TrafficSignValue_Unit TrafficSignValue::UNIT_METRIC_TON;
const TrafficSignValue_Unit TrafficSignValue::UNIT_LONG_TON;
const TrafficSignValue_Unit TrafficSignValue::UNIT_SHORT_TON;
const TrafficSignValue_Unit TrafficSignValue::UNIT_MINUTES;
const TrafficSignValue_Unit TrafficSignValue::UNIT_DAY;
const TrafficSignValue_Unit TrafficSignValue::UNIT_PERCENTAGE;
const TrafficSignValue_Unit TrafficSignValue::Unit_MIN;
const TrafficSignValue_Unit TrafficSignValue::Unit_MAX;
const int TrafficSignValue::Unit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_MainSign_Classification_Type_descriptor() {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficsign_2eproto::file_level_enum_descriptors[1];
}
bool TrafficSign_MainSign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNKNOWN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DANGER_SPOT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ZEBRA_CROSSING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FLIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_AMPHIBIANS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FALLING_ROCKS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_OR_ICE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LOOSE_GRAVEL;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATERSIDE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CLEARANCE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOVABLE_BRIDGE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_DOWNWARDS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_UPWARDS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNEVEN_ROAD;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_SLIPPERY_WET_OR_DIRTY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_WINDS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_WORKS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_QUEUES;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TWO_WAY_TRAFFIC;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ATTENTION_TRAFFIC_LIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHILDREN_CROSSING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CYCLE_ROUTE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEER_CROSSING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNGATED_LEVEL_CROSSING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LEVEL_CROSSING_MARKER;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RAILWAY_TRAFFIC_PRIORITY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GIVE_WAY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STOP;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_STRAIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_WAY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_WAY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUNDABOUT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_OPEN_FOR_TRAFFIC;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSED_FOR_TRAFFIC;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSING_FOR_TRAFFIC;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_STOP;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TAXI_STAND;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_ONLY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_ONLY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_ONLY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SHARED_ONLY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_LEFT_ONLY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_RIGHT_ONLY;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORIZED_MULTITRACK_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORCYCLES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOPEDS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_CARRIAGES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUSES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_TRAILERS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_TRAILERS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRACTORS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTOR_VEHICLES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HAZARDOUS_GOODS_VEHICLES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVER_WEIGHT_VEHICLES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_AXLE_OVER_WEIGHT_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_WIDTH_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_HEIGHT_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_LENGTH_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DO_NOT_ENTER;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_CHAINS_REQUIRED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATER_POLLUTANT_VEHICLES_PROHIBITED;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_DISTANCE_FOR_TRUCKS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_RESTRICTIONS_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_STOPPING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TUNNEL;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_HIGHWAY_EXIT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_EXPRESSWAY_EXIT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_ROAD_EXIT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_EXIT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_EXIT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_STREET;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CROSSING_GUARDS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND_EXCLUDING_DESIGNATED_ACTORS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FIRST_AID_STATION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLICE_STATION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TELEPHONE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FILLING_STATION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HOTEL;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_KIOSK;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOILET;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHAPEL;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_INFO;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REPAIR_SERVICE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_UNDERPASS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_BRIDGE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAMPER_PLACE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PLACE_NAME;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ATTRACTION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ROUTE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_AREA;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_NOT_PASSABLE_MOTOR_VEHICLES;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_UNSAFE_TRUCKS_TRACTORS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_ROAD;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CUSTOMS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INTERNATIONAL_BORDER_INFO;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREETLIGHT_RED_BAND;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_ROUTE_NUMBER;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ROUTE_NUMBER;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_INTERCHANGE_NUMBER;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EUROPEAN_ROUTE_NUMBER;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTING_DESIGNATED_ACTORS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CONSOLIDATED_DIRECTIONS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREET_NAME;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_LANE_CONFIG;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_HIGHWAY_ENTRIES;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER_ROAD_ANNOUNCEMENT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT_TRUCK_STOP;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_PREANNOUNCEMENT_DIRECTIONS;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_EXIT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_DISTANCE_BOARD;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NUMBERED_DETOUR;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_ROUTING_BOARD;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR_ROUTING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_LEFT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_RIGHT;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_END;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_BEGIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_CONSOLIDATION;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_CITY_BLOCK;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GATE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_WARNING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_CONE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOBILE_LANE_CLOSURE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REFLECTOR_POST;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTIONAL_BOARD_WARNING;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE_WEDGES;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PARKING_HAZARD;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_LIGHT_GREEN_ARROW;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MIN;
const TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MAX;
const int TrafficSign_MainSign_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_MainSign_Classification_DirectionScope_descriptor() {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficsign_2eproto::file_level_enum_descriptors[2];
}
bool TrafficSign_MainSign_Classification_DirectionScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_UNKNOWN;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_OTHER;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_NO_DIRECTION;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_RIGHT;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT_RIGHT;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MIN;
const TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MAX;
const int TrafficSign_MainSign_Classification::DirectionScope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Arrow_Direction_descriptor() {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficsign_2eproto::file_level_enum_descriptors[3];
}
bool TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_UNKNOWN;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_OTHER;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_NO_DIRECTION;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_0_DEG;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_180_DEG;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_0_DEG;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_180_DEG;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_0_DEG;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_0_DEG;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_90_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_90_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_DRIVE_BACK_TO_TURN_90_DEG_RIGHT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_DRIVE_BACK_TO_TURN_90_DEG_LEFT;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MIN;
const TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MAX;
const int TrafficSign_SupplementarySign_Classification_Arrow::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Type_descriptor() {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficsign_2eproto::file_level_enum_descriptors[4];
}
bool TrafficSign_SupplementarySign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_UNKNOWN;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_OTHER;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_SIGN;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TEXT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SPACE;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ARROW;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CONSTRAINED_TO;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_EXCEPT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_FOR_DISTANCE;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_FOUR_WAY;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_FOUR_WAY;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_STRAIGHT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_SIDEWAYS;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_THREE_WAY_STRAIGHT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_FOUR_WAY;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_FOUR_WAY;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_STRAIGHT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_SIDEWAY;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_THREE_WAY_STRAIGHT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_IN_DISTANCE;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_IN;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_ARROW;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_BEND_ARROW;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_ARROW;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_BEND_ARROW;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ACCIDENT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_FOG;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ROLLING_HIGHWAY_INFORMATION;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SERVICES;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME_RANGE;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_DISC_TIME_RESTRICTION;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WEIGHT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WET;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_CONSTRAINT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_WAITING_SIDE_STRIPES;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RAIN;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW_RAIN;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NIGHT;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_4_WAY;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRUCK;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRACTORS_MAY_BE_PASSED;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_HAZARDOUS;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRAILER;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ZONE;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE_ALLOWED;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CAR;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MIN;
const TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MAX;
const int TrafficSign_SupplementarySign_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Actor_descriptor() {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficsign_2eproto::file_level_enum_descriptors[5];
}
bool TrafficSign_SupplementarySign_Classification_Actor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_UNKNOWN;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OTHER;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_NO_ACTOR;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_AGRICULTURAL_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BICYCLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BUSES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CAMPERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARAVANS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_CARAVANS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_TRAILERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CATTLE;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CHILDREN;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CONSTRUCTION_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DELIVERY_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DISABLED_PERSONS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EBIKES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_ELECTRIC_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EMERGENCY_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FERRY_USERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FORESTRY_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HAZARDOUS_GOODS_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_CARRIAGES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_RIDERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_INLINE_SKATERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MEDICAL_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MILITARY_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOPEDS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORCYCLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORIZED_MULTITRACK_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OPERATIONAL_AND_UTILITY_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PEDESTRIANS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PUBLIC_TRANSPORT_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RAILROAD_TRAFFIC;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RESIDENTS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_SLURRY_TRANSPORT;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TAXIS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRACTORS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAILERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAMS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_SEMITRAILERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_TRAILERS;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_GREEN_BADGES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_RED_BADGES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_YELLOW_BADGES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WATER_POLLUTANT_VEHICLES;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WINTER_SPORTSPEOPLE;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MIN;
const TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MAX;
const int TrafficSign_SupplementarySign_Classification::Actor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_Variability_descriptor() {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficsign_2eproto::file_level_enum_descriptors[6];
}
bool TrafficSign_Variability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_Variability TrafficSign::VARIABILITY_UNKNOWN;
const TrafficSign_Variability TrafficSign::VARIABILITY_OTHER;
const TrafficSign_Variability TrafficSign::VARIABILITY_FIXED;
const TrafficSign_Variability TrafficSign::VARIABILITY_VARIABLE;
const TrafficSign_Variability TrafficSign::Variability_MIN;
const TrafficSign_Variability TrafficSign::Variability_MAX;
const int TrafficSign::Variability_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TrafficSignValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSignValue::kValueFieldNumber;
const int TrafficSignValue::kValueUnitFieldNumber;
const int TrafficSignValue::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignValue::TrafficSignValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSignValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSignValue)
}
TrafficSignValue::TrafficSignValue(const TrafficSignValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSignValue)
}

void TrafficSignValue::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
  _cached_size_ = 0;
}

TrafficSignValue::~TrafficSignValue() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSignValue)
  SharedDtor();
}

void TrafficSignValue::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficSignValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSignValue::descriptor() {
  ::protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignValue& TrafficSignValue::default_instance() {
  ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSignValue();
  return *internal_default_instance();
}

TrafficSignValue* TrafficSignValue::New(::google::protobuf::Arena* arena) const {
  TrafficSignValue* n = new TrafficSignValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSignValue::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSignValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
  _internal_metadata_.Clear();
}

bool TrafficSignValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSignValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSignValue.Unit value_unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_unit(static_cast< ::osi3::TrafficSignValue_Unit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "osi3.TrafficSignValue.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSignValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSignValue)
  return false;
#undef DO_
}

void TrafficSignValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSignValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // .osi3.TrafficSignValue.Unit value_unit = 2;
  if (this->value_unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value_unit(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSignValue.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSignValue)
}

::google::protobuf::uint8* TrafficSignValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSignValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // .osi3.TrafficSignValue.Unit value_unit = 2;
  if (this->value_unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value_unit(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSignValue.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSignValue)
  return target;
}

size_t TrafficSignValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSignValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // .osi3.TrafficSignValue.Unit value_unit = 2;
  if (this->value_unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSignValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSignValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSignValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSignValue)
    MergeFrom(*source);
  }
}

void TrafficSignValue::MergeFrom(const TrafficSignValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSignValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.value_unit() != 0) {
    set_value_unit(from.value_unit());
  }
}

void TrafficSignValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSignValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignValue::CopyFrom(const TrafficSignValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSignValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignValue::IsInitialized() const {
  return true;
}

void TrafficSignValue::Swap(TrafficSignValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignValue::InternalSwap(TrafficSignValue* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(value_, other->value_);
  swap(value_unit_, other->value_unit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSignValue::GetMetadata() const {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_MainSign_Classification::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_MainSign_Classification_default_instance_._instance.get_mutable()->value_ = const_cast< ::osi3::TrafficSignValue*>(
      ::osi3::TrafficSignValue::internal_default_instance());
}
void TrafficSign_MainSign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_MainSign_Classification::kVariabilityFieldNumber;
const int TrafficSign_MainSign_Classification::kTypeFieldNumber;
const int TrafficSign_MainSign_Classification::kValueFieldNumber;
const int TrafficSign_MainSign_Classification::kDirectionScopeFieldNumber;
const int TrafficSign_MainSign_Classification::kAssignedLaneIdFieldNumber;
const int TrafficSign_MainSign_Classification::kVerticallyMirroredFieldNumber;
const int TrafficSign_MainSign_Classification::kIsOutOfServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_MainSign_Classification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.MainSign.Classification)
}
TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(const TrafficSign_MainSign_Classification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      assigned_lane_id_(from.assigned_lane_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::osi3::TrafficSignValue(*from.value_);
  } else {
    value_ = NULL;
  }
  ::memcpy(&variability_, &from.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign.Classification)
}

void TrafficSign_MainSign_Classification::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&value_)) + sizeof(is_out_of_service_));
  _cached_size_ = 0;
}

TrafficSign_MainSign_Classification::~TrafficSign_MainSign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign.Classification)
  SharedDtor();
}

void TrafficSign_MainSign_Classification::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void TrafficSign_MainSign_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSign_MainSign_Classification::descriptor() {
  ::protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_MainSign_Classification& TrafficSign_MainSign_Classification::default_instance() {
  ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_MainSign_Classification();
  return *internal_default_instance();
}

TrafficSign_MainSign_Classification* TrafficSign_MainSign_Classification::New(::google::protobuf::Arena* arena) const {
  TrafficSign_MainSign_Classification* n = new TrafficSign_MainSign_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSign_MainSign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  ::memset(&variability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

bool TrafficSign_MainSign_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.MainSign.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.TrafficSign.Variability variability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_variability(static_cast< ::osi3::TrafficSign_Variability >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSignValue value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction_scope(static_cast< ::osi3::TrafficSign_MainSign_Classification_DirectionScope >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vertically_mirrored = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vertically_mirrored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.MainSign.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.MainSign.Classification)
  return false;
#undef DO_
}

void TrafficSign_MainSign_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.MainSign.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->variability(), output);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .osi3.TrafficSignValue value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (this->direction_scope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction_scope(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->assigned_lane_id(static_cast<int>(i)), output);
  }

  // bool vertically_mirrored = 6;
  if (this->vertically_mirrored() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->vertically_mirrored(), output);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_out_of_service(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.MainSign.Classification)
}

::google::protobuf::uint8* TrafficSign_MainSign_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->variability(), target);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .osi3.TrafficSignValue value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->value_, deterministic, target);
  }

  // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (this->direction_scope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction_scope(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->assigned_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // bool vertically_mirrored = 6;
  if (this->vertically_mirrored() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->vertically_mirrored(), target);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_out_of_service(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign.Classification)
  return target;
}

size_t TrafficSign_MainSign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign.Classification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.Identifier assigned_lane_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // .osi3.TrafficSignValue value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->variability());
  }

  // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (this->direction_scope() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction_scope());
  }

  // bool vertically_mirrored = 6;
  if (this->vertically_mirrored() != 0) {
    total_size += 1 + 1;
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSign_MainSign_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.MainSign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_MainSign_Classification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_MainSign_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.MainSign.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.MainSign.Classification)
    MergeFrom(*source);
  }
}

void TrafficSign_MainSign_Classification::MergeFrom(const TrafficSign_MainSign_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  if (from.has_value()) {
    mutable_value()->::osi3::TrafficSignValue::MergeFrom(from.value());
  }
  if (from.variability() != 0) {
    set_variability(from.variability());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.direction_scope() != 0) {
    set_direction_scope(from.direction_scope());
  }
  if (from.vertically_mirrored() != 0) {
    set_vertically_mirrored(from.vertically_mirrored());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void TrafficSign_MainSign_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.MainSign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_MainSign_Classification::CopyFrom(const TrafficSign_MainSign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign_Classification::Swap(TrafficSign_MainSign_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign_MainSign_Classification::InternalSwap(TrafficSign_MainSign_Classification* other) {
  using std::swap;
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  swap(value_, other->value_);
  swap(variability_, other->variability_);
  swap(type_, other->type_);
  swap(direction_scope_, other->direction_scope_);
  swap(vertically_mirrored_, other->vertically_mirrored_);
  swap(is_out_of_service_, other->is_out_of_service_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSign_MainSign_Classification::GetMetadata() const {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_MainSign::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_MainSign_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_TrafficSign_MainSign_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficSign_MainSign_Classification*>(
      ::osi3::TrafficSign_MainSign_Classification::internal_default_instance());
}
void TrafficSign_MainSign::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_MainSign::kBaseFieldNumber;
const int TrafficSign_MainSign::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_MainSign::TrafficSign_MainSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_MainSign();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.MainSign)
}
TrafficSign_MainSign::TrafficSign_MainSign(const TrafficSign_MainSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficSign_MainSign_Classification(*from.classification_);
  } else {
    classification_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign)
}

void TrafficSign_MainSign::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&base_)) + sizeof(classification_));
  _cached_size_ = 0;
}

TrafficSign_MainSign::~TrafficSign_MainSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign)
  SharedDtor();
}

void TrafficSign_MainSign::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void TrafficSign_MainSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSign_MainSign::descriptor() {
  ::protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_MainSign& TrafficSign_MainSign::default_instance() {
  ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_MainSign();
  return *internal_default_instance();
}

TrafficSign_MainSign* TrafficSign_MainSign::New(::google::protobuf::Arena* arena) const {
  TrafficSign_MainSign* n = new TrafficSign_MainSign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSign_MainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_ != NULL) {
    delete classification_;
  }
  classification_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficSign_MainSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.MainSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.BaseStationary base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.MainSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.MainSign)
  return false;
#undef DO_
}

void TrafficSign_MainSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.MainSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.MainSign)
}

::google::protobuf::uint8* TrafficSign_MainSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->base_, deterministic, target);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->classification_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign)
  return target;
}

size_t TrafficSign_MainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classification_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSign_MainSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.MainSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_MainSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_MainSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.MainSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.MainSign)
    MergeFrom(*source);
  }
}

void TrafficSign_MainSign::MergeFrom(const TrafficSign_MainSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficSign_MainSign_Classification::MergeFrom(from.classification());
  }
}

void TrafficSign_MainSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.MainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_MainSign::CopyFrom(const TrafficSign_MainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign::Swap(TrafficSign_MainSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign_MainSign::InternalSwap(TrafficSign_MainSign* other) {
  using std::swap;
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSign_MainSign::GetMetadata() const {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_SupplementarySign_Classification_Arrow::InitAsDefaultInstance() {
}
void TrafficSign_SupplementarySign_Classification_Arrow::clear_lane_id() {
  lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_SupplementarySign_Classification_Arrow::kLaneIdFieldNumber;
const int TrafficSign_SupplementarySign_Classification_Arrow::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign_Classification_Arrow();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}
TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(const TrafficSign_SupplementarySign_Classification_Arrow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_id_(from.lane_id_),
      direction_(from.direction_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}

void TrafficSign_SupplementarySign_Classification_Arrow::SharedCtor() {
  _cached_size_ = 0;
}

TrafficSign_SupplementarySign_Classification_Arrow::~TrafficSign_SupplementarySign_Classification_Arrow() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  SharedDtor();
}

void TrafficSign_SupplementarySign_Classification_Arrow::SharedDtor() {
}

void TrafficSign_SupplementarySign_Classification_Arrow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSign_SupplementarySign_Classification_Arrow::descriptor() {
  ::protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_SupplementarySign_Classification_Arrow& TrafficSign_SupplementarySign_Classification_Arrow::default_instance() {
  ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign_Classification_Arrow();
  return *internal_default_instance();
}

TrafficSign_SupplementarySign_Classification_Arrow* TrafficSign_SupplementarySign_Classification_Arrow::New(::google::protobuf::Arena* arena) const {
  TrafficSign_SupplementarySign_Classification_Arrow* n = new TrafficSign_SupplementarySign_Classification_Arrow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSign_SupplementarySign_Classification_Arrow::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.Clear();
  direction_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficSign_SupplementarySign_Classification_Arrow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.Identifier lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_direction(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_direction(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return false;
#undef DO_
}

void TrafficSign_SupplementarySign_Classification_Arrow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_id(static_cast<int>(i)), output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  if (this->direction_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_direction_cached_byte_size_));
  }
  for (int i = 0, n = this->direction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->direction(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}

::google::protobuf::uint8* TrafficSign_SupplementarySign_Classification_Arrow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  if (this->direction_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _direction_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->direction_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification_Arrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.Identifier lane_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->direction_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->direction(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _direction_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSign_SupplementarySign_Classification_Arrow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySign_Classification_Arrow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_SupplementarySign_Classification_Arrow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySign_Classification_Arrow::MergeFrom(const TrafficSign_SupplementarySign_Classification_Arrow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  direction_.MergeFrom(from.direction_);
}

void TrafficSign_SupplementarySign_Classification_Arrow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySign_Classification_Arrow::CopyFrom(const TrafficSign_SupplementarySign_Classification_Arrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification_Arrow::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification_Arrow::Swap(TrafficSign_SupplementarySign_Classification_Arrow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign_SupplementarySign_Classification_Arrow::InternalSwap(TrafficSign_SupplementarySign_Classification_Arrow* other) {
  using std::swap;
  lane_id_.InternalSwap(&other->lane_id_);
  direction_.InternalSwap(&other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSign_SupplementarySign_Classification_Arrow::GetMetadata() const {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_SupplementarySign_Classification::InitAsDefaultInstance() {
}
void TrafficSign_SupplementarySign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_SupplementarySign_Classification::kVariabilityFieldNumber;
const int TrafficSign_SupplementarySign_Classification::kTypeFieldNumber;
const int TrafficSign_SupplementarySign_Classification::kValueFieldNumber;
const int TrafficSign_SupplementarySign_Classification::kAssignedLaneIdFieldNumber;
const int TrafficSign_SupplementarySign_Classification::kActorFieldNumber;
const int TrafficSign_SupplementarySign_Classification::kArrowFieldNumber;
const int TrafficSign_SupplementarySign_Classification::kIsOutOfServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign_Classification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.SupplementarySign.Classification)
}
TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(const TrafficSign_SupplementarySign_Classification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      assigned_lane_id_(from.assigned_lane_id_),
      actor_(from.actor_),
      arrow_(from.arrow_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&variability_, &from.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification)
}

void TrafficSign_SupplementarySign_Classification::SharedCtor() {
  ::memset(&variability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  _cached_size_ = 0;
}

TrafficSign_SupplementarySign_Classification::~TrafficSign_SupplementarySign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification)
  SharedDtor();
}

void TrafficSign_SupplementarySign_Classification::SharedDtor() {
}

void TrafficSign_SupplementarySign_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSign_SupplementarySign_Classification::descriptor() {
  ::protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_SupplementarySign_Classification& TrafficSign_SupplementarySign_Classification::default_instance() {
  ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign_Classification();
  return *internal_default_instance();
}

TrafficSign_SupplementarySign_Classification* TrafficSign_SupplementarySign_Classification::New(::google::protobuf::Arena* arena) const {
  TrafficSign_SupplementarySign_Classification* n = new TrafficSign_SupplementarySign_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSign_SupplementarySign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  assigned_lane_id_.Clear();
  actor_.Clear();
  arrow_.Clear();
  ::memset(&variability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

bool TrafficSign_SupplementarySign_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.SupplementarySign.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.TrafficSign.Variability variability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_variability(static_cast< ::osi3::TrafficSign_Variability >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSignValue value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_actor(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Actor >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_actor(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Actor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_arrow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.SupplementarySign.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.SupplementarySign.Classification)
  return false;
#undef DO_
}

void TrafficSign_SupplementarySign_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->variability(), output);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .osi3.TrafficSignValue value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(static_cast<int>(i)), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->assigned_lane_id(static_cast<int>(i)), output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  if (this->actor_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_actor_cached_byte_size_));
  }
  for (int i = 0, n = this->actor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->actor(i), output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arrow_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrow(static_cast<int>(i)), output);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_out_of_service(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.SupplementarySign.Classification)
}

::google::protobuf::uint8* TrafficSign_SupplementarySign_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->variability(), target);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .osi3.TrafficSignValue value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->value(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->assigned_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  if (this->actor_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _actor_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->actor_, target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arrow_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->arrow(static_cast<int>(i)), deterministic, target);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_out_of_service(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.TrafficSignValue value = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->actor_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->actor(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _actor_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->arrow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arrow(static_cast<int>(i)));
    }
  }

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->variability());
  }

  // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSign_SupplementarySign_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySign_Classification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_SupplementarySign_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.SupplementarySign.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.SupplementarySign.Classification)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySign_Classification::MergeFrom(const TrafficSign_SupplementarySign_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  actor_.MergeFrom(from.actor_);
  arrow_.MergeFrom(from.arrow_);
  if (from.variability() != 0) {
    set_variability(from.variability());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void TrafficSign_SupplementarySign_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySign_Classification::CopyFrom(const TrafficSign_SupplementarySign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification::Swap(TrafficSign_SupplementarySign_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign_SupplementarySign_Classification::InternalSwap(TrafficSign_SupplementarySign_Classification* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  actor_.InternalSwap(&other->actor_);
  arrow_.InternalSwap(&other->arrow_);
  swap(variability_, other->variability_);
  swap(type_, other->type_);
  swap(is_out_of_service_, other->is_out_of_service_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSign_SupplementarySign_Classification::GetMetadata() const {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_SupplementarySign::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_SupplementarySign_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_TrafficSign_SupplementarySign_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficSign_SupplementarySign_Classification*>(
      ::osi3::TrafficSign_SupplementarySign_Classification::internal_default_instance());
}
void TrafficSign_SupplementarySign::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_SupplementarySign::kBaseFieldNumber;
const int TrafficSign_SupplementarySign::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_SupplementarySign::TrafficSign_SupplementarySign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.SupplementarySign)
}
TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(const TrafficSign_SupplementarySign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficSign_SupplementarySign_Classification(*from.classification_);
  } else {
    classification_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign)
}

void TrafficSign_SupplementarySign::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&base_)) + sizeof(classification_));
  _cached_size_ = 0;
}

TrafficSign_SupplementarySign::~TrafficSign_SupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign)
  SharedDtor();
}

void TrafficSign_SupplementarySign::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void TrafficSign_SupplementarySign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSign_SupplementarySign::descriptor() {
  ::protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_SupplementarySign& TrafficSign_SupplementarySign::default_instance() {
  ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign_SupplementarySign();
  return *internal_default_instance();
}

TrafficSign_SupplementarySign* TrafficSign_SupplementarySign::New(::google::protobuf::Arena* arena) const {
  TrafficSign_SupplementarySign* n = new TrafficSign_SupplementarySign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSign_SupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_ != NULL) {
    delete classification_;
  }
  classification_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficSign_SupplementarySign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.SupplementarySign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.BaseStationary base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.SupplementarySign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.SupplementarySign)
  return false;
#undef DO_
}

void TrafficSign_SupplementarySign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.SupplementarySign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.SupplementarySign)
}

::google::protobuf::uint8* TrafficSign_SupplementarySign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->base_, deterministic, target);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->classification_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign)
  return target;
}

size_t TrafficSign_SupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classification_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSign_SupplementarySign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.SupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_SupplementarySign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.SupplementarySign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.SupplementarySign)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySign::MergeFrom(const TrafficSign_SupplementarySign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficSign_SupplementarySign_Classification::MergeFrom(from.classification());
  }
}

void TrafficSign_SupplementarySign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.SupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySign::CopyFrom(const TrafficSign_SupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign::Swap(TrafficSign_SupplementarySign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign_SupplementarySign::InternalSwap(TrafficSign_SupplementarySign* other) {
  using std::swap;
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSign_SupplementarySign::GetMetadata() const {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_TrafficSign_default_instance_._instance.get_mutable()->main_sign_ = const_cast< ::osi3::TrafficSign_MainSign*>(
      ::osi3::TrafficSign_MainSign::internal_default_instance());
}
void TrafficSign::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign::kIdFieldNumber;
const int TrafficSign::kMainSignFieldNumber;
const int TrafficSign::kSupplementarySignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign::TrafficSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      supplementary_sign_(from.supplementary_sign_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_main_sign()) {
    main_sign_ = new ::osi3::TrafficSign_MainSign(*from.main_sign_);
  } else {
    main_sign_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign)
}

void TrafficSign::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_sign_) -
      reinterpret_cast<char*>(&id_)) + sizeof(main_sign_));
  _cached_size_ = 0;
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign)
  SharedDtor();
}

void TrafficSign::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete main_sign_;
}

void TrafficSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSign::descriptor() {
  ::protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign& TrafficSign::default_instance() {
  ::protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign();
  return *internal_default_instance();
}

TrafficSign* TrafficSign::New(::google::protobuf::Arena* arena) const {
  TrafficSign* n = new TrafficSign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplementary_sign_.Clear();
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && main_sign_ != NULL) {
    delete main_sign_;
  }
  main_sign_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign main_sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_main_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_supplementary_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign)
  return false;
#undef DO_
}

void TrafficSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .osi3.TrafficSign.MainSign main_sign = 2;
  if (this->has_main_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->main_sign_, output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->supplementary_sign(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign)
}

::google::protobuf::uint8* TrafficSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .osi3.TrafficSign.MainSign main_sign = 2;
  if (this->has_main_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->main_sign_, deterministic, target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->supplementary_sign(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->supplementary_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->supplementary_sign(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .osi3.TrafficSign.MainSign main_sign = 2;
  if (this->has_main_sign()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->main_sign_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign)
    MergeFrom(*source);
  }
}

void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplementary_sign_.MergeFrom(from.supplementary_sign_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_main_sign()) {
    mutable_main_sign()->::osi3::TrafficSign_MainSign::MergeFrom(from.main_sign());
  }
}

void TrafficSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::Swap(TrafficSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  supplementary_sign_.InternalSwap(&other->supplementary_sign_);
  swap(id_, other->id_);
  swap(main_sign_, other->main_sign_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSign::GetMetadata() const {
  protobuf_osi_5ftrafficsign_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficsign_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
