// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_environment.proto

#include "osi_environment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class EnvironmentalConditions_TimeOfDayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvironmentalConditions_TimeOfDay>
      _instance;
} _EnvironmentalConditions_TimeOfDay_default_instance_;
class EnvironmentalConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvironmentalConditions>
      _instance;
} _EnvironmentalConditions_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5fenvironment_2eproto {
void InitDefaultsEnvironmentalConditions_TimeOfDayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_EnvironmentalConditions_TimeOfDay_default_instance_;
    new (ptr) ::osi3::EnvironmentalConditions_TimeOfDay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::EnvironmentalConditions_TimeOfDay::InitAsDefaultInstance();
}

void InitDefaultsEnvironmentalConditions_TimeOfDay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvironmentalConditions_TimeOfDayImpl);
}

void InitDefaultsEnvironmentalConditionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fenvironment_2eproto::InitDefaultsEnvironmentalConditions_TimeOfDay();
  {
    void* ptr = &::osi3::_EnvironmentalConditions_default_instance_;
    new (ptr) ::osi3::EnvironmentalConditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::EnvironmentalConditions::InitAsDefaultInstance();
}

void InitDefaultsEnvironmentalConditions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvironmentalConditionsImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, seconds_since_midnight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, ambient_illumination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, time_of_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, unix_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, atmospheric_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, relative_humidity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, precipitation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::EnvironmentalConditions, fog_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::EnvironmentalConditions_TimeOfDay)},
  { 6, -1, sizeof(::osi3::EnvironmentalConditions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_EnvironmentalConditions_TimeOfDay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_EnvironmentalConditions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_environment.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025osi_environment.proto\022\004osi3\"\205\n\n\027Enviro"
      "nmentalConditions\022O\n\024ambient_illuminatio"
      "n\030\001 \001(\01621.osi3.EnvironmentalConditions.A"
      "mbientIllumination\022<\n\013time_of_day\030\002 \001(\0132"
      "\'.osi3.EnvironmentalConditions.TimeOfDay"
      "\022\026\n\016unix_timestamp\030\010 \001(\003\022\034\n\024atmospheric_"
      "pressure\030\003 \001(\001\022\023\n\013temperature\030\004 \001(\001\022\031\n\021r"
      "elative_humidity\030\005 \001(\001\022B\n\rprecipitation\030"
      "\006 \001(\0162+.osi3.EnvironmentalConditions.Pre"
      "cipitation\022.\n\003fog\030\007 \001(\0162!.osi3.Environme"
      "ntalConditions.Fog\032+\n\tTimeOfDay\022\036\n\026secon"
      "ds_since_midnight\030\001 \001(\r\"\200\002\n\rPrecipitatio"
      "n\022\031\n\025PRECIPITATION_UNKNOWN\020\000\022\027\n\023PRECIPIT"
      "ATION_OTHER\020\001\022\026\n\022PRECIPITATION_NONE\020\002\022\034\n"
      "\030PRECIPITATION_VERY_LIGHT\020\003\022\027\n\023PRECIPITA"
      "TION_LIGHT\020\004\022\032\n\026PRECIPITATION_MODERATE\020\005"
      "\022\027\n\023PRECIPITATION_HEAVY\020\006\022\034\n\030PRECIPITATI"
      "ON_VERY_HEAVY\020\007\022\031\n\025PRECIPITATION_EXTREME"
      "\020\010\"\315\001\n\003Fog\022\017\n\013FOG_UNKNOWN\020\000\022\r\n\tFOG_OTHER"
      "\020\001\022\034\n\030FOG_EXCELLENT_VISIBILITY\020\002\022\027\n\023FOG_"
      "GOOD_VISIBILITY\020\003\022\033\n\027FOG_MODERATE_VISIBI"
      "LITY\020\004\022\027\n\023FOG_POOR_VISIBILITY\020\005\022\014\n\010FOG_M"
      "IST\020\006\022\r\n\tFOG_LIGHT\020\007\022\r\n\tFOG_THICK\020\010\022\r\n\tF"
      "OG_DENSE\020\t\"\200\003\n\023AmbientIllumination\022 \n\034AM"
      "BIENT_ILLUMINATION_UNKNOWN\020\000\022\036\n\032AMBIENT_"
      "ILLUMINATION_OTHER\020\001\022\037\n\033AMBIENT_ILLUMINA"
      "TION_LEVEL1\020\002\022\037\n\033AMBIENT_ILLUMINATION_LE"
      "VEL2\020\003\022\037\n\033AMBIENT_ILLUMINATION_LEVEL3\020\004\022"
      "\037\n\033AMBIENT_ILLUMINATION_LEVEL4\020\005\022\037\n\033AMBI"
      "ENT_ILLUMINATION_LEVEL5\020\006\022\037\n\033AMBIENT_ILL"
      "UMINATION_LEVEL6\020\007\022\037\n\033AMBIENT_ILLUMINATI"
      "ON_LEVEL7\020\010\022\037\n\033AMBIENT_ILLUMINATION_LEVE"
      "L8\020\t\022\037\n\033AMBIENT_ILLUMINATION_LEVEL9\020\nB\002H"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_environment.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5fenvironment_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_Precipitation_descriptor() {
  protobuf_osi_5fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fenvironment_2eproto::file_level_enum_descriptors[0];
}
bool EnvironmentalConditions_Precipitation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_UNKNOWN;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_OTHER;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_NONE;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_LIGHT;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_LIGHT;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_MODERATE;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_HEAVY;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_HEAVY;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_EXTREME;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MIN;
const EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MAX;
const int EnvironmentalConditions::Precipitation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_Fog_descriptor() {
  protobuf_osi_5fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fenvironment_2eproto::file_level_enum_descriptors[1];
}
bool EnvironmentalConditions_Fog_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_UNKNOWN;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_OTHER;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_EXCELLENT_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_GOOD_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MODERATE_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_POOR_VISIBILITY;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MIST;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_LIGHT;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_THICK;
const EnvironmentalConditions_Fog EnvironmentalConditions::FOG_DENSE;
const EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MIN;
const EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MAX;
const int EnvironmentalConditions::Fog_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor() {
  protobuf_osi_5fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fenvironment_2eproto::file_level_enum_descriptors[2];
}
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_UNKNOWN;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_OTHER;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL1;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL2;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL3;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL4;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL5;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL6;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL7;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL8;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL9;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MIN;
const EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MAX;
const int EnvironmentalConditions::AmbientIllumination_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EnvironmentalConditions_TimeOfDay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentalConditions_TimeOfDay::kSecondsSinceMidnightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fenvironment_2eproto::InitDefaultsEnvironmentalConditions_TimeOfDay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions.TimeOfDay)
}
EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seconds_since_midnight_ = from.seconds_since_midnight_;
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.TimeOfDay)
}

void EnvironmentalConditions_TimeOfDay::SharedCtor() {
  seconds_since_midnight_ = 0u;
  _cached_size_ = 0;
}

EnvironmentalConditions_TimeOfDay::~EnvironmentalConditions_TimeOfDay() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.TimeOfDay)
  SharedDtor();
}

void EnvironmentalConditions_TimeOfDay::SharedDtor() {
}

void EnvironmentalConditions_TimeOfDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentalConditions_TimeOfDay::descriptor() {
  ::protobuf_osi_5fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvironmentalConditions_TimeOfDay& EnvironmentalConditions_TimeOfDay::default_instance() {
  ::protobuf_osi_5fenvironment_2eproto::InitDefaultsEnvironmentalConditions_TimeOfDay();
  return *internal_default_instance();
}

EnvironmentalConditions_TimeOfDay* EnvironmentalConditions_TimeOfDay::New(::google::protobuf::Arena* arena) const {
  EnvironmentalConditions_TimeOfDay* n = new EnvironmentalConditions_TimeOfDay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvironmentalConditions_TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_since_midnight_ = 0u;
  _internal_metadata_.Clear();
}

bool EnvironmentalConditions_TimeOfDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions.TimeOfDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seconds_since_midnight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_since_midnight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions.TimeOfDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions.TimeOfDay)
  return false;
#undef DO_
}

void EnvironmentalConditions_TimeOfDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seconds_since_midnight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions.TimeOfDay)
}

::google::protobuf::uint8* EnvironmentalConditions_TimeOfDay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds_since_midnight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.TimeOfDay)
  return target;
}

size_t EnvironmentalConditions_TimeOfDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.TimeOfDay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seconds_since_midnight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_TimeOfDay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentalConditions_TimeOfDay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions.TimeOfDay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions.TimeOfDay)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds_since_midnight() != 0) {
    set_seconds_since_midnight(from.seconds_since_midnight());
  }
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_TimeOfDay::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_TimeOfDay::Swap(EnvironmentalConditions_TimeOfDay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentalConditions_TimeOfDay::InternalSwap(EnvironmentalConditions_TimeOfDay* other) {
  using std::swap;
  swap(seconds_since_midnight_, other->seconds_since_midnight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvironmentalConditions_TimeOfDay::GetMetadata() const {
  protobuf_osi_5fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnvironmentalConditions::InitAsDefaultInstance() {
  ::osi3::_EnvironmentalConditions_default_instance_._instance.get_mutable()->time_of_day_ = const_cast< ::osi3::EnvironmentalConditions_TimeOfDay*>(
      ::osi3::EnvironmentalConditions_TimeOfDay::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentalConditions::kAmbientIlluminationFieldNumber;
const int EnvironmentalConditions::kTimeOfDayFieldNumber;
const int EnvironmentalConditions::kUnixTimestampFieldNumber;
const int EnvironmentalConditions::kAtmosphericPressureFieldNumber;
const int EnvironmentalConditions::kTemperatureFieldNumber;
const int EnvironmentalConditions::kRelativeHumidityFieldNumber;
const int EnvironmentalConditions::kPrecipitationFieldNumber;
const int EnvironmentalConditions::kFogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentalConditions::EnvironmentalConditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fenvironment_2eproto::InitDefaultsEnvironmentalConditions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions)
}
EnvironmentalConditions::EnvironmentalConditions(const EnvironmentalConditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_of_day()) {
    time_of_day_ = new ::osi3::EnvironmentalConditions_TimeOfDay(*from.time_of_day_);
  } else {
    time_of_day_ = NULL;
  }
  ::memcpy(&atmospheric_pressure_, &from.atmospheric_pressure_,
    static_cast<size_t>(reinterpret_cast<char*>(&fog_) -
    reinterpret_cast<char*>(&atmospheric_pressure_)) + sizeof(fog_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions)
}

void EnvironmentalConditions::SharedCtor() {
  ::memset(&time_of_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fog_) -
      reinterpret_cast<char*>(&time_of_day_)) + sizeof(fog_));
  _cached_size_ = 0;
}

EnvironmentalConditions::~EnvironmentalConditions() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions)
  SharedDtor();
}

void EnvironmentalConditions::SharedDtor() {
  if (this != internal_default_instance()) delete time_of_day_;
}

void EnvironmentalConditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentalConditions::descriptor() {
  ::protobuf_osi_5fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fenvironment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvironmentalConditions& EnvironmentalConditions::default_instance() {
  ::protobuf_osi_5fenvironment_2eproto::InitDefaultsEnvironmentalConditions();
  return *internal_default_instance();
}

EnvironmentalConditions* EnvironmentalConditions::New(::google::protobuf::Arena* arena) const {
  EnvironmentalConditions* n = new EnvironmentalConditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvironmentalConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && time_of_day_ != NULL) {
    delete time_of_day_;
  }
  time_of_day_ = NULL;
  ::memset(&atmospheric_pressure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fog_) -
      reinterpret_cast<char*>(&atmospheric_pressure_)) + sizeof(fog_));
  _internal_metadata_.Clear();
}

bool EnvironmentalConditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ambient_illumination(static_cast< ::osi3::EnvironmentalConditions_AmbientIllumination >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_of_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double atmospheric_pressure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atmospheric_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double relative_humidity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_humidity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_precipitation(static_cast< ::osi3::EnvironmentalConditions_Precipitation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.Fog fog = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fog(static_cast< ::osi3::EnvironmentalConditions_Fog >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unix_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unix_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions)
  return false;
#undef DO_
}

void EnvironmentalConditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (this->ambient_illumination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ambient_illumination(), output);
  }

  // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (this->has_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_of_day_, output);
  }

  // double atmospheric_pressure = 3;
  if (this->atmospheric_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->atmospheric_pressure(), output);
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->temperature(), output);
  }

  // double relative_humidity = 5;
  if (this->relative_humidity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_humidity(), output);
  }

  // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (this->precipitation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->precipitation(), output);
  }

  // .osi3.EnvironmentalConditions.Fog fog = 7;
  if (this->fog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->fog(), output);
  }

  // int64 unix_timestamp = 8;
  if (this->unix_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->unix_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions)
}

::google::protobuf::uint8* EnvironmentalConditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (this->ambient_illumination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ambient_illumination(), target);
  }

  // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (this->has_time_of_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->time_of_day_, deterministic, target);
  }

  // double atmospheric_pressure = 3;
  if (this->atmospheric_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->atmospheric_pressure(), target);
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->temperature(), target);
  }

  // double relative_humidity = 5;
  if (this->relative_humidity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_humidity(), target);
  }

  // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (this->precipitation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->precipitation(), target);
  }

  // .osi3.EnvironmentalConditions.Fog fog = 7;
  if (this->fog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->fog(), target);
  }

  // int64 unix_timestamp = 8;
  if (this->unix_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->unix_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions)
  return target;
}

size_t EnvironmentalConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (this->has_time_of_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_of_day_);
  }

  // double atmospheric_pressure = 3;
  if (this->atmospheric_pressure() != 0) {
    total_size += 1 + 8;
  }

  // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (this->ambient_illumination() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ambient_illumination());
  }

  // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (this->precipitation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->precipitation());
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    total_size += 1 + 8;
  }

  // double relative_humidity = 5;
  if (this->relative_humidity() != 0) {
    total_size += 1 + 8;
  }

  // int64 unix_timestamp = 8;
  if (this->unix_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->unix_timestamp());
  }

  // .osi3.EnvironmentalConditions.Fog fog = 7;
  if (this->fog() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fog());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentalConditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvironmentalConditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions::MergeFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_of_day()) {
    mutable_time_of_day()->::osi3::EnvironmentalConditions_TimeOfDay::MergeFrom(from.time_of_day());
  }
  if (from.atmospheric_pressure() != 0) {
    set_atmospheric_pressure(from.atmospheric_pressure());
  }
  if (from.ambient_illumination() != 0) {
    set_ambient_illumination(from.ambient_illumination());
  }
  if (from.precipitation() != 0) {
    set_precipitation(from.precipitation());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.relative_humidity() != 0) {
    set_relative_humidity(from.relative_humidity());
  }
  if (from.unix_timestamp() != 0) {
    set_unix_timestamp(from.unix_timestamp());
  }
  if (from.fog() != 0) {
    set_fog(from.fog());
  }
}

void EnvironmentalConditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions::CopyFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions::IsInitialized() const {
  return true;
}

void EnvironmentalConditions::Swap(EnvironmentalConditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentalConditions::InternalSwap(EnvironmentalConditions* other) {
  using std::swap;
  swap(time_of_day_, other->time_of_day_);
  swap(atmospheric_pressure_, other->atmospheric_pressure_);
  swap(ambient_illumination_, other->ambient_illumination_);
  swap(precipitation_, other->precipitation_);
  swap(temperature_, other->temperature_);
  swap(relative_humidity_, other->relative_humidity_);
  swap(unix_timestamp_, other->unix_timestamp_);
  swap(fog_, other->fog_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvironmentalConditions::GetMetadata() const {
  protobuf_osi_5fenvironment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fenvironment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
