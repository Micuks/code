// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_groundtruth.proto

#include "osi_groundtruth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class GroundTruthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroundTruth>
      _instance;
} _GroundTruth_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5fgroundtruth_2eproto {
void InitDefaultsGroundTruthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fversion_2eproto::InitDefaultsInterfaceVersion();
  protobuf_osi_5fcommon_2eproto::InitDefaultsTimestamp();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fobject_2eproto::InitDefaultsStationaryObject();
  protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject();
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSign();
  protobuf_osi_5ftrafficlight_2eproto::InitDefaultsTrafficLight();
  protobuf_osi_5froadmarking_2eproto::InitDefaultsRoadMarking();
  protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary();
  protobuf_osi_5flane_2eproto::InitDefaultsLane();
  protobuf_osi_5foccupant_2eproto::InitDefaultsOccupant();
  protobuf_osi_5fenvironment_2eproto::InitDefaultsEnvironmentalConditions();
  {
    void* ptr = &::osi3::_GroundTruth_default_instance_;
    new (ptr) ::osi3::GroundTruth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::GroundTruth::InitAsDefaultInstance();
}

void InitDefaultsGroundTruth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGroundTruthImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, host_vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, stationary_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, moving_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, traffic_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, road_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, lane_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, occupant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, environmental_conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, proj_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::GroundTruth, map_reference_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::GroundTruth)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_GroundTruth_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_groundtruth.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025osi_groundtruth.proto\022\004osi3\032\021osi_versi"
      "on.proto\032\020osi_common.proto\032\025osi_environm"
      "ent.proto\032\025osi_trafficsign.proto\032\026osi_tr"
      "afficlight.proto\032\025osi_roadmarking.proto\032"
      "\016osi_lane.proto\032\020osi_object.proto\032\022osi_o"
      "ccupant.proto\"\312\004\n\013GroundTruth\022\'\n\007version"
      "\030\001 \001(\0132\026.osi3.InterfaceVersion\022\"\n\ttimest"
      "amp\030\002 \001(\0132\017.osi3.Timestamp\022)\n\017host_vehic"
      "le_id\030\003 \001(\0132\020.osi3.Identifier\0221\n\021station"
      "ary_object\030\004 \003(\0132\026.osi3.StationaryObject"
      "\022)\n\rmoving_object\030\005 \003(\0132\022.osi3.MovingObj"
      "ect\022\'\n\014traffic_sign\030\006 \003(\0132\021.osi3.Traffic"
      "Sign\022)\n\rtraffic_light\030\007 \003(\0132\022.osi3.Traff"
      "icLight\022\'\n\014road_marking\030\010 \003(\0132\021.osi3.Roa"
      "dMarking\022)\n\rlane_boundary\030\t \003(\0132\022.osi3.L"
      "aneBoundary\022\030\n\004lane\030\n \003(\0132\n.osi3.Lane\022 \n"
      "\010occupant\030\013 \003(\0132\016.osi3.Occupant\022\?\n\030envir"
      "onmental_conditions\030\014 \001(\0132\035.osi3.Environ"
      "mentalConditions\022\024\n\014country_code\030\r \001(\r\022\023"
      "\n\013proj_string\030\016 \001(\t\022\025\n\rmap_reference\030\017 \001"
      "(\tB\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 814);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_groundtruth.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fversion_2eproto::AddDescriptors();
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
  ::protobuf_osi_5fenvironment_2eproto::AddDescriptors();
  ::protobuf_osi_5ftrafficsign_2eproto::AddDescriptors();
  ::protobuf_osi_5ftrafficlight_2eproto::AddDescriptors();
  ::protobuf_osi_5froadmarking_2eproto::AddDescriptors();
  ::protobuf_osi_5flane_2eproto::AddDescriptors();
  ::protobuf_osi_5fobject_2eproto::AddDescriptors();
  ::protobuf_osi_5foccupant_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5fgroundtruth_2eproto
namespace osi3 {

// ===================================================================

void GroundTruth::InitAsDefaultInstance() {
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->host_vehicle_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->environmental_conditions_ = const_cast< ::osi3::EnvironmentalConditions*>(
      ::osi3::EnvironmentalConditions::internal_default_instance());
}
void GroundTruth::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void GroundTruth::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void GroundTruth::clear_host_vehicle_id() {
  if (GetArenaNoVirtual() == NULL && host_vehicle_id_ != NULL) {
    delete host_vehicle_id_;
  }
  host_vehicle_id_ = NULL;
}
void GroundTruth::clear_stationary_object() {
  stationary_object_.Clear();
}
void GroundTruth::clear_moving_object() {
  moving_object_.Clear();
}
void GroundTruth::clear_traffic_sign() {
  traffic_sign_.Clear();
}
void GroundTruth::clear_traffic_light() {
  traffic_light_.Clear();
}
void GroundTruth::clear_road_marking() {
  road_marking_.Clear();
}
void GroundTruth::clear_lane_boundary() {
  lane_boundary_.Clear();
}
void GroundTruth::clear_lane() {
  lane_.Clear();
}
void GroundTruth::clear_occupant() {
  occupant_.Clear();
}
void GroundTruth::clear_environmental_conditions() {
  if (GetArenaNoVirtual() == NULL && environmental_conditions_ != NULL) {
    delete environmental_conditions_;
  }
  environmental_conditions_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroundTruth::kVersionFieldNumber;
const int GroundTruth::kTimestampFieldNumber;
const int GroundTruth::kHostVehicleIdFieldNumber;
const int GroundTruth::kStationaryObjectFieldNumber;
const int GroundTruth::kMovingObjectFieldNumber;
const int GroundTruth::kTrafficSignFieldNumber;
const int GroundTruth::kTrafficLightFieldNumber;
const int GroundTruth::kRoadMarkingFieldNumber;
const int GroundTruth::kLaneBoundaryFieldNumber;
const int GroundTruth::kLaneFieldNumber;
const int GroundTruth::kOccupantFieldNumber;
const int GroundTruth::kEnvironmentalConditionsFieldNumber;
const int GroundTruth::kCountryCodeFieldNumber;
const int GroundTruth::kProjStringFieldNumber;
const int GroundTruth::kMapReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroundTruth::GroundTruth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fgroundtruth_2eproto::InitDefaultsGroundTruth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stationary_object_(from.stationary_object_),
      moving_object_(from.moving_object_),
      traffic_sign_(from.traffic_sign_),
      traffic_light_(from.traffic_light_),
      road_marking_(from.road_marking_),
      lane_boundary_(from.lane_boundary_),
      lane_(from.lane_),
      occupant_(from.occupant_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proj_string().size() > 0) {
    proj_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj_string_);
  }
  map_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_reference().size() > 0) {
    map_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_reference_);
  }
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_host_vehicle_id()) {
    host_vehicle_id_ = new ::osi3::Identifier(*from.host_vehicle_id_);
  } else {
    host_vehicle_id_ = NULL;
  }
  if (from.has_environmental_conditions()) {
    environmental_conditions_ = new ::osi3::EnvironmentalConditions(*from.environmental_conditions_);
  } else {
    environmental_conditions_ = NULL;
  }
  country_code_ = from.country_code_;
  // @@protoc_insertion_point(copy_constructor:osi3.GroundTruth)
}

void GroundTruth::SharedCtor() {
  proj_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_code_) -
      reinterpret_cast<char*>(&version_)) + sizeof(country_code_));
  _cached_size_ = 0;
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:osi3.GroundTruth)
  SharedDtor();
}

void GroundTruth::SharedDtor() {
  proj_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_id_;
  if (this != internal_default_instance()) delete environmental_conditions_;
}

void GroundTruth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundTruth::descriptor() {
  ::protobuf_osi_5fgroundtruth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fgroundtruth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroundTruth& GroundTruth::default_instance() {
  ::protobuf_osi_5fgroundtruth_2eproto::InitDefaultsGroundTruth();
  return *internal_default_instance();
}

GroundTruth* GroundTruth::New(::google::protobuf::Arena* arena) const {
  GroundTruth* n = new GroundTruth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  proj_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && host_vehicle_id_ != NULL) {
    delete host_vehicle_id_;
  }
  host_vehicle_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && environmental_conditions_ != NULL) {
    delete environmental_conditions_;
  }
  environmental_conditions_ = NULL;
  country_code_ = 0u;
  _internal_metadata_.Clear();
}

bool GroundTruth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.GroundTruth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier host_vehicle_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_host_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.StationaryObject stationary_object = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stationary_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.MovingObject moving_object = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_moving_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign traffic_sign = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficLight traffic_light = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RoadMarking road_marking = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_road_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LaneBoundary lane_boundary = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Lane lane = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Occupant occupant = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_occupant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions environmental_conditions = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_environmental_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 country_code = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proj_string = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proj_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proj_string().data(), static_cast<int>(this->proj_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "osi3.GroundTruth.proj_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map_reference = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_reference().data(), static_cast<int>(this->map_reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "osi3.GroundTruth.map_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.GroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.GroundTruth)
  return false;
#undef DO_
}

void GroundTruth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.GroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->version_, output);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // .osi3.Identifier host_vehicle_id = 3;
  if (this->has_host_vehicle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->host_vehicle_id_, output);
  }

  // repeated .osi3.StationaryObject stationary_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stationary_object(static_cast<int>(i)), output);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->moving_object(static_cast<int>(i)), output);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->traffic_sign(static_cast<int>(i)), output);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->traffic_light(static_cast<int>(i)), output);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->road_marking(static_cast<int>(i)), output);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->lane_boundary(static_cast<int>(i)), output);
  }

  // repeated .osi3.Lane lane = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lane(static_cast<int>(i)), output);
  }

  // repeated .osi3.Occupant occupant = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->occupant(static_cast<int>(i)), output);
  }

  // .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (this->has_environmental_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->environmental_conditions_, output);
  }

  // uint32 country_code = 13;
  if (this->country_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->country_code(), output);
  }

  // string proj_string = 14;
  if (this->proj_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proj_string().data(), static_cast<int>(this->proj_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.proj_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->proj_string(), output);
  }

  // string map_reference = 15;
  if (this->map_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_reference().data(), static_cast<int>(this->map_reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.map_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->map_reference(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.GroundTruth)
}

::google::protobuf::uint8* GroundTruth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->version_, deterministic, target);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->timestamp_, deterministic, target);
  }

  // .osi3.Identifier host_vehicle_id = 3;
  if (this->has_host_vehicle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->host_vehicle_id_, deterministic, target);
  }

  // repeated .osi3.StationaryObject stationary_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stationary_object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->moving_object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->traffic_sign(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->traffic_light(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->road_marking(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->lane_boundary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Lane lane = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->lane(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Occupant occupant = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->occupant(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (this->has_environmental_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->environmental_conditions_, deterministic, target);
  }

  // uint32 country_code = 13;
  if (this->country_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->country_code(), target);
  }

  // string proj_string = 14;
  if (this->proj_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proj_string().data(), static_cast<int>(this->proj_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.proj_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->proj_string(), target);
  }

  // string map_reference = 15;
  if (this->map_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_reference().data(), static_cast<int>(this->map_reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.map_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->map_reference(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GroundTruth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.StationaryObject stationary_object = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stationary_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stationary_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.MovingObject moving_object = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->moving_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->moving_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_light(static_cast<int>(i)));
    }
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->road_marking_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_marking(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_boundary(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Lane lane = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Occupant occupant = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->occupant_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->occupant(static_cast<int>(i)));
    }
  }

  // string proj_string = 14;
  if (this->proj_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proj_string());
  }

  // string map_reference = 15;
  if (this->map_reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_reference());
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->version_);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->timestamp_);
  }

  // .osi3.Identifier host_vehicle_id = 3;
  if (this->has_host_vehicle_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->host_vehicle_id_);
  }

  // .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (this->has_environmental_conditions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->environmental_conditions_);
  }

  // uint32 country_code = 13;
  if (this->country_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->country_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundTruth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroundTruth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.GroundTruth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  if (from.proj_string().size() > 0) {

    proj_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj_string_);
  }
  if (from.map_reference().size() > 0) {

    map_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_reference_);
  }
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_host_vehicle_id()) {
    mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(from.host_vehicle_id());
  }
  if (from.has_environmental_conditions()) {
    mutable_environmental_conditions()->::osi3::EnvironmentalConditions::MergeFrom(from.environmental_conditions());
  }
  if (from.country_code() != 0) {
    set_country_code(from.country_code());
  }
}

void GroundTruth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::Swap(GroundTruth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  stationary_object_.InternalSwap(&other->stationary_object_);
  moving_object_.InternalSwap(&other->moving_object_);
  traffic_sign_.InternalSwap(&other->traffic_sign_);
  traffic_light_.InternalSwap(&other->traffic_light_);
  road_marking_.InternalSwap(&other->road_marking_);
  lane_boundary_.InternalSwap(&other->lane_boundary_);
  lane_.InternalSwap(&other->lane_);
  occupant_.InternalSwap(&other->occupant_);
  proj_string_.Swap(&other->proj_string_);
  map_reference_.Swap(&other->map_reference_);
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(host_vehicle_id_, other->host_vehicle_id_);
  swap(environmental_conditions_, other->environmental_conditions_);
  swap(country_code_, other->country_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroundTruth::GetMetadata() const {
  protobuf_osi_5fgroundtruth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fgroundtruth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
