// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorspecific.proto

#include "osi_sensorspecific.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class RadarSpecificObjectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarSpecificObjectData>
      _instance;
} _RadarSpecificObjectData_default_instance_;
class LidarSpecificObjectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarSpecificObjectData>
      _instance;
} _LidarSpecificObjectData_default_instance_;
class CameraSpecificObjectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraSpecificObjectData>
      _instance;
} _CameraSpecificObjectData_default_instance_;
class UltrasonicSpecificObjectData_SignalwayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UltrasonicSpecificObjectData_Signalway>
      _instance;
} _UltrasonicSpecificObjectData_Signalway_default_instance_;
class UltrasonicSpecificObjectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UltrasonicSpecificObjectData>
      _instance;
} _UltrasonicSpecificObjectData_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5fsensorspecific_2eproto {
void InitDefaultsRadarSpecificObjectDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_RadarSpecificObjectData_default_instance_;
    new (ptr) ::osi3::RadarSpecificObjectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarSpecificObjectData::InitAsDefaultInstance();
}

void InitDefaultsRadarSpecificObjectData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadarSpecificObjectDataImpl);
}

void InitDefaultsLidarSpecificObjectDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_LidarSpecificObjectData_default_instance_;
    new (ptr) ::osi3::LidarSpecificObjectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LidarSpecificObjectData::InitAsDefaultInstance();
}

void InitDefaultsLidarSpecificObjectData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarSpecificObjectDataImpl);
}

void InitDefaultsCameraSpecificObjectDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_CameraSpecificObjectData_default_instance_;
    new (ptr) ::osi3::CameraSpecificObjectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraSpecificObjectData::InitAsDefaultInstance();
}

void InitDefaultsCameraSpecificObjectData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraSpecificObjectDataImpl);
}

void InitDefaultsUltrasonicSpecificObjectData_SignalwayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_;
    new (ptr) ::osi3::UltrasonicSpecificObjectData_Signalway();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicSpecificObjectData_Signalway::InitAsDefaultInstance();
}

void InitDefaultsUltrasonicSpecificObjectData_Signalway() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUltrasonicSpecificObjectData_SignalwayImpl);
}

void InitDefaultsUltrasonicSpecificObjectDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fsensorspecific_2eproto::InitDefaultsUltrasonicSpecificObjectData_Signalway();
  {
    void* ptr = &::osi3::_UltrasonicSpecificObjectData_default_instance_;
    new (ptr) ::osi3::UltrasonicSpecificObjectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicSpecificObjectData::InitAsDefaultInstance();
}

void InitDefaultsUltrasonicSpecificObjectData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUltrasonicSpecificObjectDataImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RadarSpecificObjectData, rcs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LidarSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::CameraSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData_Signalway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData_Signalway, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData_Signalway, receiver_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, maximum_measurement_distance_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, trilateration_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, trend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, signalway_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::RadarSpecificObjectData)},
  { 6, -1, sizeof(::osi3::LidarSpecificObjectData)},
  { 11, -1, sizeof(::osi3::CameraSpecificObjectData)},
  { 16, -1, sizeof(::osi3::UltrasonicSpecificObjectData_Signalway)},
  { 23, -1, sizeof(::osi3::UltrasonicSpecificObjectData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_RadarSpecificObjectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_LidarSpecificObjectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_CameraSpecificObjectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_UltrasonicSpecificObjectData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_sensorspecific.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030osi_sensorspecific.proto\022\004osi3\032\020osi_co"
      "mmon.proto\"&\n\027RadarSpecificObjectData\022\013\n"
      "\003rcs\030\001 \001(\001\"\031\n\027LidarSpecificObjectData\"\032\n"
      "\030CameraSpecificObjectData\"\303\005\n\034Ultrasonic"
      "SpecificObjectData\022+\n#maximum_measuremen"
      "t_distance_sensor\030\001 \001(\001\022\023\n\013probability\030\002"
      " \001(\001\022T\n\024trilateration_status\030\003 \001(\01626.osi"
      "3.UltrasonicSpecificObjectData.Trilatera"
      "tionStatus\0227\n\005trend\030\004 \001(\0162(.osi3.Ultraso"
      "nicSpecificObjectData.Trend\022\?\n\tsignalway"
      "\030\005 \003(\0132,.osi3.UltrasonicSpecificObjectDa"
      "ta.Signalway\032W\n\tSignalway\022#\n\tsender_id\030\001"
      " \001(\0132\020.osi3.Identifier\022%\n\013receiver_id\030\002 "
      "\001(\0132\020.osi3.Identifier\"\251\001\n\023TrilaterationS"
      "tatus\022 \n\034TRILATERATION_STATUS_UNKNOWN\020\000\022"
      "\036\n\032TRILATERATION_STATUS_OTHER\020\001\022)\n%TRILA"
      "TERATION_STATUS_NOT_TRILATERATED\020\002\022%\n!TR"
      "ILATERATION_STATUS_TRILATERATED\020\003\"\213\001\n\005Tr"
      "end\022\021\n\rTREND_UNKNOWN\020\000\022\017\n\013TREND_OTHER\020\001\022"
      "\036\n\032TREND_CONSTANT_APPROACHING\020\002\022\022\n\016TREND"
      "_CONSTANT\020\003\022\025\n\021TREND_APPROACHING\020\004\022\023\n\017TR"
      "END_DEPARTING\020\005B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_sensorspecific.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5fsensorspecific_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* UltrasonicSpecificObjectData_TrilaterationStatus_descriptor() {
  protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fsensorspecific_2eproto::file_level_enum_descriptors[0];
}
bool UltrasonicSpecificObjectData_TrilaterationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_UNKNOWN;
const UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_OTHER;
const UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_NOT_TRILATERATED;
const UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_TRILATERATED;
const UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TrilaterationStatus_MIN;
const UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TrilaterationStatus_MAX;
const int UltrasonicSpecificObjectData::TrilaterationStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UltrasonicSpecificObjectData_Trend_descriptor() {
  protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fsensorspecific_2eproto::file_level_enum_descriptors[1];
}
bool UltrasonicSpecificObjectData_Trend_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_UNKNOWN;
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_OTHER;
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_CONSTANT_APPROACHING;
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_CONSTANT;
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_APPROACHING;
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_DEPARTING;
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::Trend_MIN;
const UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::Trend_MAX;
const int UltrasonicSpecificObjectData::Trend_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RadarSpecificObjectData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarSpecificObjectData::kRcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarSpecificObjectData::RadarSpecificObjectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsRadarSpecificObjectData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSpecificObjectData)
}
RadarSpecificObjectData::RadarSpecificObjectData(const RadarSpecificObjectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rcs_ = from.rcs_;
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSpecificObjectData)
}

void RadarSpecificObjectData::SharedCtor() {
  rcs_ = 0;
  _cached_size_ = 0;
}

RadarSpecificObjectData::~RadarSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.RadarSpecificObjectData)
  SharedDtor();
}

void RadarSpecificObjectData::SharedDtor() {
}

void RadarSpecificObjectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarSpecificObjectData::descriptor() {
  ::protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarSpecificObjectData& RadarSpecificObjectData::default_instance() {
  ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsRadarSpecificObjectData();
  return *internal_default_instance();
}

RadarSpecificObjectData* RadarSpecificObjectData::New(::google::protobuf::Arena* arena) const {
  RadarSpecificObjectData* n = new RadarSpecificObjectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rcs_ = 0;
  _internal_metadata_.Clear();
}

bool RadarSpecificObjectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSpecificObjectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double rcs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSpecificObjectData)
  return false;
#undef DO_
}

void RadarSpecificObjectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rcs = 1;
  if (this->rcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rcs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSpecificObjectData)
}

::google::protobuf::uint8* RadarSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rcs = 1;
  if (this->rcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rcs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSpecificObjectData)
  return target;
}

size_t RadarSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSpecificObjectData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double rcs = 1;
  if (this->rcs() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarSpecificObjectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarSpecificObjectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarSpecificObjectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSpecificObjectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSpecificObjectData)
    MergeFrom(*source);
  }
}

void RadarSpecificObjectData::MergeFrom(const RadarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rcs() != 0) {
    set_rcs(from.rcs());
  }
}

void RadarSpecificObjectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSpecificObjectData::CopyFrom(const RadarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSpecificObjectData::IsInitialized() const {
  return true;
}

void RadarSpecificObjectData::Swap(RadarSpecificObjectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarSpecificObjectData::InternalSwap(RadarSpecificObjectData* other) {
  using std::swap;
  swap(rcs_, other->rcs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarSpecificObjectData::GetMetadata() const {
  protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarSpecificObjectData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarSpecificObjectData::LidarSpecificObjectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsLidarSpecificObjectData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarSpecificObjectData)
}
LidarSpecificObjectData::LidarSpecificObjectData(const LidarSpecificObjectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSpecificObjectData)
}

void LidarSpecificObjectData::SharedCtor() {
  _cached_size_ = 0;
}

LidarSpecificObjectData::~LidarSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.LidarSpecificObjectData)
  SharedDtor();
}

void LidarSpecificObjectData::SharedDtor() {
}

void LidarSpecificObjectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarSpecificObjectData::descriptor() {
  ::protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarSpecificObjectData& LidarSpecificObjectData::default_instance() {
  ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsLidarSpecificObjectData();
  return *internal_default_instance();
}

LidarSpecificObjectData* LidarSpecificObjectData::New(::google::protobuf::Arena* arena) const {
  LidarSpecificObjectData* n = new LidarSpecificObjectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool LidarSpecificObjectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarSpecificObjectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarSpecificObjectData)
  return false;
#undef DO_
}

void LidarSpecificObjectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarSpecificObjectData)
}

::google::protobuf::uint8* LidarSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSpecificObjectData)
  return target;
}

size_t LidarSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSpecificObjectData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarSpecificObjectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarSpecificObjectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarSpecificObjectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarSpecificObjectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarSpecificObjectData)
    MergeFrom(*source);
  }
}

void LidarSpecificObjectData::MergeFrom(const LidarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LidarSpecificObjectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarSpecificObjectData::CopyFrom(const LidarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSpecificObjectData::IsInitialized() const {
  return true;
}

void LidarSpecificObjectData::Swap(LidarSpecificObjectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarSpecificObjectData::InternalSwap(LidarSpecificObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarSpecificObjectData::GetMetadata() const {
  protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraSpecificObjectData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSpecificObjectData::CameraSpecificObjectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsCameraSpecificObjectData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraSpecificObjectData)
}
CameraSpecificObjectData::CameraSpecificObjectData(const CameraSpecificObjectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.CameraSpecificObjectData)
}

void CameraSpecificObjectData::SharedCtor() {
  _cached_size_ = 0;
}

CameraSpecificObjectData::~CameraSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.CameraSpecificObjectData)
  SharedDtor();
}

void CameraSpecificObjectData::SharedDtor() {
}

void CameraSpecificObjectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSpecificObjectData::descriptor() {
  ::protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraSpecificObjectData& CameraSpecificObjectData::default_instance() {
  ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsCameraSpecificObjectData();
  return *internal_default_instance();
}

CameraSpecificObjectData* CameraSpecificObjectData::New(::google::protobuf::Arena* arena) const {
  CameraSpecificObjectData* n = new CameraSpecificObjectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CameraSpecificObjectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraSpecificObjectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraSpecificObjectData)
  return false;
#undef DO_
}

void CameraSpecificObjectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraSpecificObjectData)
}

::google::protobuf::uint8* CameraSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraSpecificObjectData)
  return target;
}

size_t CameraSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraSpecificObjectData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSpecificObjectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSpecificObjectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSpecificObjectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraSpecificObjectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraSpecificObjectData)
    MergeFrom(*source);
  }
}

void CameraSpecificObjectData::MergeFrom(const CameraSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CameraSpecificObjectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSpecificObjectData::CopyFrom(const CameraSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSpecificObjectData::IsInitialized() const {
  return true;
}

void CameraSpecificObjectData::Swap(CameraSpecificObjectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSpecificObjectData::InternalSwap(CameraSpecificObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSpecificObjectData::GetMetadata() const {
  protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UltrasonicSpecificObjectData_Signalway::InitAsDefaultInstance() {
  ::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_._instance.get_mutable()->sender_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_._instance.get_mutable()->receiver_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
void UltrasonicSpecificObjectData_Signalway::clear_sender_id() {
  if (GetArenaNoVirtual() == NULL && sender_id_ != NULL) {
    delete sender_id_;
  }
  sender_id_ = NULL;
}
void UltrasonicSpecificObjectData_Signalway::clear_receiver_id() {
  if (GetArenaNoVirtual() == NULL && receiver_id_ != NULL) {
    delete receiver_id_;
  }
  receiver_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicSpecificObjectData_Signalway::kSenderIdFieldNumber;
const int UltrasonicSpecificObjectData_Signalway::kReceiverIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicSpecificObjectData_Signalway::UltrasonicSpecificObjectData_Signalway()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsUltrasonicSpecificObjectData_Signalway();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicSpecificObjectData.Signalway)
}
UltrasonicSpecificObjectData_Signalway::UltrasonicSpecificObjectData_Signalway(const UltrasonicSpecificObjectData_Signalway& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sender_id()) {
    sender_id_ = new ::osi3::Identifier(*from.sender_id_);
  } else {
    sender_id_ = NULL;
  }
  if (from.has_receiver_id()) {
    receiver_id_ = new ::osi3::Identifier(*from.receiver_id_);
  } else {
    receiver_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSpecificObjectData.Signalway)
}

void UltrasonicSpecificObjectData_Signalway::SharedCtor() {
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
  _cached_size_ = 0;
}

UltrasonicSpecificObjectData_Signalway::~UltrasonicSpecificObjectData_Signalway() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSpecificObjectData.Signalway)
  SharedDtor();
}

void UltrasonicSpecificObjectData_Signalway::SharedDtor() {
  if (this != internal_default_instance()) delete sender_id_;
  if (this != internal_default_instance()) delete receiver_id_;
}

void UltrasonicSpecificObjectData_Signalway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicSpecificObjectData_Signalway::descriptor() {
  ::protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UltrasonicSpecificObjectData_Signalway& UltrasonicSpecificObjectData_Signalway::default_instance() {
  ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsUltrasonicSpecificObjectData_Signalway();
  return *internal_default_instance();
}

UltrasonicSpecificObjectData_Signalway* UltrasonicSpecificObjectData_Signalway::New(::google::protobuf::Arena* arena) const {
  UltrasonicSpecificObjectData_Signalway* n = new UltrasonicSpecificObjectData_Signalway;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicSpecificObjectData_Signalway::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSpecificObjectData.Signalway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sender_id_ != NULL) {
    delete sender_id_;
  }
  sender_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && receiver_id_ != NULL) {
    delete receiver_id_;
  }
  receiver_id_ = NULL;
  _internal_metadata_.Clear();
}

bool UltrasonicSpecificObjectData_Signalway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicSpecificObjectData.Signalway)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier sender_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sender_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier receiver_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicSpecificObjectData.Signalway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicSpecificObjectData.Signalway)
  return false;
#undef DO_
}

void UltrasonicSpecificObjectData_Signalway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicSpecificObjectData.Signalway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sender_id = 1;
  if (this->has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sender_id_, output);
  }

  // .osi3.Identifier receiver_id = 2;
  if (this->has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->receiver_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicSpecificObjectData.Signalway)
}

::google::protobuf::uint8* UltrasonicSpecificObjectData_Signalway::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSpecificObjectData.Signalway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sender_id = 1;
  if (this->has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sender_id_, deterministic, target);
  }

  // .osi3.Identifier receiver_id = 2;
  if (this->has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->receiver_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSpecificObjectData.Signalway)
  return target;
}

size_t UltrasonicSpecificObjectData_Signalway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSpecificObjectData.Signalway)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier sender_id = 1;
  if (this->has_sender_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sender_id_);
  }

  // .osi3.Identifier receiver_id = 2;
  if (this->has_receiver_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->receiver_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicSpecificObjectData_Signalway::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicSpecificObjectData_Signalway* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicSpecificObjectData_Signalway>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicSpecificObjectData.Signalway)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicSpecificObjectData.Signalway)
    MergeFrom(*source);
  }
}

void UltrasonicSpecificObjectData_Signalway::MergeFrom(const UltrasonicSpecificObjectData_Signalway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sender_id()) {
    mutable_sender_id()->::osi3::Identifier::MergeFrom(from.sender_id());
  }
  if (from.has_receiver_id()) {
    mutable_receiver_id()->::osi3::Identifier::MergeFrom(from.receiver_id());
  }
}

void UltrasonicSpecificObjectData_Signalway::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicSpecificObjectData_Signalway::CopyFrom(const UltrasonicSpecificObjectData_Signalway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSpecificObjectData_Signalway::IsInitialized() const {
  return true;
}

void UltrasonicSpecificObjectData_Signalway::Swap(UltrasonicSpecificObjectData_Signalway* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicSpecificObjectData_Signalway::InternalSwap(UltrasonicSpecificObjectData_Signalway* other) {
  using std::swap;
  swap(sender_id_, other->sender_id_);
  swap(receiver_id_, other->receiver_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicSpecificObjectData_Signalway::GetMetadata() const {
  protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UltrasonicSpecificObjectData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UltrasonicSpecificObjectData::kMaximumMeasurementDistanceSensorFieldNumber;
const int UltrasonicSpecificObjectData::kProbabilityFieldNumber;
const int UltrasonicSpecificObjectData::kTrilaterationStatusFieldNumber;
const int UltrasonicSpecificObjectData::kTrendFieldNumber;
const int UltrasonicSpecificObjectData::kSignalwayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UltrasonicSpecificObjectData::UltrasonicSpecificObjectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsUltrasonicSpecificObjectData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicSpecificObjectData)
}
UltrasonicSpecificObjectData::UltrasonicSpecificObjectData(const UltrasonicSpecificObjectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signalway_(from.signalway_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maximum_measurement_distance_sensor_, &from.maximum_measurement_distance_sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&trend_) -
    reinterpret_cast<char*>(&maximum_measurement_distance_sensor_)) + sizeof(trend_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSpecificObjectData)
}

void UltrasonicSpecificObjectData::SharedCtor() {
  ::memset(&maximum_measurement_distance_sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trend_) -
      reinterpret_cast<char*>(&maximum_measurement_distance_sensor_)) + sizeof(trend_));
  _cached_size_ = 0;
}

UltrasonicSpecificObjectData::~UltrasonicSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSpecificObjectData)
  SharedDtor();
}

void UltrasonicSpecificObjectData::SharedDtor() {
}

void UltrasonicSpecificObjectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltrasonicSpecificObjectData::descriptor() {
  ::protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UltrasonicSpecificObjectData& UltrasonicSpecificObjectData::default_instance() {
  ::protobuf_osi_5fsensorspecific_2eproto::InitDefaultsUltrasonicSpecificObjectData();
  return *internal_default_instance();
}

UltrasonicSpecificObjectData* UltrasonicSpecificObjectData::New(::google::protobuf::Arena* arena) const {
  UltrasonicSpecificObjectData* n = new UltrasonicSpecificObjectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UltrasonicSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalway_.Clear();
  ::memset(&maximum_measurement_distance_sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trend_) -
      reinterpret_cast<char*>(&maximum_measurement_distance_sensor_)) + sizeof(trend_));
  _internal_metadata_.Clear();
}

bool UltrasonicSpecificObjectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicSpecificObjectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double maximum_measurement_distance_sensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_measurement_distance_sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trilateration_status(static_cast< ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trend(static_cast< ::osi3::UltrasonicSpecificObjectData_Trend >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_signalway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicSpecificObjectData)
  return false;
#undef DO_
}

void UltrasonicSpecificObjectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double maximum_measurement_distance_sensor = 1;
  if (this->maximum_measurement_distance_sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->maximum_measurement_distance_sensor(), output);
  }

  // double probability = 2;
  if (this->probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->probability(), output);
  }

  // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
  if (this->trilateration_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trilateration_status(), output);
  }

  // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
  if (this->trend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->trend(), output);
  }

  // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalway_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signalway(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicSpecificObjectData)
}

::google::protobuf::uint8* UltrasonicSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSpecificObjectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double maximum_measurement_distance_sensor = 1;
  if (this->maximum_measurement_distance_sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->maximum_measurement_distance_sensor(), target);
  }

  // double probability = 2;
  if (this->probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->probability(), target);
  }

  // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
  if (this->trilateration_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->trilateration_status(), target);
  }

  // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
  if (this->trend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->trend(), target);
  }

  // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalway_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->signalway(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSpecificObjectData)
  return target;
}

size_t UltrasonicSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSpecificObjectData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->signalway_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signalway(static_cast<int>(i)));
    }
  }

  // double maximum_measurement_distance_sensor = 1;
  if (this->maximum_measurement_distance_sensor() != 0) {
    total_size += 1 + 8;
  }

  // double probability = 2;
  if (this->probability() != 0) {
    total_size += 1 + 8;
  }

  // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
  if (this->trilateration_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trilateration_status());
  }

  // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
  if (this->trend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trend());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltrasonicSpecificObjectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicSpecificObjectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UltrasonicSpecificObjectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicSpecificObjectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicSpecificObjectData)
    MergeFrom(*source);
  }
}

void UltrasonicSpecificObjectData::MergeFrom(const UltrasonicSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalway_.MergeFrom(from.signalway_);
  if (from.maximum_measurement_distance_sensor() != 0) {
    set_maximum_measurement_distance_sensor(from.maximum_measurement_distance_sensor());
  }
  if (from.probability() != 0) {
    set_probability(from.probability());
  }
  if (from.trilateration_status() != 0) {
    set_trilateration_status(from.trilateration_status());
  }
  if (from.trend() != 0) {
    set_trend(from.trend());
  }
}

void UltrasonicSpecificObjectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicSpecificObjectData::CopyFrom(const UltrasonicSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSpecificObjectData::IsInitialized() const {
  return true;
}

void UltrasonicSpecificObjectData::Swap(UltrasonicSpecificObjectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UltrasonicSpecificObjectData::InternalSwap(UltrasonicSpecificObjectData* other) {
  using std::swap;
  signalway_.InternalSwap(&other->signalway_);
  swap(maximum_measurement_distance_sensor_, other->maximum_measurement_distance_sensor_);
  swap(probability_, other->probability_);
  swap(trilateration_status_, other->trilateration_status_);
  swap(trend_, other->trend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UltrasonicSpecificObjectData::GetMetadata() const {
  protobuf_osi_5fsensorspecific_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fsensorspecific_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
