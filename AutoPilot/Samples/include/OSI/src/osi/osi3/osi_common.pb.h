// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_common.proto

#ifndef PROTOBUF_osi_5fcommon_2eproto__INCLUDED
#define PROTOBUF_osi_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_osi_5fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVector3dImpl();
void InitDefaultsVector3d();
void InitDefaultsVector2dImpl();
void InitDefaultsVector2d();
void InitDefaultsTimestampImpl();
void InitDefaultsTimestamp();
void InitDefaultsDimension3dImpl();
void InitDefaultsDimension3d();
void InitDefaultsOrientation3dImpl();
void InitDefaultsOrientation3d();
void InitDefaultsIdentifierImpl();
void InitDefaultsIdentifier();
void InitDefaultsMountingPositionImpl();
void InitDefaultsMountingPosition();
void InitDefaultsSpherical3dImpl();
void InitDefaultsSpherical3d();
void InitDefaultsBaseStationaryImpl();
void InitDefaultsBaseStationary();
void InitDefaultsBaseMovingImpl();
void InitDefaultsBaseMoving();
inline void InitDefaults() {
  InitDefaultsVector3d();
  InitDefaultsVector2d();
  InitDefaultsTimestamp();
  InitDefaultsDimension3d();
  InitDefaultsOrientation3d();
  InitDefaultsIdentifier();
  InitDefaultsMountingPosition();
  InitDefaultsSpherical3d();
  InitDefaultsBaseStationary();
  InitDefaultsBaseMoving();
}
}  // namespace protobuf_osi_5fcommon_2eproto
namespace osi3 {
class BaseMoving;
class BaseMovingDefaultTypeInternal;
extern BaseMovingDefaultTypeInternal _BaseMoving_default_instance_;
class BaseStationary;
class BaseStationaryDefaultTypeInternal;
extern BaseStationaryDefaultTypeInternal _BaseStationary_default_instance_;
class Dimension3d;
class Dimension3dDefaultTypeInternal;
extern Dimension3dDefaultTypeInternal _Dimension3d_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class MountingPosition;
class MountingPositionDefaultTypeInternal;
extern MountingPositionDefaultTypeInternal _MountingPosition_default_instance_;
class Orientation3d;
class Orientation3dDefaultTypeInternal;
extern Orientation3dDefaultTypeInternal _Orientation3d_default_instance_;
class Spherical3d;
class Spherical3dDefaultTypeInternal;
extern Spherical3dDefaultTypeInternal _Spherical3d_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class Vector2d;
class Vector2dDefaultTypeInternal;
extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
class Vector3d;
class Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
}  // namespace osi3
namespace osi3 {

// ===================================================================

class Vector3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Vector3d) */ {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vector3d* other);
  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:osi3.Vector3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsVector3dImpl();
};
// -------------------------------------------------------------------

class Vector2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Vector2d) */ {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2d(Vector2d&& from) noexcept
    : Vector2d() {
    *this = ::std::move(from);
  }

  inline Vector2d& operator=(Vector2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2d* internal_default_instance() {
    return reinterpret_cast<const Vector2d*>(
               &_Vector2d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Vector2d* other);
  friend void swap(Vector2d& a, Vector2d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2d* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:osi3.Vector2d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsVector2dImpl();
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Timestamp* other);
  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const PROTOBUF_FINAL { return New(NULL); }

  Timestamp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Timestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 seconds = 1;
  void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  ::google::protobuf::int64 seconds() const;
  void set_seconds(::google::protobuf::int64 value);

  // uint32 nanos = 2;
  void clear_nanos();
  static const int kNanosFieldNumber = 2;
  ::google::protobuf::uint32 nanos() const;
  void set_nanos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:osi3.Timestamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 seconds_;
  ::google::protobuf::uint32 nanos_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsTimestampImpl();
};
// -------------------------------------------------------------------

class Dimension3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Dimension3d) */ {
 public:
  Dimension3d();
  virtual ~Dimension3d();

  Dimension3d(const Dimension3d& from);

  inline Dimension3d& operator=(const Dimension3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dimension3d(Dimension3d&& from) noexcept
    : Dimension3d() {
    *this = ::std::move(from);
  }

  inline Dimension3d& operator=(Dimension3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dimension3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dimension3d* internal_default_instance() {
    return reinterpret_cast<const Dimension3d*>(
               &_Dimension3d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Dimension3d* other);
  friend void swap(Dimension3d& a, Dimension3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dimension3d* New() const PROTOBUF_FINAL { return New(NULL); }

  Dimension3d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Dimension3d& from);
  void MergeFrom(const Dimension3d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Dimension3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  double length() const;
  void set_length(double value);

  // double width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  double width() const;
  void set_width(double value);

  // double height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  double height() const;
  void set_height(double value);

  // @@protoc_insertion_point(class_scope:osi3.Dimension3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double length_;
  double width_;
  double height_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsDimension3dImpl();
};
// -------------------------------------------------------------------

class Orientation3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Orientation3d) */ {
 public:
  Orientation3d();
  virtual ~Orientation3d();

  Orientation3d(const Orientation3d& from);

  inline Orientation3d& operator=(const Orientation3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Orientation3d(Orientation3d&& from) noexcept
    : Orientation3d() {
    *this = ::std::move(from);
  }

  inline Orientation3d& operator=(Orientation3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Orientation3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orientation3d* internal_default_instance() {
    return reinterpret_cast<const Orientation3d*>(
               &_Orientation3d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Orientation3d* other);
  friend void swap(Orientation3d& a, Orientation3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Orientation3d* New() const PROTOBUF_FINAL { return New(NULL); }

  Orientation3d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Orientation3d& from);
  void MergeFrom(const Orientation3d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Orientation3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double roll = 1;
  void clear_roll();
  static const int kRollFieldNumber = 1;
  double roll() const;
  void set_roll(double value);

  // double pitch = 2;
  void clear_pitch();
  static const int kPitchFieldNumber = 2;
  double pitch() const;
  void set_pitch(double value);

  // double yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:osi3.Orientation3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double roll_;
  double pitch_;
  double yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsOrientation3dImpl();
};
// -------------------------------------------------------------------

class Identifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Identifier) */ {
 public:
  Identifier();
  virtual ~Identifier();

  Identifier(const Identifier& from);

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Identifier* other);
  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const PROTOBUF_FINAL { return New(NULL); }

  Identifier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Identifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:osi3.Identifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifierImpl();
};
// -------------------------------------------------------------------

class MountingPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.MountingPosition) */ {
 public:
  MountingPosition();
  virtual ~MountingPosition();

  MountingPosition(const MountingPosition& from);

  inline MountingPosition& operator=(const MountingPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MountingPosition(MountingPosition&& from) noexcept
    : MountingPosition() {
    *this = ::std::move(from);
  }

  inline MountingPosition& operator=(MountingPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountingPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MountingPosition* internal_default_instance() {
    return reinterpret_cast<const MountingPosition*>(
               &_MountingPosition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MountingPosition* other);
  friend void swap(MountingPosition& a, MountingPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MountingPosition* New() const PROTOBUF_FINAL { return New(NULL); }

  MountingPosition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MountingPosition& from);
  void MergeFrom(const MountingPosition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MountingPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .osi3.Vector3d position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // .osi3.Orientation3d orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);

  // @@protoc_insertion_point(class_scope:osi3.MountingPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsMountingPositionImpl();
};
// -------------------------------------------------------------------

class Spherical3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.Spherical3d) */ {
 public:
  Spherical3d();
  virtual ~Spherical3d();

  Spherical3d(const Spherical3d& from);

  inline Spherical3d& operator=(const Spherical3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Spherical3d(Spherical3d&& from) noexcept
    : Spherical3d() {
    *this = ::std::move(from);
  }

  inline Spherical3d& operator=(Spherical3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Spherical3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Spherical3d* internal_default_instance() {
    return reinterpret_cast<const Spherical3d*>(
               &_Spherical3d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Spherical3d* other);
  friend void swap(Spherical3d& a, Spherical3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Spherical3d* New() const PROTOBUF_FINAL { return New(NULL); }

  Spherical3d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Spherical3d& from);
  void MergeFrom(const Spherical3d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Spherical3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double distance = 1;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  double distance() const;
  void set_distance(double value);

  // double azimuth = 2;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 2;
  double azimuth() const;
  void set_azimuth(double value);

  // double elevation = 3;
  void clear_elevation();
  static const int kElevationFieldNumber = 3;
  double elevation() const;
  void set_elevation(double value);

  // @@protoc_insertion_point(class_scope:osi3.Spherical3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double distance_;
  double azimuth_;
  double elevation_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsSpherical3dImpl();
};
// -------------------------------------------------------------------

class BaseStationary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.BaseStationary) */ {
 public:
  BaseStationary();
  virtual ~BaseStationary();

  BaseStationary(const BaseStationary& from);

  inline BaseStationary& operator=(const BaseStationary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseStationary(BaseStationary&& from) noexcept
    : BaseStationary() {
    *this = ::std::move(from);
  }

  inline BaseStationary& operator=(BaseStationary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseStationary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseStationary* internal_default_instance() {
    return reinterpret_cast<const BaseStationary*>(
               &_BaseStationary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BaseStationary* other);
  friend void swap(BaseStationary& a, BaseStationary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseStationary* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseStationary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseStationary& from);
  void MergeFrom(const BaseStationary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseStationary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .osi3.Vector2d base_polygon = 4;
  int base_polygon_size() const;
  void clear_base_polygon();
  static const int kBasePolygonFieldNumber = 4;
  const ::osi3::Vector2d& base_polygon(int index) const;
  ::osi3::Vector2d* mutable_base_polygon(int index);
  ::osi3::Vector2d* add_base_polygon();
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
      mutable_base_polygon();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
      base_polygon() const;

  // .osi3.Dimension3d dimension = 1;
  bool has_dimension() const;
  void clear_dimension();
  static const int kDimensionFieldNumber = 1;
  const ::osi3::Dimension3d& dimension() const;
  ::osi3::Dimension3d* release_dimension();
  ::osi3::Dimension3d* mutable_dimension();
  void set_allocated_dimension(::osi3::Dimension3d* dimension);

  // .osi3.Vector3d position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);

  // @@protoc_insertion_point(class_scope:osi3.BaseStationary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d > base_polygon_;
  ::osi3::Dimension3d* dimension_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsBaseStationaryImpl();
};
// -------------------------------------------------------------------

class BaseMoving : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:osi3.BaseMoving) */ {
 public:
  BaseMoving();
  virtual ~BaseMoving();

  BaseMoving(const BaseMoving& from);

  inline BaseMoving& operator=(const BaseMoving& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseMoving(BaseMoving&& from) noexcept
    : BaseMoving() {
    *this = ::std::move(from);
  }

  inline BaseMoving& operator=(BaseMoving&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseMoving& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseMoving* internal_default_instance() {
    return reinterpret_cast<const BaseMoving*>(
               &_BaseMoving_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(BaseMoving* other);
  friend void swap(BaseMoving& a, BaseMoving& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseMoving* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseMoving* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseMoving& from);
  void MergeFrom(const BaseMoving& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseMoving* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .osi3.Vector2d base_polygon = 7;
  int base_polygon_size() const;
  void clear_base_polygon();
  static const int kBasePolygonFieldNumber = 7;
  const ::osi3::Vector2d& base_polygon(int index) const;
  ::osi3::Vector2d* mutable_base_polygon(int index);
  ::osi3::Vector2d* add_base_polygon();
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
      mutable_base_polygon();
  const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
      base_polygon() const;

  // .osi3.Dimension3d dimension = 1;
  bool has_dimension() const;
  void clear_dimension();
  static const int kDimensionFieldNumber = 1;
  const ::osi3::Dimension3d& dimension() const;
  ::osi3::Dimension3d* release_dimension();
  ::osi3::Dimension3d* mutable_dimension();
  void set_allocated_dimension(::osi3::Dimension3d* dimension);

  // .osi3.Vector3d position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);

  // .osi3.Vector3d velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::osi3::Vector3d& velocity() const;
  ::osi3::Vector3d* release_velocity();
  ::osi3::Vector3d* mutable_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);

  // .osi3.Vector3d acceleration = 5;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 5;
  const ::osi3::Vector3d& acceleration() const;
  ::osi3::Vector3d* release_acceleration();
  ::osi3::Vector3d* mutable_acceleration();
  void set_allocated_acceleration(::osi3::Vector3d* acceleration);

  // .osi3.Orientation3d orientation_rate = 6;
  bool has_orientation_rate() const;
  void clear_orientation_rate();
  static const int kOrientationRateFieldNumber = 6;
  const ::osi3::Orientation3d& orientation_rate() const;
  ::osi3::Orientation3d* release_orientation_rate();
  ::osi3::Orientation3d* mutable_orientation_rate();
  void set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate);

  // .osi3.Orientation3d orientation_acceleration = 8;
  bool has_orientation_acceleration() const;
  void clear_orientation_acceleration();
  static const int kOrientationAccelerationFieldNumber = 8;
  const ::osi3::Orientation3d& orientation_acceleration() const;
  ::osi3::Orientation3d* release_orientation_acceleration();
  ::osi3::Orientation3d* mutable_orientation_acceleration();
  void set_allocated_orientation_acceleration(::osi3::Orientation3d* orientation_acceleration);

  // @@protoc_insertion_point(class_scope:osi3.BaseMoving)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d > base_polygon_;
  ::osi3::Dimension3d* dimension_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  ::osi3::Vector3d* velocity_;
  ::osi3::Vector3d* acceleration_;
  ::osi3::Orientation3d* orientation_rate_;
  ::osi3::Orientation3d* orientation_acceleration_;
  mutable int _cached_size_;
  friend struct ::protobuf_osi_5fcommon_2eproto::TableStruct;
  friend void ::protobuf_osi_5fcommon_2eproto::InitDefaultsBaseMovingImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3d

// double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.x)
}

// double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.y)
}

// double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector3d.z)
}

// -------------------------------------------------------------------

// Vector2d

// double x = 1;
inline void Vector2d::clear_x() {
  x_ = 0;
}
inline double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.x)
  return x_;
}
inline void Vector2d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector2d.x)
}

// double y = 2;
inline void Vector2d::clear_y() {
  y_ = 0;
}
inline double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.y)
  return y_;
}
inline void Vector2d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:osi3.Vector2d.y)
}

// -------------------------------------------------------------------

// Timestamp

// int64 seconds = 1;
inline void Timestamp::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.seconds)
  return seconds_;
}
inline void Timestamp::set_seconds(::google::protobuf::int64 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:osi3.Timestamp.seconds)
}

// uint32 nanos = 2;
inline void Timestamp::clear_nanos() {
  nanos_ = 0u;
}
inline ::google::protobuf::uint32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.nanos)
  return nanos_;
}
inline void Timestamp::set_nanos(::google::protobuf::uint32 value) {
  
  nanos_ = value;
  // @@protoc_insertion_point(field_set:osi3.Timestamp.nanos)
}

// -------------------------------------------------------------------

// Dimension3d

// double length = 1;
inline void Dimension3d::clear_length() {
  length_ = 0;
}
inline double Dimension3d::length() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.length)
  return length_;
}
inline void Dimension3d::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.length)
}

// double width = 2;
inline void Dimension3d::clear_width() {
  width_ = 0;
}
inline double Dimension3d::width() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.width)
  return width_;
}
inline void Dimension3d::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.width)
}

// double height = 3;
inline void Dimension3d::clear_height() {
  height_ = 0;
}
inline double Dimension3d::height() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.height)
  return height_;
}
inline void Dimension3d::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.height)
}

// -------------------------------------------------------------------

// Orientation3d

// double roll = 1;
inline void Orientation3d::clear_roll() {
  roll_ = 0;
}
inline double Orientation3d::roll() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.roll)
  return roll_;
}
inline void Orientation3d::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.roll)
}

// double pitch = 2;
inline void Orientation3d::clear_pitch() {
  pitch_ = 0;
}
inline double Orientation3d::pitch() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.pitch)
  return pitch_;
}
inline void Orientation3d::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.pitch)
}

// double yaw = 3;
inline void Orientation3d::clear_yaw() {
  yaw_ = 0;
}
inline double Orientation3d::yaw() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.yaw)
  return yaw_;
}
inline void Orientation3d::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.yaw)
}

// -------------------------------------------------------------------

// Identifier

// uint64 value = 1;
inline void Identifier::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Identifier::value() const {
  // @@protoc_insertion_point(field_get:osi3.Identifier.value)
  return value_;
}
inline void Identifier::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:osi3.Identifier.value)
}

// -------------------------------------------------------------------

// MountingPosition

// .osi3.Vector3d position = 1;
inline bool MountingPosition::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void MountingPosition::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::osi3::Vector3d& MountingPosition::position() const {
  const ::osi3::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.position)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* MountingPosition::release_position() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::osi3::Vector3d* MountingPosition::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.position)
  return position_;
}
inline void MountingPosition::set_allocated_position(::osi3::Vector3d* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.position)
}

// .osi3.Orientation3d orientation = 2;
inline bool MountingPosition::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
inline void MountingPosition::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
inline const ::osi3::Orientation3d& MountingPosition::orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline ::osi3::Orientation3d* MountingPosition::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.orientation)
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::osi3::Orientation3d* MountingPosition::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.orientation)
  return orientation_;
}
inline void MountingPosition::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_;
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.orientation)
}

// -------------------------------------------------------------------

// Spherical3d

// double distance = 1;
inline void Spherical3d::clear_distance() {
  distance_ = 0;
}
inline double Spherical3d::distance() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.distance)
  return distance_;
}
inline void Spherical3d::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.distance)
}

// double azimuth = 2;
inline void Spherical3d::clear_azimuth() {
  azimuth_ = 0;
}
inline double Spherical3d::azimuth() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.azimuth)
  return azimuth_;
}
inline void Spherical3d::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.azimuth)
}

// double elevation = 3;
inline void Spherical3d::clear_elevation() {
  elevation_ = 0;
}
inline double Spherical3d::elevation() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.elevation)
  return elevation_;
}
inline void Spherical3d::set_elevation(double value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.elevation)
}

// -------------------------------------------------------------------

// BaseStationary

// .osi3.Dimension3d dimension = 1;
inline bool BaseStationary::has_dimension() const {
  return this != internal_default_instance() && dimension_ != NULL;
}
inline void BaseStationary::clear_dimension() {
  if (GetArenaNoVirtual() == NULL && dimension_ != NULL) {
    delete dimension_;
  }
  dimension_ = NULL;
}
inline const ::osi3::Dimension3d& BaseStationary::dimension() const {
  const ::osi3::Dimension3d* p = dimension_;
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.dimension)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Dimension3d*>(
      &::osi3::_Dimension3d_default_instance_);
}
inline ::osi3::Dimension3d* BaseStationary::release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.dimension)
  
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = NULL;
  return temp;
}
inline ::osi3::Dimension3d* BaseStationary::mutable_dimension() {
  
  if (dimension_ == NULL) {
    dimension_ = new ::osi3::Dimension3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.dimension)
  return dimension_;
}
inline void BaseStationary::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dimension_;
  }
  if (dimension) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dimension = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dimension, submessage_arena);
    }
    
  } else {
    
  }
  dimension_ = dimension;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.dimension)
}

// .osi3.Vector3d position = 2;
inline bool BaseStationary::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void BaseStationary::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::osi3::Vector3d& BaseStationary::position() const {
  const ::osi3::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.position)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* BaseStationary::release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::osi3::Vector3d* BaseStationary::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.position)
  return position_;
}
inline void BaseStationary::set_allocated_position(::osi3::Vector3d* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.position)
}

// .osi3.Orientation3d orientation = 3;
inline bool BaseStationary::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
inline void BaseStationary::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
inline const ::osi3::Orientation3d& BaseStationary::orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline ::osi3::Orientation3d* BaseStationary::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.orientation)
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::osi3::Orientation3d* BaseStationary::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.orientation)
  return orientation_;
}
inline void BaseStationary::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_;
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.orientation)
}

// repeated .osi3.Vector2d base_polygon = 4;
inline int BaseStationary::base_polygon_size() const {
  return base_polygon_.size();
}
inline void BaseStationary::clear_base_polygon() {
  base_polygon_.Clear();
}
inline const ::osi3::Vector2d& BaseStationary::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.base_polygon)
  return base_polygon_.Get(index);
}
inline ::osi3::Vector2d* BaseStationary::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.base_polygon)
  return base_polygon_.Mutable(index);
}
inline ::osi3::Vector2d* BaseStationary::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseStationary.base_polygon)
  return base_polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
BaseStationary::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseStationary.base_polygon)
  return &base_polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
BaseStationary::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseStationary.base_polygon)
  return base_polygon_;
}

// -------------------------------------------------------------------

// BaseMoving

// .osi3.Dimension3d dimension = 1;
inline bool BaseMoving::has_dimension() const {
  return this != internal_default_instance() && dimension_ != NULL;
}
inline void BaseMoving::clear_dimension() {
  if (GetArenaNoVirtual() == NULL && dimension_ != NULL) {
    delete dimension_;
  }
  dimension_ = NULL;
}
inline const ::osi3::Dimension3d& BaseMoving::dimension() const {
  const ::osi3::Dimension3d* p = dimension_;
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.dimension)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Dimension3d*>(
      &::osi3::_Dimension3d_default_instance_);
}
inline ::osi3::Dimension3d* BaseMoving::release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.dimension)
  
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = NULL;
  return temp;
}
inline ::osi3::Dimension3d* BaseMoving::mutable_dimension() {
  
  if (dimension_ == NULL) {
    dimension_ = new ::osi3::Dimension3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.dimension)
  return dimension_;
}
inline void BaseMoving::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dimension_;
  }
  if (dimension) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dimension = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dimension, submessage_arena);
    }
    
  } else {
    
  }
  dimension_ = dimension;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.dimension)
}

// .osi3.Vector3d position = 2;
inline bool BaseMoving::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void BaseMoving::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::osi3::Vector3d& BaseMoving::position() const {
  const ::osi3::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.position)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* BaseMoving::release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.position)
  return position_;
}
inline void BaseMoving::set_allocated_position(::osi3::Vector3d* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.position)
}

// .osi3.Orientation3d orientation = 3;
inline bool BaseMoving::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
inline void BaseMoving::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
inline const ::osi3::Orientation3d& BaseMoving::orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation)
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation)
  return orientation_;
}
inline void BaseMoving::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_;
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation)
}

// .osi3.Vector3d velocity = 4;
inline bool BaseMoving::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline void BaseMoving::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
inline const ::osi3::Vector3d& BaseMoving::velocity() const {
  const ::osi3::Vector3d* p = velocity_;
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* BaseMoving::release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.velocity)
  
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.velocity)
  return velocity_;
}
inline void BaseMoving::set_allocated_velocity(::osi3::Vector3d* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete velocity_;
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.velocity)
}

// .osi3.Vector3d acceleration = 5;
inline bool BaseMoving::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline void BaseMoving::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
inline const ::osi3::Vector3d& BaseMoving::acceleration() const {
  const ::osi3::Vector3d* p = acceleration_;
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* BaseMoving::release_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.acceleration)
  
  ::osi3::Vector3d* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    acceleration_ = new ::osi3::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.acceleration)
  return acceleration_;
}
inline void BaseMoving::set_allocated_acceleration(::osi3::Vector3d* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acceleration_;
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.acceleration)
}

// .osi3.Orientation3d orientation_rate = 6;
inline bool BaseMoving::has_orientation_rate() const {
  return this != internal_default_instance() && orientation_rate_ != NULL;
}
inline void BaseMoving::clear_orientation_rate() {
  if (GetArenaNoVirtual() == NULL && orientation_rate_ != NULL) {
    delete orientation_rate_;
  }
  orientation_rate_ = NULL;
}
inline const ::osi3::Orientation3d& BaseMoving::orientation_rate() const {
  const ::osi3::Orientation3d* p = orientation_rate_;
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation_rate() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation_rate)
  
  ::osi3::Orientation3d* temp = orientation_rate_;
  orientation_rate_ = NULL;
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation_rate() {
  
  if (orientation_rate_ == NULL) {
    orientation_rate_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation_rate)
  return orientation_rate_;
}
inline void BaseMoving::set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_rate_;
  }
  if (orientation_rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation_rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_rate, submessage_arena);
    }
    
  } else {
    
  }
  orientation_rate_ = orientation_rate;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation_rate)
}

// .osi3.Orientation3d orientation_acceleration = 8;
inline bool BaseMoving::has_orientation_acceleration() const {
  return this != internal_default_instance() && orientation_acceleration_ != NULL;
}
inline void BaseMoving::clear_orientation_acceleration() {
  if (GetArenaNoVirtual() == NULL && orientation_acceleration_ != NULL) {
    delete orientation_acceleration_;
  }
  orientation_acceleration_ = NULL;
}
inline const ::osi3::Orientation3d& BaseMoving::orientation_acceleration() const {
  const ::osi3::Orientation3d* p = orientation_acceleration_;
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation_acceleration)
  
  ::osi3::Orientation3d* temp = orientation_acceleration_;
  orientation_acceleration_ = NULL;
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation_acceleration() {
  
  if (orientation_acceleration_ == NULL) {
    orientation_acceleration_ = new ::osi3::Orientation3d;
  }
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation_acceleration)
  return orientation_acceleration_;
}
inline void BaseMoving::set_allocated_orientation_acceleration(::osi3::Orientation3d* orientation_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_acceleration_;
  }
  if (orientation_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  orientation_acceleration_ = orientation_acceleration;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation_acceleration)
}

// repeated .osi3.Vector2d base_polygon = 7;
inline int BaseMoving::base_polygon_size() const {
  return base_polygon_.size();
}
inline void BaseMoving::clear_base_polygon() {
  base_polygon_.Clear();
}
inline const ::osi3::Vector2d& BaseMoving::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.base_polygon)
  return base_polygon_.Get(index);
}
inline ::osi3::Vector2d* BaseMoving::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.base_polygon)
  return base_polygon_.Mutable(index);
}
inline ::osi3::Vector2d* BaseMoving::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseMoving.base_polygon)
  return base_polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >*
BaseMoving::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseMoving.base_polygon)
  return &base_polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::osi3::Vector2d >&
BaseMoving::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseMoving.base_polygon)
  return base_polygon_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osi_5fcommon_2eproto__INCLUDED
