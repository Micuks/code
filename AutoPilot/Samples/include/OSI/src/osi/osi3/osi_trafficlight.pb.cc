// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficlight.proto

#include "osi_trafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class TrafficLight_ClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight_Classification>
      _instance;
} _TrafficLight_Classification_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight>
      _instance;
} _TrafficLight_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5ftrafficlight_2eproto {
void InitDefaultsTrafficLight_ClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_TrafficLight_Classification_default_instance_;
    new (ptr) ::osi3::TrafficLight_Classification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficLight_Classification::InitAsDefaultInstance();
}

void InitDefaultsTrafficLight_Classification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficLight_ClassificationImpl);
}

void InitDefaultsTrafficLightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsBaseStationary();
  protobuf_osi_5ftrafficlight_2eproto::InitDefaultsTrafficLight_Classification();
  {
    void* ptr = &::osi3::_TrafficLight_default_instance_;
    new (ptr) ::osi3::TrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficLight::InitAsDefaultInstance();
}

void InitDefaultsTrafficLight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficLightImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight_Classification, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight_Classification, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight_Classification, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight_Classification, counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight_Classification, assigned_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight_Classification, is_out_of_service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::TrafficLight, classification_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::TrafficLight_Classification)},
  { 11, -1, sizeof(::osi3::TrafficLight)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficLight_Classification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_TrafficLight_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_trafficlight.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026osi_trafficlight.proto\022\004osi3\032\020osi_comm"
      "on.proto\"\337\t\n\014TrafficLight\022\034\n\002id\030\001 \001(\0132\020."
      "osi3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.Bas"
      "eStationary\0229\n\016classification\030\003 \001(\0132!.os"
      "i3.TrafficLight.Classification\032\321\010\n\016Class"
      "ification\0226\n\005color\030\001 \001(\0162\'.osi3.TrafficL"
      "ight.Classification.Color\0224\n\004icon\030\002 \001(\0162"
      "&.osi3.TrafficLight.Classification.Icon\022"
      "4\n\004mode\030\003 \001(\0162&.osi3.TrafficLight.Classi"
      "fication.Mode\022\017\n\007counter\030\004 \001(\001\022*\n\020assign"
      "ed_lane_id\030\005 \003(\0132\020.osi3.Identifier\022\031\n\021is"
      "_out_of_service\030\006 \001(\010\"~\n\005Color\022\021\n\rCOLOR_"
      "UNKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\r\n\tCOLOR_RED\020"
      "\002\022\020\n\014COLOR_YELLOW\020\003\022\017\n\013COLOR_GREEN\020\004\022\016\n\n"
      "COLOR_BLUE\020\005\022\017\n\013COLOR_WHITE\020\006\"\321\004\n\004Icon\022\020"
      "\n\014ICON_UNKNOWN\020\000\022\016\n\nICON_OTHER\020\001\022\r\n\tICON"
      "_NONE\020\002\022\035\n\031ICON_ARROW_STRAIGHT_AHEAD\020\003\022\023"
      "\n\017ICON_ARROW_LEFT\020\004\022\030\n\024ICON_ARROW_DIAG_L"
      "EFT\020\005\022\"\n\036ICON_ARROW_STRAIGHT_AHEAD_LEFT\020"
      "\006\022\024\n\020ICON_ARROW_RIGHT\020\007\022\031\n\025ICON_ARROW_DI"
      "AG_RIGHT\020\010\022#\n\037ICON_ARROW_STRAIGHT_AHEAD_"
      "RIGHT\020\t\022\031\n\025ICON_ARROW_LEFT_RIGHT\020\n\022\023\n\017IC"
      "ON_ARROW_DOWN\020\013\022\030\n\024ICON_ARROW_DOWN_LEFT\020"
      "\014\022\031\n\025ICON_ARROW_DOWN_RIGHT\020\r\022\024\n\020ICON_ARR"
      "OW_CROSS\020\016\022\023\n\017ICON_PEDESTRIAN\020\017\022\r\n\tICON_"
      "WALK\020\020\022\022\n\016ICON_DONT_WALK\020\021\022\020\n\014ICON_BICYC"
      "LE\020\022\022\037\n\033ICON_PEDESTRIAN_AND_BICYCLE\020\023\022\032\n"
      "\026ICON_COUNTDOWN_SECONDS\020\024\022\032\n\026ICON_COUNTD"
      "OWN_PERCENT\020\025\022\r\n\tICON_TRAM\020\026\022\014\n\010ICON_BUS"
      "\020\027\022\025\n\021ICON_BUS_AND_TRAM\020\030\"o\n\004Mode\022\020\n\014MOD"
      "E_UNKNOWN\020\000\022\016\n\nMODE_OTHER\020\001\022\014\n\010MODE_OFF\020"
      "\002\022\021\n\rMODE_CONSTANT\020\003\022\021\n\rMODE_FLASHING\020\004\022"
      "\021\n\rMODE_COUNTING\020\005B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_trafficlight.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5ftrafficlight_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Color_descriptor() {
  protobuf_osi_5ftrafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficlight_2eproto::file_level_enum_descriptors[0];
}
bool TrafficLight_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_UNKNOWN;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_OTHER;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_RED;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_YELLOW;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_GREEN;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_BLUE;
const TrafficLight_Classification_Color TrafficLight_Classification::COLOR_WHITE;
const TrafficLight_Classification_Color TrafficLight_Classification::Color_MIN;
const TrafficLight_Classification_Color TrafficLight_Classification::Color_MAX;
const int TrafficLight_Classification::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Icon_descriptor() {
  protobuf_osi_5ftrafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficlight_2eproto::file_level_enum_descriptors[1];
}
bool TrafficLight_Classification_Icon_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_UNKNOWN;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_OTHER;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_NONE;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_LEFT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_RIGHT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_CROSS;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_WALK;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_DONT_WALK;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BICYCLE;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN_AND_BICYCLE;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_SECONDS;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_PERCENT;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_TRAM;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS;
const TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS_AND_TRAM;
const TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MIN;
const TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MAX;
const int TrafficLight_Classification::Icon_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Classification_Mode_descriptor() {
  protobuf_osi_5ftrafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5ftrafficlight_2eproto::file_level_enum_descriptors[2];
}
bool TrafficLight_Classification_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_UNKNOWN;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OTHER;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OFF;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_CONSTANT;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_FLASHING;
const TrafficLight_Classification_Mode TrafficLight_Classification::MODE_COUNTING;
const TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MIN;
const TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MAX;
const int TrafficLight_Classification::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TrafficLight_Classification::InitAsDefaultInstance() {
}
void TrafficLight_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight_Classification::kColorFieldNumber;
const int TrafficLight_Classification::kIconFieldNumber;
const int TrafficLight_Classification::kModeFieldNumber;
const int TrafficLight_Classification::kCounterFieldNumber;
const int TrafficLight_Classification::kAssignedLaneIdFieldNumber;
const int TrafficLight_Classification::kIsOutOfServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight_Classification::TrafficLight_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficlight_2eproto::InitDefaultsTrafficLight_Classification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficLight.Classification)
}
TrafficLight_Classification::TrafficLight_Classification(const TrafficLight_Classification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      assigned_lane_id_(from.assigned_lane_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight.Classification)
}

void TrafficLight_Classification::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
  _cached_size_ = 0;
}

TrafficLight_Classification::~TrafficLight_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight.Classification)
  SharedDtor();
}

void TrafficLight_Classification::SharedDtor() {
}

void TrafficLight_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight_Classification::descriptor() {
  ::protobuf_osi_5ftrafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficlight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight_Classification& TrafficLight_Classification::default_instance() {
  ::protobuf_osi_5ftrafficlight_2eproto::InitDefaultsTrafficLight_Classification();
  return *internal_default_instance();
}

TrafficLight_Classification* TrafficLight_Classification::New(::google::protobuf::Arena* arena) const {
  TrafficLight_Classification* n = new TrafficLight_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

bool TrafficLight_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficLight.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.TrafficLight.Classification.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::TrafficLight_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficLight.Classification.Icon icon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_icon(static_cast< ::osi3::TrafficLight_Classification_Icon >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficLight.Classification.Mode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::osi3::TrafficLight_Classification_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double counter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficLight.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficLight.Classification)
  return false;
#undef DO_
}

void TrafficLight_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficLight.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficLight.Classification.Color color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // .osi3.TrafficLight.Classification.Icon icon = 2;
  if (this->icon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->icon(), output);
  }

  // .osi3.TrafficLight.Classification.Mode mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // double counter = 4;
  if (this->counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->counter(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->assigned_lane_id(static_cast<int>(i)), output);
  }

  // bool is_out_of_service = 6;
  if (this->is_out_of_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_out_of_service(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficLight.Classification)
}

::google::protobuf::uint8* TrafficLight_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficLight.Classification.Color color = 1;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // .osi3.TrafficLight.Classification.Icon icon = 2;
  if (this->icon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->icon(), target);
  }

  // .osi3.TrafficLight.Classification.Mode mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // double counter = 4;
  if (this->counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->counter(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->assigned_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // bool is_out_of_service = 6;
  if (this->is_out_of_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_out_of_service(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight.Classification)
  return target;
}

size_t TrafficLight_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight.Classification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.Identifier assigned_lane_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // .osi3.TrafficLight.Classification.Color color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // .osi3.TrafficLight.Classification.Icon icon = 2;
  if (this->icon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->icon());
  }

  // double counter = 4;
  if (this->counter() != 0) {
    total_size += 1 + 8;
  }

  // .osi3.TrafficLight.Classification.Mode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // bool is_out_of_service = 6;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficLight.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight_Classification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficLight.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficLight.Classification)
    MergeFrom(*source);
  }
}

void TrafficLight_Classification::MergeFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
  if (from.counter() != 0) {
    set_counter(from.counter());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void TrafficLight_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight_Classification::CopyFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight_Classification::IsInitialized() const {
  return true;
}

void TrafficLight_Classification::Swap(TrafficLight_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight_Classification::InternalSwap(TrafficLight_Classification* other) {
  using std::swap;
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  swap(color_, other->color_);
  swap(icon_, other->icon_);
  swap(counter_, other->counter_);
  swap(mode_, other->mode_);
  swap(is_out_of_service_, other->is_out_of_service_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight_Classification::GetMetadata() const {
  protobuf_osi_5ftrafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficlight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
  ::osi3::_TrafficLight_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_TrafficLight_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_TrafficLight_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficLight_Classification*>(
      ::osi3::TrafficLight_Classification::internal_default_instance());
}
void TrafficLight::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void TrafficLight::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kBaseFieldNumber;
const int TrafficLight::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5ftrafficlight_2eproto::InitDefaultsTrafficLight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficLight_Classification(*from.classification_);
  } else {
    classification_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
  _cached_size_ = 0;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  ::protobuf_osi_5ftrafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficlight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  ::protobuf_osi_5ftrafficlight_2eproto::InitDefaultsTrafficLight();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_ != NULL) {
    delete classification_;
  }
  classification_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficLight.Classification classification = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // .osi3.TrafficLight.Classification classification = 3;
  if (this->has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->classification_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->base_, deterministic, target);
  }

  // .osi3.TrafficLight.Classification classification = 3;
  if (this->has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->classification_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_);
  }

  // .osi3.TrafficLight.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classification_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(from.classification());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_osi_5ftrafficlight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5ftrafficlight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
