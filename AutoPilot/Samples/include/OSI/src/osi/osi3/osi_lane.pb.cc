// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_lane.proto

#include "osi_lane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class Lane_Classification_RoadConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane_Classification_RoadCondition>
      _instance;
} _Lane_Classification_RoadCondition_default_instance_;
class Lane_Classification_LanePairingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane_Classification_LanePairing>
      _instance;
} _Lane_Classification_LanePairing_default_instance_;
class Lane_ClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane_Classification>
      _instance;
} _Lane_Classification_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class LaneBoundary_BoundaryPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary_BoundaryPoint>
      _instance;
} _LaneBoundary_BoundaryPoint_default_instance_;
class LaneBoundary_ClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary_Classification>
      _instance;
} _LaneBoundary_Classification_default_instance_;
class LaneBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary>
      _instance;
} _LaneBoundary_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5flane_2eproto {
void InitDefaultsLane_Classification_RoadConditionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_Lane_Classification_RoadCondition_default_instance_;
    new (ptr) ::osi3::Lane_Classification_RoadCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane_Classification_RoadCondition::InitAsDefaultInstance();
}

void InitDefaultsLane_Classification_RoadCondition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLane_Classification_RoadConditionImpl);
}

void InitDefaultsLane_Classification_LanePairingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_Lane_Classification_LanePairing_default_instance_;
    new (ptr) ::osi3::Lane_Classification_LanePairing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane_Classification_LanePairing::InitAsDefaultInstance();
}

void InitDefaultsLane_Classification_LanePairing() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLane_Classification_LanePairingImpl);
}

void InitDefaultsLane_ClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsVector3d();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification_LanePairing();
  protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification_RoadCondition();
  {
    void* ptr = &::osi3::_Lane_Classification_default_instance_;
    new (ptr) ::osi3::Lane_Classification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane_Classification::InitAsDefaultInstance();
}

void InitDefaultsLane_Classification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLane_ClassificationImpl);
}

void InitDefaultsLaneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification();
  {
    void* ptr = &::osi3::_Lane_default_instance_;
    new (ptr) ::osi3::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane::InitAsDefaultInstance();
}

void InitDefaultsLane() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneImpl);
}

void InitDefaultsLaneBoundary_BoundaryPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsVector3d();
  {
    void* ptr = &::osi3::_LaneBoundary_BoundaryPoint_default_instance_;
    new (ptr) ::osi3::LaneBoundary_BoundaryPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LaneBoundary_BoundaryPoint::InitAsDefaultInstance();
}

void InitDefaultsLaneBoundary_BoundaryPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneBoundary_BoundaryPointImpl);
}

void InitDefaultsLaneBoundary_ClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_LaneBoundary_Classification_default_instance_;
    new (ptr) ::osi3::LaneBoundary_Classification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LaneBoundary_Classification::InitAsDefaultInstance();
}

void InitDefaultsLaneBoundary_Classification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneBoundary_ClassificationImpl);
}

void InitDefaultsLaneBoundaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary_BoundaryPoint();
  protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary_Classification();
  {
    void* ptr = &::osi3::_LaneBoundary_default_instance_;
    new (ptr) ::osi3::LaneBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LaneBoundary::InitAsDefaultInstance();
}

void InitDefaultsLaneBoundary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneBoundaryImpl);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_water_film_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_freezing_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_ice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_roughness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_texture_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, antecessor_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, successor_lane_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, is_host_vehicle_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, centerline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, centerline_is_driving_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, left_adjacent_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, right_adjacent_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, lane_pairing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, right_lane_boundary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, left_lane_boundary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, free_lane_boundary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane_Classification, road_condition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::Lane, classification_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_Classification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_Classification, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary_Classification, limiting_structure_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary, boundary_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::LaneBoundary, classification_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::Lane_Classification_RoadCondition)},
  { 11, -1, sizeof(::osi3::Lane_Classification_LanePairing)},
  { 18, -1, sizeof(::osi3::Lane_Classification)},
  { 34, -1, sizeof(::osi3::Lane)},
  { 41, -1, sizeof(::osi3::LaneBoundary_BoundaryPoint)},
  { 49, -1, sizeof(::osi3::LaneBoundary_Classification)},
  { 57, -1, sizeof(::osi3::LaneBoundary)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_Lane_Classification_RoadCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_Lane_Classification_LanePairing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_Lane_Classification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_LaneBoundary_BoundaryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_LaneBoundary_Classification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_LaneBoundary_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_lane.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016osi_lane.proto\022\004osi3\032\020osi_common.proto"
      "\"\376\007\n\004Lane\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022"
      "1\n\016classification\030\002 \001(\0132\031.osi3.Lane.Clas"
      "sification\032\244\007\n\016Classification\022,\n\004type\030\001 "
      "\001(\0162\036.osi3.Lane.Classification.Type\022\034\n\024i"
      "s_host_vehicle_lane\030\002 \001(\010\022\"\n\ncenterline\030"
      "\003 \003(\0132\016.osi3.Vector3d\022\'\n\037centerline_is_d"
      "riving_direction\030\004 \001(\010\022/\n\025left_adjacent_"
      "lane_id\030\005 \003(\0132\020.osi3.Identifier\0220\n\026right"
      "_adjacent_lane_id\030\006 \003(\0132\020.osi3.Identifie"
      "r\022;\n\014lane_pairing\030\007 \003(\0132%.osi3.Lane.Clas"
      "sification.LanePairing\0220\n\026right_lane_bou"
      "ndary_id\030\010 \003(\0132\020.osi3.Identifier\022/\n\025left"
      "_lane_boundary_id\030\t \003(\0132\020.osi3.Identifie"
      "r\022/\n\025free_lane_boundary_id\030\n \003(\0132\020.osi3."
      "Identifier\022\?\n\016road_condition\030\013 \001(\0132\'.osi"
      "3.Lane.Classification.RoadCondition\032\261\001\n\r"
      "RoadCondition\022\033\n\023surface_temperature\030\001 \001"
      "(\001\022\032\n\022surface_water_film\030\002 \001(\001\022\036\n\026surfac"
      "e_freezing_point\030\003 \001(\001\022\023\n\013surface_ice\030\004 "
      "\001(\001\022\031\n\021surface_roughness\030\005 \001(\001\022\027\n\017surfac"
      "e_texture\030\006 \001(\001\032h\n\013LanePairing\022,\n\022antece"
      "ssor_lane_id\030\001 \001(\0132\020.osi3.Identifier\022+\n\021"
      "successor_lane_id\030\002 \001(\0132\020.osi3.Identifie"
      "r\"f\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHE"
      "R\020\001\022\020\n\014TYPE_DRIVING\020\002\022\023\n\017TYPE_NONDRIVING"
      "\020\003\022\025\n\021TYPE_INTERSECTION\020\004\"\343\006\n\014LaneBounda"
      "ry\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\0227\n\rboun"
      "dary_line\030\002 \003(\0132 .osi3.LaneBoundary.Boun"
      "daryPoint\0229\n\016classification\030\003 \001(\0132!.osi3"
      ".LaneBoundary.Classification\032P\n\rBoundary"
      "Point\022 \n\010position\030\001 \001(\0132\016.osi3.Vector3d\022"
      "\r\n\005width\030\002 \001(\001\022\016\n\006height\030\003 \001(\001\032\356\004\n\016Class"
      "ification\0224\n\004type\030\001 \001(\0162&.osi3.LaneBound"
      "ary.Classification.Type\0226\n\005color\030\002 \001(\0162\'"
      ".osi3.LaneBoundary.Classification.Color\022"
      "/\n\025limiting_structure_id\030\003 \003(\0132\020.osi3.Id"
      "entifier\"\231\002\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nT"
      "YPE_OTHER\020\001\022\020\n\014TYPE_NO_LINE\020\002\022\023\n\017TYPE_SO"
      "LID_LINE\020\003\022\024\n\020TYPE_DASHED_LINE\020\004\022\023\n\017TYPE"
      "_BOTTS_DOTS\020\005\022\022\n\016TYPE_ROAD_EDGE\020\006\022\022\n\016TYP"
      "E_SNOW_EDGE\020\007\022\023\n\017TYPE_GRASS_EDGE\020\010\022\024\n\020TY"
      "PE_GRAVEL_EDGE\020\t\022\022\n\016TYPE_SOIL_EDGE\020\n\022\023\n\017"
      "TYPE_GUARD_RAIL\020\013\022\r\n\tTYPE_CURB\020\014\022\022\n\016TYPE"
      "_STRUCTURE\020\r\"\240\001\n\005Color\022\021\n\rCOLOR_UNKNOWN\020"
      "\000\022\017\n\013COLOR_OTHER\020\001\022\016\n\nCOLOR_NONE\020\002\022\017\n\013CO"
      "LOR_WHITE\020\003\022\020\n\014COLOR_YELLOW\020\004\022\r\n\tCOLOR_R"
      "ED\020\005\022\016\n\nCOLOR_BLUE\020\006\022\017\n\013COLOR_GREEN\020\007\022\020\n"
      "\014COLOR_VIOLET\020\010B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_lane.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5flane_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* Lane_Classification_Type_descriptor() {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5flane_2eproto::file_level_enum_descriptors[0];
}
bool Lane_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_Classification_Type Lane_Classification::TYPE_UNKNOWN;
const Lane_Classification_Type Lane_Classification::TYPE_OTHER;
const Lane_Classification_Type Lane_Classification::TYPE_DRIVING;
const Lane_Classification_Type Lane_Classification::TYPE_NONDRIVING;
const Lane_Classification_Type Lane_Classification::TYPE_INTERSECTION;
const Lane_Classification_Type Lane_Classification::Type_MIN;
const Lane_Classification_Type Lane_Classification::Type_MAX;
const int Lane_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundary_Classification_Type_descriptor() {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5flane_2eproto::file_level_enum_descriptors[1];
}
bool LaneBoundary_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_UNKNOWN;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_OTHER;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_NO_LINE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOLID_LINE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_DASHED_LINE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_BOTTS_DOTS;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_ROAD_EDGE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SNOW_EDGE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GRASS_EDGE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GRAVEL_EDGE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOIL_EDGE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GUARD_RAIL;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_CURB;
const LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_STRUCTURE;
const LaneBoundary_Classification_Type LaneBoundary_Classification::Type_MIN;
const LaneBoundary_Classification_Type LaneBoundary_Classification::Type_MAX;
const int LaneBoundary_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundary_Classification_Color_descriptor() {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5flane_2eproto::file_level_enum_descriptors[2];
}
bool LaneBoundary_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_UNKNOWN;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_OTHER;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_NONE;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_WHITE;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_YELLOW;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_RED;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_BLUE;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_GREEN;
const LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_VIOLET;
const LaneBoundary_Classification_Color LaneBoundary_Classification::Color_MIN;
const LaneBoundary_Classification_Color LaneBoundary_Classification::Color_MAX;
const int LaneBoundary_Classification::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Lane_Classification_RoadCondition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane_Classification_RoadCondition::kSurfaceTemperatureFieldNumber;
const int Lane_Classification_RoadCondition::kSurfaceWaterFilmFieldNumber;
const int Lane_Classification_RoadCondition::kSurfaceFreezingPointFieldNumber;
const int Lane_Classification_RoadCondition::kSurfaceIceFieldNumber;
const int Lane_Classification_RoadCondition::kSurfaceRoughnessFieldNumber;
const int Lane_Classification_RoadCondition::kSurfaceTextureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane_Classification_RoadCondition::Lane_Classification_RoadCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification_RoadCondition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane.Classification.RoadCondition)
}
Lane_Classification_RoadCondition::Lane_Classification_RoadCondition(const Lane_Classification_RoadCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&surface_temperature_, &from.surface_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&surface_texture_) -
    reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification.RoadCondition)
}

void Lane_Classification_RoadCondition::SharedCtor() {
  ::memset(&surface_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&surface_texture_) -
      reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
  _cached_size_ = 0;
}

Lane_Classification_RoadCondition::~Lane_Classification_RoadCondition() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification.RoadCondition)
  SharedDtor();
}

void Lane_Classification_RoadCondition::SharedDtor() {
}

void Lane_Classification_RoadCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane_Classification_RoadCondition::descriptor() {
  ::protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane_Classification_RoadCondition& Lane_Classification_RoadCondition::default_instance() {
  ::protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification_RoadCondition();
  return *internal_default_instance();
}

Lane_Classification_RoadCondition* Lane_Classification_RoadCondition::New(::google::protobuf::Arena* arena) const {
  Lane_Classification_RoadCondition* n = new Lane_Classification_RoadCondition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane_Classification_RoadCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification.RoadCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&surface_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&surface_texture_) -
      reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
  _internal_metadata_.Clear();
}

bool Lane_Classification_RoadCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane.Classification.RoadCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double surface_temperature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_water_film = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_water_film_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_freezing_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_freezing_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_ice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_ice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_roughness = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_roughness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_texture = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_texture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane.Classification.RoadCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane.Classification.RoadCondition)
  return false;
#undef DO_
}

void Lane_Classification_RoadCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane.Classification.RoadCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double surface_temperature = 1;
  if (this->surface_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->surface_temperature(), output);
  }

  // double surface_water_film = 2;
  if (this->surface_water_film() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->surface_water_film(), output);
  }

  // double surface_freezing_point = 3;
  if (this->surface_freezing_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->surface_freezing_point(), output);
  }

  // double surface_ice = 4;
  if (this->surface_ice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->surface_ice(), output);
  }

  // double surface_roughness = 5;
  if (this->surface_roughness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->surface_roughness(), output);
  }

  // double surface_texture = 6;
  if (this->surface_texture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->surface_texture(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane.Classification.RoadCondition)
}

::google::protobuf::uint8* Lane_Classification_RoadCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification.RoadCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double surface_temperature = 1;
  if (this->surface_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->surface_temperature(), target);
  }

  // double surface_water_film = 2;
  if (this->surface_water_film() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->surface_water_film(), target);
  }

  // double surface_freezing_point = 3;
  if (this->surface_freezing_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->surface_freezing_point(), target);
  }

  // double surface_ice = 4;
  if (this->surface_ice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->surface_ice(), target);
  }

  // double surface_roughness = 5;
  if (this->surface_roughness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->surface_roughness(), target);
  }

  // double surface_texture = 6;
  if (this->surface_texture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->surface_texture(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification.RoadCondition)
  return target;
}

size_t Lane_Classification_RoadCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification.RoadCondition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double surface_temperature = 1;
  if (this->surface_temperature() != 0) {
    total_size += 1 + 8;
  }

  // double surface_water_film = 2;
  if (this->surface_water_film() != 0) {
    total_size += 1 + 8;
  }

  // double surface_freezing_point = 3;
  if (this->surface_freezing_point() != 0) {
    total_size += 1 + 8;
  }

  // double surface_ice = 4;
  if (this->surface_ice() != 0) {
    total_size += 1 + 8;
  }

  // double surface_roughness = 5;
  if (this->surface_roughness() != 0) {
    total_size += 1 + 8;
  }

  // double surface_texture = 6;
  if (this->surface_texture() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane_Classification_RoadCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane.Classification.RoadCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane_Classification_RoadCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane_Classification_RoadCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane.Classification.RoadCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane.Classification.RoadCondition)
    MergeFrom(*source);
  }
}

void Lane_Classification_RoadCondition::MergeFrom(const Lane_Classification_RoadCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification.RoadCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.surface_temperature() != 0) {
    set_surface_temperature(from.surface_temperature());
  }
  if (from.surface_water_film() != 0) {
    set_surface_water_film(from.surface_water_film());
  }
  if (from.surface_freezing_point() != 0) {
    set_surface_freezing_point(from.surface_freezing_point());
  }
  if (from.surface_ice() != 0) {
    set_surface_ice(from.surface_ice());
  }
  if (from.surface_roughness() != 0) {
    set_surface_roughness(from.surface_roughness());
  }
  if (from.surface_texture() != 0) {
    set_surface_texture(from.surface_texture());
  }
}

void Lane_Classification_RoadCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane.Classification.RoadCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane_Classification_RoadCondition::CopyFrom(const Lane_Classification_RoadCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification.RoadCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification_RoadCondition::IsInitialized() const {
  return true;
}

void Lane_Classification_RoadCondition::Swap(Lane_Classification_RoadCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane_Classification_RoadCondition::InternalSwap(Lane_Classification_RoadCondition* other) {
  using std::swap;
  swap(surface_temperature_, other->surface_temperature_);
  swap(surface_water_film_, other->surface_water_film_);
  swap(surface_freezing_point_, other->surface_freezing_point_);
  swap(surface_ice_, other->surface_ice_);
  swap(surface_roughness_, other->surface_roughness_);
  swap(surface_texture_, other->surface_texture_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane_Classification_RoadCondition::GetMetadata() const {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane_Classification_LanePairing::InitAsDefaultInstance() {
  ::osi3::_Lane_Classification_LanePairing_default_instance_._instance.get_mutable()->antecessor_lane_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_Lane_Classification_LanePairing_default_instance_._instance.get_mutable()->successor_lane_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
void Lane_Classification_LanePairing::clear_antecessor_lane_id() {
  if (GetArenaNoVirtual() == NULL && antecessor_lane_id_ != NULL) {
    delete antecessor_lane_id_;
  }
  antecessor_lane_id_ = NULL;
}
void Lane_Classification_LanePairing::clear_successor_lane_id() {
  if (GetArenaNoVirtual() == NULL && successor_lane_id_ != NULL) {
    delete successor_lane_id_;
  }
  successor_lane_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane_Classification_LanePairing::kAntecessorLaneIdFieldNumber;
const int Lane_Classification_LanePairing::kSuccessorLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane_Classification_LanePairing::Lane_Classification_LanePairing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification_LanePairing();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane.Classification.LanePairing)
}
Lane_Classification_LanePairing::Lane_Classification_LanePairing(const Lane_Classification_LanePairing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_antecessor_lane_id()) {
    antecessor_lane_id_ = new ::osi3::Identifier(*from.antecessor_lane_id_);
  } else {
    antecessor_lane_id_ = NULL;
  }
  if (from.has_successor_lane_id()) {
    successor_lane_id_ = new ::osi3::Identifier(*from.successor_lane_id_);
  } else {
    successor_lane_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification.LanePairing)
}

void Lane_Classification_LanePairing::SharedCtor() {
  ::memset(&antecessor_lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&successor_lane_id_) -
      reinterpret_cast<char*>(&antecessor_lane_id_)) + sizeof(successor_lane_id_));
  _cached_size_ = 0;
}

Lane_Classification_LanePairing::~Lane_Classification_LanePairing() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification.LanePairing)
  SharedDtor();
}

void Lane_Classification_LanePairing::SharedDtor() {
  if (this != internal_default_instance()) delete antecessor_lane_id_;
  if (this != internal_default_instance()) delete successor_lane_id_;
}

void Lane_Classification_LanePairing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane_Classification_LanePairing::descriptor() {
  ::protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane_Classification_LanePairing& Lane_Classification_LanePairing::default_instance() {
  ::protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification_LanePairing();
  return *internal_default_instance();
}

Lane_Classification_LanePairing* Lane_Classification_LanePairing::New(::google::protobuf::Arena* arena) const {
  Lane_Classification_LanePairing* n = new Lane_Classification_LanePairing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane_Classification_LanePairing::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification.LanePairing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && antecessor_lane_id_ != NULL) {
    delete antecessor_lane_id_;
  }
  antecessor_lane_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && successor_lane_id_ != NULL) {
    delete successor_lane_id_;
  }
  successor_lane_id_ = NULL;
  _internal_metadata_.Clear();
}

bool Lane_Classification_LanePairing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane.Classification.LanePairing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier antecessor_lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_antecessor_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier successor_lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_successor_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane.Classification.LanePairing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane.Classification.LanePairing)
  return false;
#undef DO_
}

void Lane_Classification_LanePairing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane.Classification.LanePairing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier antecessor_lane_id = 1;
  if (this->has_antecessor_lane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->antecessor_lane_id_, output);
  }

  // .osi3.Identifier successor_lane_id = 2;
  if (this->has_successor_lane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->successor_lane_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane.Classification.LanePairing)
}

::google::protobuf::uint8* Lane_Classification_LanePairing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification.LanePairing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier antecessor_lane_id = 1;
  if (this->has_antecessor_lane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->antecessor_lane_id_, deterministic, target);
  }

  // .osi3.Identifier successor_lane_id = 2;
  if (this->has_successor_lane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->successor_lane_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification.LanePairing)
  return target;
}

size_t Lane_Classification_LanePairing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification.LanePairing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier antecessor_lane_id = 1;
  if (this->has_antecessor_lane_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->antecessor_lane_id_);
  }

  // .osi3.Identifier successor_lane_id = 2;
  if (this->has_successor_lane_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->successor_lane_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane_Classification_LanePairing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane.Classification.LanePairing)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane_Classification_LanePairing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane_Classification_LanePairing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane.Classification.LanePairing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane.Classification.LanePairing)
    MergeFrom(*source);
  }
}

void Lane_Classification_LanePairing::MergeFrom(const Lane_Classification_LanePairing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification.LanePairing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_antecessor_lane_id()) {
    mutable_antecessor_lane_id()->::osi3::Identifier::MergeFrom(from.antecessor_lane_id());
  }
  if (from.has_successor_lane_id()) {
    mutable_successor_lane_id()->::osi3::Identifier::MergeFrom(from.successor_lane_id());
  }
}

void Lane_Classification_LanePairing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane.Classification.LanePairing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane_Classification_LanePairing::CopyFrom(const Lane_Classification_LanePairing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification.LanePairing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification_LanePairing::IsInitialized() const {
  return true;
}

void Lane_Classification_LanePairing::Swap(Lane_Classification_LanePairing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane_Classification_LanePairing::InternalSwap(Lane_Classification_LanePairing* other) {
  using std::swap;
  swap(antecessor_lane_id_, other->antecessor_lane_id_);
  swap(successor_lane_id_, other->successor_lane_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane_Classification_LanePairing::GetMetadata() const {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane_Classification::InitAsDefaultInstance() {
  ::osi3::_Lane_Classification_default_instance_._instance.get_mutable()->road_condition_ = const_cast< ::osi3::Lane_Classification_RoadCondition*>(
      ::osi3::Lane_Classification_RoadCondition::internal_default_instance());
}
void Lane_Classification::clear_centerline() {
  centerline_.Clear();
}
void Lane_Classification::clear_left_adjacent_lane_id() {
  left_adjacent_lane_id_.Clear();
}
void Lane_Classification::clear_right_adjacent_lane_id() {
  right_adjacent_lane_id_.Clear();
}
void Lane_Classification::clear_right_lane_boundary_id() {
  right_lane_boundary_id_.Clear();
}
void Lane_Classification::clear_left_lane_boundary_id() {
  left_lane_boundary_id_.Clear();
}
void Lane_Classification::clear_free_lane_boundary_id() {
  free_lane_boundary_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane_Classification::kTypeFieldNumber;
const int Lane_Classification::kIsHostVehicleLaneFieldNumber;
const int Lane_Classification::kCenterlineFieldNumber;
const int Lane_Classification::kCenterlineIsDrivingDirectionFieldNumber;
const int Lane_Classification::kLeftAdjacentLaneIdFieldNumber;
const int Lane_Classification::kRightAdjacentLaneIdFieldNumber;
const int Lane_Classification::kLanePairingFieldNumber;
const int Lane_Classification::kRightLaneBoundaryIdFieldNumber;
const int Lane_Classification::kLeftLaneBoundaryIdFieldNumber;
const int Lane_Classification::kFreeLaneBoundaryIdFieldNumber;
const int Lane_Classification::kRoadConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane_Classification::Lane_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane.Classification)
}
Lane_Classification::Lane_Classification(const Lane_Classification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      centerline_(from.centerline_),
      left_adjacent_lane_id_(from.left_adjacent_lane_id_),
      right_adjacent_lane_id_(from.right_adjacent_lane_id_),
      lane_pairing_(from.lane_pairing_),
      right_lane_boundary_id_(from.right_lane_boundary_id_),
      left_lane_boundary_id_(from.left_lane_boundary_id_),
      free_lane_boundary_id_(from.free_lane_boundary_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_road_condition()) {
    road_condition_ = new ::osi3::Lane_Classification_RoadCondition(*from.road_condition_);
  } else {
    road_condition_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&centerline_is_driving_direction_) -
    reinterpret_cast<char*>(&type_)) + sizeof(centerline_is_driving_direction_));
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification)
}

void Lane_Classification::SharedCtor() {
  ::memset(&road_condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&centerline_is_driving_direction_) -
      reinterpret_cast<char*>(&road_condition_)) + sizeof(centerline_is_driving_direction_));
  _cached_size_ = 0;
}

Lane_Classification::~Lane_Classification() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification)
  SharedDtor();
}

void Lane_Classification::SharedDtor() {
  if (this != internal_default_instance()) delete road_condition_;
}

void Lane_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane_Classification::descriptor() {
  ::protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane_Classification& Lane_Classification::default_instance() {
  ::protobuf_osi_5flane_2eproto::InitDefaultsLane_Classification();
  return *internal_default_instance();
}

Lane_Classification* Lane_Classification::New(::google::protobuf::Arena* arena) const {
  Lane_Classification* n = new Lane_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  centerline_.Clear();
  left_adjacent_lane_id_.Clear();
  right_adjacent_lane_id_.Clear();
  lane_pairing_.Clear();
  right_lane_boundary_id_.Clear();
  left_lane_boundary_id_.Clear();
  free_lane_boundary_id_.Clear();
  if (GetArenaNoVirtual() == NULL && road_condition_ != NULL) {
    delete road_condition_;
  }
  road_condition_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&centerline_is_driving_direction_) -
      reinterpret_cast<char*>(&type_)) + sizeof(centerline_is_driving_direction_));
  _internal_metadata_.Clear();
}

bool Lane_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Lane.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::Lane_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_host_vehicle_lane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_host_vehicle_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Vector3d centerline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_centerline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool centerline_is_driving_direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &centerline_is_driving_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier left_adjacent_lane_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_adjacent_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier right_adjacent_lane_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_adjacent_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_pairing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier right_lane_boundary_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_lane_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier left_lane_boundary_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_lane_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier free_lane_boundary_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_free_lane_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Lane.Classification.RoadCondition road_condition = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_road_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane.Classification)
  return false;
#undef DO_
}

void Lane_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Lane.Classification.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool is_host_vehicle_lane = 2;
  if (this->is_host_vehicle_lane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_host_vehicle_lane(), output);
  }

  // repeated .osi3.Vector3d centerline = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->centerline_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->centerline(static_cast<int>(i)), output);
  }

  // bool centerline_is_driving_direction = 4;
  if (this->centerline_is_driving_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->centerline_is_driving_direction(), output);
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_adjacent_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->left_adjacent_lane_id(static_cast<int>(i)), output);
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_adjacent_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->right_adjacent_lane_id(static_cast<int>(i)), output);
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_pairing_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lane_pairing(static_cast<int>(i)), output);
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_lane_boundary_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->right_lane_boundary_id(static_cast<int>(i)), output);
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_lane_boundary_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->left_lane_boundary_id(static_cast<int>(i)), output);
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->free_lane_boundary_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->free_lane_boundary_id(static_cast<int>(i)), output);
  }

  // .osi3.Lane.Classification.RoadCondition road_condition = 11;
  if (this->has_road_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->road_condition_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane.Classification)
}

::google::protobuf::uint8* Lane_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Lane.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool is_host_vehicle_lane = 2;
  if (this->is_host_vehicle_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_host_vehicle_lane(), target);
  }

  // repeated .osi3.Vector3d centerline = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->centerline_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->centerline(static_cast<int>(i)), deterministic, target);
  }

  // bool centerline_is_driving_direction = 4;
  if (this->centerline_is_driving_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->centerline_is_driving_direction(), target);
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_adjacent_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->left_adjacent_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_adjacent_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->right_adjacent_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_pairing_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->lane_pairing(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_lane_boundary_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->right_lane_boundary_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_lane_boundary_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->left_lane_boundary_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->free_lane_boundary_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->free_lane_boundary_id(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.Lane.Classification.RoadCondition road_condition = 11;
  if (this->has_road_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->road_condition_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification)
  return target;
}

size_t Lane_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.Vector3d centerline = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->centerline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->centerline(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->left_adjacent_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_adjacent_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->right_adjacent_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_adjacent_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_pairing_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_pairing(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->right_lane_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_lane_boundary_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->left_lane_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_lane_boundary_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->free_lane_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->free_lane_boundary_id(static_cast<int>(i)));
    }
  }

  // .osi3.Lane.Classification.RoadCondition road_condition = 11;
  if (this->has_road_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->road_condition_);
  }

  // .osi3.Lane.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool is_host_vehicle_lane = 2;
  if (this->is_host_vehicle_lane() != 0) {
    total_size += 1 + 1;
  }

  // bool centerline_is_driving_direction = 4;
  if (this->centerline_is_driving_direction() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane_Classification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane.Classification)
    MergeFrom(*source);
  }
}

void Lane_Classification::MergeFrom(const Lane_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  centerline_.MergeFrom(from.centerline_);
  left_adjacent_lane_id_.MergeFrom(from.left_adjacent_lane_id_);
  right_adjacent_lane_id_.MergeFrom(from.right_adjacent_lane_id_);
  lane_pairing_.MergeFrom(from.lane_pairing_);
  right_lane_boundary_id_.MergeFrom(from.right_lane_boundary_id_);
  left_lane_boundary_id_.MergeFrom(from.left_lane_boundary_id_);
  free_lane_boundary_id_.MergeFrom(from.free_lane_boundary_id_);
  if (from.has_road_condition()) {
    mutable_road_condition()->::osi3::Lane_Classification_RoadCondition::MergeFrom(from.road_condition());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_host_vehicle_lane() != 0) {
    set_is_host_vehicle_lane(from.is_host_vehicle_lane());
  }
  if (from.centerline_is_driving_direction() != 0) {
    set_centerline_is_driving_direction(from.centerline_is_driving_direction());
  }
}

void Lane_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane_Classification::CopyFrom(const Lane_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification::IsInitialized() const {
  return true;
}

void Lane_Classification::Swap(Lane_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane_Classification::InternalSwap(Lane_Classification* other) {
  using std::swap;
  centerline_.InternalSwap(&other->centerline_);
  left_adjacent_lane_id_.InternalSwap(&other->left_adjacent_lane_id_);
  right_adjacent_lane_id_.InternalSwap(&other->right_adjacent_lane_id_);
  lane_pairing_.InternalSwap(&other->lane_pairing_);
  right_lane_boundary_id_.InternalSwap(&other->right_lane_boundary_id_);
  left_lane_boundary_id_.InternalSwap(&other->left_lane_boundary_id_);
  free_lane_boundary_id_.InternalSwap(&other->free_lane_boundary_id_);
  swap(road_condition_, other->road_condition_);
  swap(type_, other->type_);
  swap(is_host_vehicle_lane_, other->is_host_vehicle_lane_);
  swap(centerline_is_driving_direction_, other->centerline_is_driving_direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane_Classification::GetMetadata() const {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::osi3::_Lane_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_Lane_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::Lane_Classification*>(
      ::osi3::Lane_Classification::internal_default_instance());
}
void Lane::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIdFieldNumber;
const int Lane::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5flane_2eproto::InitDefaultsLane();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::Lane_Classification(*from.classification_);
  } else {
    classification_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.Lane)
}

void Lane::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
  _cached_size_ = 0;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:osi3.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete classification_;
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::protobuf_osi_5flane_2eproto::InitDefaultsLane();
  return *internal_default_instance();
}

Lane* Lane::New(::google::protobuf::Arena* arena) const {
  Lane* n = new Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_ != NULL) {
    delete classification_;
  }
  classification_ = NULL;
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Lane.Classification classification = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->classification_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classification_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::Lane_Classification::MergeFrom(from.classification());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary_BoundaryPoint::InitAsDefaultInstance() {
  ::osi3::_LaneBoundary_BoundaryPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
void LaneBoundary_BoundaryPoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary_BoundaryPoint::kPositionFieldNumber;
const int LaneBoundary_BoundaryPoint::kWidthFieldNumber;
const int LaneBoundary_BoundaryPoint::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary_BoundaryPoint::LaneBoundary_BoundaryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary_BoundaryPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LaneBoundary.BoundaryPoint)
}
LaneBoundary_BoundaryPoint::LaneBoundary_BoundaryPoint(const LaneBoundary_BoundaryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary.BoundaryPoint)
}

void LaneBoundary_BoundaryPoint::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&position_)) + sizeof(height_));
  _cached_size_ = 0;
}

LaneBoundary_BoundaryPoint::~LaneBoundary_BoundaryPoint() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary.BoundaryPoint)
  SharedDtor();
}

void LaneBoundary_BoundaryPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void LaneBoundary_BoundaryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundary_BoundaryPoint::descriptor() {
  ::protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary_BoundaryPoint& LaneBoundary_BoundaryPoint::default_instance() {
  ::protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary_BoundaryPoint();
  return *internal_default_instance();
}

LaneBoundary_BoundaryPoint* LaneBoundary_BoundaryPoint::New(::google::protobuf::Arena* arena) const {
  LaneBoundary_BoundaryPoint* n = new LaneBoundary_BoundaryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundary_BoundaryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary.BoundaryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool LaneBoundary_BoundaryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LaneBoundary.BoundaryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Vector3d position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LaneBoundary.BoundaryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LaneBoundary.BoundaryPoint)
  return false;
#undef DO_
}

void LaneBoundary_BoundaryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LaneBoundary.BoundaryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // double width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // double height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LaneBoundary.BoundaryPoint)
}

::google::protobuf::uint8* LaneBoundary_BoundaryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary.BoundaryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->position_, deterministic, target);
  }

  // double width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // double height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary.BoundaryPoint)
  return target;
}

size_t LaneBoundary_BoundaryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary.BoundaryPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // double width = 2;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 3;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundary_BoundaryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LaneBoundary.BoundaryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_BoundaryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary_BoundaryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LaneBoundary.BoundaryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LaneBoundary.BoundaryPoint)
    MergeFrom(*source);
  }
}

void LaneBoundary_BoundaryPoint::MergeFrom(const LaneBoundary_BoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary.BoundaryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void LaneBoundary_BoundaryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LaneBoundary.BoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_BoundaryPoint::CopyFrom(const LaneBoundary_BoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary.BoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_BoundaryPoint::IsInitialized() const {
  return true;
}

void LaneBoundary_BoundaryPoint::Swap(LaneBoundary_BoundaryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundary_BoundaryPoint::InternalSwap(LaneBoundary_BoundaryPoint* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundary_BoundaryPoint::GetMetadata() const {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary_Classification::InitAsDefaultInstance() {
}
void LaneBoundary_Classification::clear_limiting_structure_id() {
  limiting_structure_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary_Classification::kTypeFieldNumber;
const int LaneBoundary_Classification::kColorFieldNumber;
const int LaneBoundary_Classification::kLimitingStructureIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary_Classification::LaneBoundary_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary_Classification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LaneBoundary.Classification)
}
LaneBoundary_Classification::LaneBoundary_Classification(const LaneBoundary_Classification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      limiting_structure_id_(from.limiting_structure_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary.Classification)
}

void LaneBoundary_Classification::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&type_)) + sizeof(color_));
  _cached_size_ = 0;
}

LaneBoundary_Classification::~LaneBoundary_Classification() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary.Classification)
  SharedDtor();
}

void LaneBoundary_Classification::SharedDtor() {
}

void LaneBoundary_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundary_Classification::descriptor() {
  ::protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary_Classification& LaneBoundary_Classification::default_instance() {
  ::protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary_Classification();
  return *internal_default_instance();
}

LaneBoundary_Classification* LaneBoundary_Classification::New(::google::protobuf::Arena* arena) const {
  LaneBoundary_Classification* n = new LaneBoundary_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundary_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limiting_structure_id_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&type_)) + sizeof(color_));
  _internal_metadata_.Clear();
}

bool LaneBoundary_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LaneBoundary.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.LaneBoundary.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::LaneBoundary_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LaneBoundary.Classification.Color color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::LaneBoundary_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier limiting_structure_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_limiting_structure_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LaneBoundary.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LaneBoundary.Classification)
  return false;
#undef DO_
}

void LaneBoundary_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LaneBoundary.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.LaneBoundary.Classification.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.LaneBoundary.Classification.Color color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // repeated .osi3.Identifier limiting_structure_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limiting_structure_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limiting_structure_id(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LaneBoundary.Classification)
}

::google::protobuf::uint8* LaneBoundary_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.LaneBoundary.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.LaneBoundary.Classification.Color color = 2;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // repeated .osi3.Identifier limiting_structure_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limiting_structure_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->limiting_structure_id(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary.Classification)
  return target;
}

size_t LaneBoundary_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary.Classification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.Identifier limiting_structure_id = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->limiting_structure_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limiting_structure_id(static_cast<int>(i)));
    }
  }

  // .osi3.LaneBoundary.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.LaneBoundary.Classification.Color color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundary_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LaneBoundary.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_Classification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LaneBoundary.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LaneBoundary.Classification)
    MergeFrom(*source);
  }
}

void LaneBoundary_Classification::MergeFrom(const LaneBoundary_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limiting_structure_id_.MergeFrom(from.limiting_structure_id_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void LaneBoundary_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LaneBoundary.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_Classification::CopyFrom(const LaneBoundary_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_Classification::IsInitialized() const {
  return true;
}

void LaneBoundary_Classification::Swap(LaneBoundary_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundary_Classification::InternalSwap(LaneBoundary_Classification* other) {
  using std::swap;
  limiting_structure_id_.InternalSwap(&other->limiting_structure_id_);
  swap(type_, other->type_);
  swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundary_Classification::GetMetadata() const {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary::InitAsDefaultInstance() {
  ::osi3::_LaneBoundary_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LaneBoundary_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::LaneBoundary_Classification*>(
      ::osi3::LaneBoundary_Classification::internal_default_instance());
}
void LaneBoundary::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary::kIdFieldNumber;
const int LaneBoundary::kBoundaryLineFieldNumber;
const int LaneBoundary::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary::LaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      boundary_line_(from.boundary_line_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::LaneBoundary_Classification(*from.classification_);
  } else {
    classification_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
  _cached_size_ = 0;
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary)
  SharedDtor();
}

void LaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete classification_;
}

void LaneBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundary::descriptor() {
  ::protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary& LaneBoundary::default_instance() {
  ::protobuf_osi_5flane_2eproto::InitDefaultsLaneBoundary();
  return *internal_default_instance();
}

LaneBoundary* LaneBoundary::New(::google::protobuf::Arena* arena) const {
  LaneBoundary* n = new LaneBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_line_.Clear();
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_ != NULL) {
    delete classification_;
  }
  classification_ = NULL;
  _internal_metadata_.Clear();
}

bool LaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LaneBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_boundary_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LaneBoundary.Classification classification = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LaneBoundary)
  return false;
#undef DO_
}

void LaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundary_line(static_cast<int>(i)), output);
  }

  // .osi3.LaneBoundary.Classification classification = 3;
  if (this->has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->classification_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LaneBoundary)
}

::google::protobuf::uint8* LaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->boundary_line(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.LaneBoundary.Classification classification = 3;
  if (this->has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->classification_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boundary_line(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .osi3.LaneBoundary.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classification_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LaneBoundary)
    MergeFrom(*source);
  }
}

void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_line_.MergeFrom(from.boundary_line_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::LaneBoundary_Classification::MergeFrom(from.classification());
  }
}

void LaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::Swap(LaneBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  boundary_line_.InternalSwap(&other->boundary_line_);
  swap(id_, other->id_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundary::GetMetadata() const {
  protobuf_osi_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
