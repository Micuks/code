// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_object.proto

#include "osi_object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class StationaryObject_ClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StationaryObject_Classification>
      _instance;
} _StationaryObject_Classification_default_instance_;
class StationaryObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StationaryObject>
      _instance;
} _StationaryObject_default_instance_;
class MovingObject_VehicleAttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovingObject_VehicleAttributes>
      _instance;
} _MovingObject_VehicleAttributes_default_instance_;
class MovingObject_VehicleClassification_LightStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovingObject_VehicleClassification_LightState>
      _instance;
} _MovingObject_VehicleClassification_LightState_default_instance_;
class MovingObject_VehicleClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovingObject_VehicleClassification>
      _instance;
} _MovingObject_VehicleClassification_default_instance_;
class MovingObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovingObject>
      _instance;
} _MovingObject_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5fobject_2eproto {
void InitDefaultsStationaryObject_ClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_StationaryObject_Classification_default_instance_;
    new (ptr) ::osi3::StationaryObject_Classification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::StationaryObject_Classification::InitAsDefaultInstance();
}

void InitDefaultsStationaryObject_Classification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStationaryObject_ClassificationImpl);
}

void InitDefaultsStationaryObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsBaseStationary();
  protobuf_osi_5fobject_2eproto::InitDefaultsStationaryObject_Classification();
  {
    void* ptr = &::osi3::_StationaryObject_default_instance_;
    new (ptr) ::osi3::StationaryObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::StationaryObject::InitAsDefaultInstance();
}

void InitDefaultsStationaryObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStationaryObjectImpl);
}

void InitDefaultsMovingObject_VehicleAttributesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsVector3d();
  {
    void* ptr = &::osi3::_MovingObject_VehicleAttributes_default_instance_;
    new (ptr) ::osi3::MovingObject_VehicleAttributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_VehicleAttributes::InitAsDefaultInstance();
}

void InitDefaultsMovingObject_VehicleAttributes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMovingObject_VehicleAttributesImpl);
}

void InitDefaultsMovingObject_VehicleClassification_LightStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::osi3::_MovingObject_VehicleClassification_LightState_default_instance_;
    new (ptr) ::osi3::MovingObject_VehicleClassification_LightState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_VehicleClassification_LightState::InitAsDefaultInstance();
}

void InitDefaultsMovingObject_VehicleClassification_LightState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMovingObject_VehicleClassification_LightStateImpl);
}

void InitDefaultsMovingObject_VehicleClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleClassification_LightState();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_MovingObject_VehicleClassification_default_instance_;
    new (ptr) ::osi3::MovingObject_VehicleClassification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_VehicleClassification::InitAsDefaultInstance();
}

void InitDefaultsMovingObject_VehicleClassification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMovingObject_VehicleClassificationImpl);
}

void InitDefaultsMovingObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsBaseMoving();
  protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleAttributes();
  protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleClassification();
  {
    void* ptr = &::osi3::_MovingObject_default_instance_;
    new (ptr) ::osi3::MovingObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject::InitAsDefaultInstance();
}

void InitDefaultsMovingObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMovingObjectImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject_Classification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject_Classification, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject_Classification, density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject_Classification, color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject, classification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::StationaryObject, model_reference_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, driver_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, radius_wheel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, number_wheels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, bbcenter_to_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, bbcenter_to_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, ground_clearance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, indicator_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, front_fog_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, rear_fog_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, head_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, high_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, reversing_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, brake_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, license_plate_illumination_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, emergency_vehicle_illumination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, service_vehicle_illumination_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, has_trailer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, trailer_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, assigned_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, vehicle_attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, vehicle_classification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::MovingObject, model_reference_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::StationaryObject_Classification)},
  { 9, -1, sizeof(::osi3::StationaryObject)},
  { 18, -1, sizeof(::osi3::MovingObject_VehicleAttributes)},
  { 29, -1, sizeof(::osi3::MovingObject_VehicleClassification_LightState)},
  { 44, -1, sizeof(::osi3::MovingObject_VehicleClassification)},
  { 53, -1, sizeof(::osi3::MovingObject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_StationaryObject_Classification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_StationaryObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_MovingObject_VehicleAttributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_MovingObject_VehicleClassification_LightState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_MovingObject_VehicleClassification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_MovingObject_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_object.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020osi_object.proto\022\004osi3\032\020osi_common.pro"
      "to\"\334\n\n\020StationaryObject\022\034\n\002id\030\001 \001(\0132\020.os"
      "i3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseS"
      "tationary\022=\n\016classification\030\003 \001(\0132%.osi3"
      ".StationaryObject.Classification\022\027\n\017mode"
      "l_reference\030\004 \001(\t\032\255\t\n\016Classification\0228\n\004"
      "type\030\001 \001(\0162*.osi3.StationaryObject.Class"
      "ification.Type\022@\n\010material\030\002 \001(\0162..osi3."
      "StationaryObject.Classification.Material"
      "\022>\n\007density\030\003 \001(\0162-.osi3.StationaryObjec"
      "t.Classification.Density\022:\n\005color\030\004 \001(\0162"
      "+.osi3.StationaryObject.Classification.C"
      "olor\"\366\002\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_"
      "OTHER\020\001\022\017\n\013TYPE_BRIDGE\020\002\022\021\n\rTYPE_BUILDIN"
      "G\020\003\022\r\n\tTYPE_POLE\020\004\022\016\n\nTYPE_PYLON\020\005\022\023\n\017TY"
      "PE_DELINEATOR\020\006\022\r\n\tTYPE_TREE\020\007\022\020\n\014TYPE_B"
      "ARRIER\020\010\022\023\n\017TYPE_VEGETATION\020\t\022\022\n\016TYPE_CU"
      "RBSTONE\020\n\022\r\n\tTYPE_WALL\020\013\022\033\n\027TYPE_VERTICA"
      "L_STRUCTURE\020\014\022\036\n\032TYPE_RECTANGULAR_STRUCT"
      "URE\020\r\022\033\n\027TYPE_OVERHEAD_STRUCTURE\020\016\022\035\n\031TY"
      "PE_REFLECTIVE_STRUCTURE\020\017\022\"\n\036TYPE_CONSTR"
      "UCTION_SITE_ELEMENT\020\020\"\301\001\n\010Material\022\024\n\020MA"
      "TERIAL_UNKNOWN\020\000\022\022\n\016MATERIAL_OTHER\020\001\022\021\n\r"
      "MATERIAL_WOOD\020\002\022\024\n\020MATERIAL_PLASTIC\020\003\022\025\n"
      "\021MATERIAL_CONCRETE\020\004\022\022\n\016MATERIAL_METAL\020\005"
      "\022\022\n\016MATERIAL_STONE\020\006\022\021\n\rMATERIAL_GLAS\020\007\022"
      "\020\n\014MATERIAL_MUD\020\010\"\237\001\n\007Density\022\023\n\017DENSITY"
      "_UNKNOWN\020\000\022\021\n\rDENSITY_OTHER\020\001\022\021\n\rDENSITY"
      "_SOLID\020\002\022\026\n\022DENSITY_SMALL_MESH\020\003\022\027\n\023DENS"
      "ITY_MEDIAN_MESH\020\004\022\026\n\022DENSITY_LARGE_MESH\020"
      "\005\022\020\n\014DENSITY_OPEN\020\006\"\303\001\n\005Color\022\021\n\rCOLOR_U"
      "NKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\020\n\014COLOR_YELLO"
      "W\020\002\022\017\n\013COLOR_GREEN\020\003\022\016\n\nCOLOR_BLUE\020\004\022\020\n\014"
      "COLOR_VIOLET\020\005\022\r\n\tCOLOR_RED\020\006\022\020\n\014COLOR_O"
      "RANGE\020\007\022\017\n\013COLOR_BLACK\020\010\022\016\n\nCOLOR_GREY\020\t"
      "\022\017\n\013COLOR_WHITE\020\n\"\353\025\n\014MovingObject\022\034\n\002id"
      "\030\001 \001(\0132\020.osi3.Identifier\022\036\n\004base\030\002 \001(\0132\020"
      ".osi3.BaseMoving\022%\n\004type\030\003 \001(\0162\027.osi3.Mo"
      "vingObject.Type\022*\n\020assigned_lane_id\030\004 \003("
      "\0132\020.osi3.Identifier\022@\n\022vehicle_attribute"
      "s\030\005 \001(\0132$.osi3.MovingObject.VehicleAttri"
      "butes\022H\n\026vehicle_classification\030\006 \001(\0132(."
      "osi3.MovingObject.VehicleClassification\022"
      "\027\n\017model_reference\030\007 \001(\t\032\324\001\n\021VehicleAttr"
      "ibutes\022#\n\tdriver_id\030\001 \001(\0132\020.osi3.Identif"
      "ier\022\024\n\014radius_wheel\030\002 \001(\001\022\025\n\rnumber_whee"
      "ls\030\003 \001(\r\022(\n\020bbcenter_to_rear\030\004 \001(\0132\016.osi"
      "3.Vector3d\022)\n\021bbcenter_to_front\030\005 \001(\0132\016."
      "osi3.Vector3d\022\030\n\020ground_clearance\030\006 \001(\001\032"
      "\353\020\n\025VehicleClassification\022;\n\004type\030\001 \001(\0162"
      "-.osi3.MovingObject.VehicleClassificatio"
      "n.Type\022H\n\013light_state\030\002 \001(\01323.osi3.Movin"
      "gObject.VehicleClassification.LightState"
      "\022\023\n\013has_trailer\030\003 \001(\010\022$\n\ntrailer_id\030\004 \001("
      "\0132\020.osi3.Identifier\032\323\014\n\nLightState\022[\n\017in"
      "dicator_state\030\001 \001(\0162B.osi3.MovingObject."
      "VehicleClassification.LightState.Indicat"
      "orState\022^\n\017front_fog_light\030\002 \001(\0162E.osi3."
      "MovingObject.VehicleClassification.Light"
      "State.GenericLightState\022]\n\016rear_fog_ligh"
      "t\030\003 \001(\0162E.osi3.MovingObject.VehicleClass"
      "ification.LightState.GenericLightState\022Y"
      "\n\nhead_light\030\004 \001(\0162E.osi3.MovingObject.V"
      "ehicleClassification.LightState.GenericL"
      "ightState\022X\n\thigh_beam\030\005 \001(\0162E.osi3.Movi"
      "ngObject.VehicleClassification.LightStat"
      "e.GenericLightState\022^\n\017reversing_light\030\006"
      " \001(\0162E.osi3.MovingObject.VehicleClassifi"
      "cation.LightState.GenericLightState\022^\n\021b"
      "rake_light_state\030\007 \001(\0162C.osi3.MovingObje"
      "ct.VehicleClassification.LightState.Brak"
      "eLightState\022n\n\037license_plate_illuminatio"
      "n_rear\030\010 \001(\0162E.osi3.MovingObject.Vehicle"
      "Classification.LightState.GenericLightSt"
      "ate\022m\n\036emergency_vehicle_illumination\030\t "
      "\001(\0162E.osi3.MovingObject.VehicleClassific"
      "ation.LightState.GenericLightState\022k\n\034se"
      "rvice_vehicle_illumination\030\n \001(\0162E.osi3."
      "MovingObject.VehicleClassification.Light"
      "State.GenericLightState\"\263\001\n\016IndicatorSta"
      "te\022\033\n\027INDICATOR_STATE_UNKNOWN\020\000\022\031\n\025INDIC"
      "ATOR_STATE_OTHER\020\001\022\027\n\023INDICATOR_STATE_OF"
      "F\020\002\022\030\n\024INDICATOR_STATE_LEFT\020\003\022\031\n\025INDICAT"
      "OR_STATE_RIGHT\020\004\022\033\n\027INDICATOR_STATE_WARN"
      "ING\020\005\"\212\002\n\021GenericLightState\022\037\n\033GENERIC_L"
      "IGHT_STATE_UNKNOWN\020\000\022\035\n\031GENERIC_LIGHT_ST"
      "ATE_OTHER\020\001\022\033\n\027GENERIC_LIGHT_STATE_OFF\020\002"
      "\022\032\n\026GENERIC_LIGHT_STATE_ON\020\003\022%\n!GENERIC_"
      "LIGHT_STATE_FLASHING_BLUE\020\004\022-\n)GENERIC_L"
      "IGHT_STATE_FLASHING_BLUE_AND_RED\020\005\022&\n\"GE"
      "NERIC_LIGHT_STATE_FLASHING_AMBER\020\006\"\244\001\n\017B"
      "rakeLightState\022\035\n\031BRAKE_LIGHT_STATE_UNKN"
      "OWN\020\000\022\033\n\027BRAKE_LIGHT_STATE_OTHER\020\001\022\031\n\025BR"
      "AKE_LIGHT_STATE_OFF\020\002\022\034\n\030BRAKE_LIGHT_STA"
      "TE_NORMAL\020\003\022\034\n\030BRAKE_LIGHT_STATE_STRONG\020"
      "\004\"\271\002\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTH"
      "ER\020\001\022\022\n\016TYPE_SMALL_CAR\020\002\022\024\n\020TYPE_COMPACT"
      "_CAR\020\003\022\023\n\017TYPE_MEDIUM_CAR\020\004\022\023\n\017TYPE_LUXU"
      "RY_CAR\020\005\022\025\n\021TYPE_DELIVERY_VAN\020\006\022\024\n\020TYPE_"
      "HEAVY_TRUCK\020\007\022\024\n\020TYPE_SEMITRAILER\020\010\022\020\n\014T"
      "YPE_TRAILER\020\t\022\022\n\016TYPE_MOTORBIKE\020\n\022\020\n\014TYP"
      "E_BICYCLE\020\013\022\014\n\010TYPE_BUS\020\014\022\r\n\tTYPE_TRAM\020\r"
      "\022\016\n\nTYPE_TRAIN\020\016\022\023\n\017TYPE_WHEELCHAIR\020\017\"`\n"
      "\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022"
      "\020\n\014TYPE_VEHICLE\020\002\022\023\n\017TYPE_PEDESTRIAN\020\003\022\017"
      "\n\013TYPE_ANIMAL\020\004B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_object.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5fobject_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Type_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[0];
}
bool StationaryObject_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_UNKNOWN;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OTHER;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BRIDGE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BUILDING;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_POLE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_PYLON;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_DELINEATOR;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_TREE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BARRIER;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VEGETATION;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CURBSTONE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_WALL;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VERTICAL_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_RECTANGULAR_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OVERHEAD_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_REFLECTIVE_STRUCTURE;
const StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CONSTRUCTION_SITE_ELEMENT;
const StationaryObject_Classification_Type StationaryObject_Classification::Type_MIN;
const StationaryObject_Classification_Type StationaryObject_Classification::Type_MAX;
const int StationaryObject_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Material_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[1];
}
bool StationaryObject_Classification_Material_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_UNKNOWN;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_OTHER;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_WOOD;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_PLASTIC;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_CONCRETE;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_METAL;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_STONE;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_GLAS;
const StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_MUD;
const StationaryObject_Classification_Material StationaryObject_Classification::Material_MIN;
const StationaryObject_Classification_Material StationaryObject_Classification::Material_MAX;
const int StationaryObject_Classification::Material_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Density_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[2];
}
bool StationaryObject_Classification_Density_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_UNKNOWN;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OTHER;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SOLID;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SMALL_MESH;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_MEDIAN_MESH;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_LARGE_MESH;
const StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OPEN;
const StationaryObject_Classification_Density StationaryObject_Classification::Density_MIN;
const StationaryObject_Classification_Density StationaryObject_Classification::Density_MAX;
const int StationaryObject_Classification::Density_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StationaryObject_Classification_Color_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[3];
}
bool StationaryObject_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_UNKNOWN;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_OTHER;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_YELLOW;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREEN;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLUE;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_VIOLET;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_RED;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_ORANGE;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLACK;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREY;
const StationaryObject_Classification_Color StationaryObject_Classification::COLOR_WHITE;
const StationaryObject_Classification_Color StationaryObject_Classification::Color_MIN;
const StationaryObject_Classification_Color StationaryObject_Classification::Color_MAX;
const int StationaryObject_Classification::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_IndicatorState_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[4];
}
bool MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OTHER;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OFF;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_LEFT;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_RIGHT;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_WARNING;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MIN;
const MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MAX;
const int MovingObject_VehicleClassification_LightState::IndicatorState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_GenericLightState_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[5];
}
bool MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OTHER;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OFF;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_ON;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_BLUE;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_BLUE_AND_RED;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_AMBER;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MIN;
const MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MAX;
const int MovingObject_VehicleClassification_LightState::GenericLightState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[6];
}
bool MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_UNKNOWN;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OTHER;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OFF;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_NORMAL;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_STRONG;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MIN;
const MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MAX;
const int MovingObject_VehicleClassification_LightState::BrakeLightState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_VehicleClassification_Type_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[7];
}
bool MovingObject_VehicleClassification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_UNKNOWN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_OTHER;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SMALL_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_COMPACT_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MEDIUM_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_LUXURY_CAR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_DELIVERY_VAN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_HEAVY_TRUCK;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SEMITRAILER;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAILER;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MOTORBIKE;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BICYCLE;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BUS;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAM;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAIN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_WHEELCHAIR;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MIN;
const MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MAX;
const int MovingObject_VehicleClassification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MovingObject_Type_descriptor() {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5fobject_2eproto::file_level_enum_descriptors[8];
}
bool MovingObject_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovingObject_Type MovingObject::TYPE_UNKNOWN;
const MovingObject_Type MovingObject::TYPE_OTHER;
const MovingObject_Type MovingObject::TYPE_VEHICLE;
const MovingObject_Type MovingObject::TYPE_PEDESTRIAN;
const MovingObject_Type MovingObject::TYPE_ANIMAL;
const MovingObject_Type MovingObject::Type_MIN;
const MovingObject_Type MovingObject::Type_MAX;
const int MovingObject::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void StationaryObject_Classification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StationaryObject_Classification::kTypeFieldNumber;
const int StationaryObject_Classification::kMaterialFieldNumber;
const int StationaryObject_Classification::kDensityFieldNumber;
const int StationaryObject_Classification::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StationaryObject_Classification::StationaryObject_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fobject_2eproto::InitDefaultsStationaryObject_Classification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.StationaryObject.Classification)
}
StationaryObject_Classification::StationaryObject_Classification(const StationaryObject_Classification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject.Classification)
}

void StationaryObject_Classification::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&type_)) + sizeof(color_));
  _cached_size_ = 0;
}

StationaryObject_Classification::~StationaryObject_Classification() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject.Classification)
  SharedDtor();
}

void StationaryObject_Classification::SharedDtor() {
}

void StationaryObject_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationaryObject_Classification::descriptor() {
  ::protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StationaryObject_Classification& StationaryObject_Classification::default_instance() {
  ::protobuf_osi_5fobject_2eproto::InitDefaultsStationaryObject_Classification();
  return *internal_default_instance();
}

StationaryObject_Classification* StationaryObject_Classification::New(::google::protobuf::Arena* arena) const {
  StationaryObject_Classification* n = new StationaryObject_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StationaryObject_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&type_)) + sizeof(color_));
  _internal_metadata_.Clear();
}

bool StationaryObject_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.StationaryObject.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.StationaryObject.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::StationaryObject_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification.Material material = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_material(static_cast< ::osi3::StationaryObject_Classification_Material >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification.Density density = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_density(static_cast< ::osi3::StationaryObject_Classification_Density >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification.Color color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::StationaryObject_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.StationaryObject.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.StationaryObject.Classification)
  return false;
#undef DO_
}

void StationaryObject_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.StationaryObject.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.StationaryObject.Classification.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.StationaryObject.Classification.Material material = 2;
  if (this->material() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->material(), output);
  }

  // .osi3.StationaryObject.Classification.Density density = 3;
  if (this->density() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->density(), output);
  }

  // .osi3.StationaryObject.Classification.Color color = 4;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->color(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.StationaryObject.Classification)
}

::google::protobuf::uint8* StationaryObject_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.StationaryObject.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.StationaryObject.Classification.Material material = 2;
  if (this->material() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->material(), target);
  }

  // .osi3.StationaryObject.Classification.Density density = 3;
  if (this->density() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->density(), target);
  }

  // .osi3.StationaryObject.Classification.Color color = 4;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->color(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject.Classification)
  return target;
}

size_t StationaryObject_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject.Classification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.StationaryObject.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.StationaryObject.Classification.Material material = 2;
  if (this->material() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->material());
  }

  // .osi3.StationaryObject.Classification.Density density = 3;
  if (this->density() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->density());
  }

  // .osi3.StationaryObject.Classification.Color color = 4;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationaryObject_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.StationaryObject.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const StationaryObject_Classification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StationaryObject_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.StationaryObject.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.StationaryObject.Classification)
    MergeFrom(*source);
  }
}

void StationaryObject_Classification::MergeFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.material() != 0) {
    set_material(from.material());
  }
  if (from.density() != 0) {
    set_density(from.density());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void StationaryObject_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.StationaryObject.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationaryObject_Classification::CopyFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject_Classification::IsInitialized() const {
  return true;
}

void StationaryObject_Classification::Swap(StationaryObject_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StationaryObject_Classification::InternalSwap(StationaryObject_Classification* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(material_, other->material_);
  swap(density_, other->density_);
  swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StationaryObject_Classification::GetMetadata() const {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StationaryObject::InitAsDefaultInstance() {
  ::osi3::_StationaryObject_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_StationaryObject_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_StationaryObject_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::StationaryObject_Classification*>(
      ::osi3::StationaryObject_Classification::internal_default_instance());
}
void StationaryObject::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void StationaryObject::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StationaryObject::kIdFieldNumber;
const int StationaryObject::kBaseFieldNumber;
const int StationaryObject::kClassificationFieldNumber;
const int StationaryObject::kModelReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StationaryObject::StationaryObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fobject_2eproto::InitDefaultsStationaryObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.StationaryObject)
}
StationaryObject::StationaryObject(const StationaryObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_reference().size() > 0) {
    model_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::StationaryObject_Classification(*from.classification_);
  } else {
    classification_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject)
}

void StationaryObject::SharedCtor() {
  model_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
  _cached_size_ = 0;
}

StationaryObject::~StationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject)
  SharedDtor();
}

void StationaryObject::SharedDtor() {
  model_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void StationaryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationaryObject::descriptor() {
  ::protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StationaryObject& StationaryObject::default_instance() {
  ::protobuf_osi_5fobject_2eproto::InitDefaultsStationaryObject();
  return *internal_default_instance();
}

StationaryObject* StationaryObject::New(::google::protobuf::Arena* arena) const {
  StationaryObject* n = new StationaryObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_ != NULL) {
    delete classification_;
  }
  classification_ = NULL;
  _internal_metadata_.Clear();
}

bool StationaryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.StationaryObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification classification = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "osi3.StationaryObject.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.StationaryObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.StationaryObject)
  return false;
#undef DO_
}

void StationaryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.StationaryObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // .osi3.StationaryObject.Classification classification = 3;
  if (this->has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->classification_, output);
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.StationaryObject.model_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model_reference(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.StationaryObject)
}

::google::protobuf::uint8* StationaryObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->base_, deterministic, target);
  }

  // .osi3.StationaryObject.Classification classification = 3;
  if (this->has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->classification_, deterministic, target);
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.StationaryObject.model_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model_reference(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject)
  return target;
}

size_t StationaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_);
  }

  // .osi3.StationaryObject.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classification_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationaryObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.StationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  const StationaryObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StationaryObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.StationaryObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.StationaryObject)
    MergeFrom(*source);
  }
}

void StationaryObject::MergeFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::StationaryObject_Classification::MergeFrom(from.classification());
  }
}

void StationaryObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.StationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationaryObject::CopyFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject::IsInitialized() const {
  return true;
}

void StationaryObject::Swap(StationaryObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StationaryObject::InternalSwap(StationaryObject* other) {
  using std::swap;
  model_reference_.Swap(&other->model_reference_);
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StationaryObject::GetMetadata() const {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MovingObject_VehicleAttributes::InitAsDefaultInstance() {
  ::osi3::_MovingObject_VehicleAttributes_default_instance_._instance.get_mutable()->driver_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_MovingObject_VehicleAttributes_default_instance_._instance.get_mutable()->bbcenter_to_rear_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_MovingObject_VehicleAttributes_default_instance_._instance.get_mutable()->bbcenter_to_front_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
void MovingObject_VehicleAttributes::clear_driver_id() {
  if (GetArenaNoVirtual() == NULL && driver_id_ != NULL) {
    delete driver_id_;
  }
  driver_id_ = NULL;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_rear() {
  if (GetArenaNoVirtual() == NULL && bbcenter_to_rear_ != NULL) {
    delete bbcenter_to_rear_;
  }
  bbcenter_to_rear_ = NULL;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_front() {
  if (GetArenaNoVirtual() == NULL && bbcenter_to_front_ != NULL) {
    delete bbcenter_to_front_;
  }
  bbcenter_to_front_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject_VehicleAttributes::kDriverIdFieldNumber;
const int MovingObject_VehicleAttributes::kRadiusWheelFieldNumber;
const int MovingObject_VehicleAttributes::kNumberWheelsFieldNumber;
const int MovingObject_VehicleAttributes::kBbcenterToRearFieldNumber;
const int MovingObject_VehicleAttributes::kBbcenterToFrontFieldNumber;
const int MovingObject_VehicleAttributes::kGroundClearanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject_VehicleAttributes::MovingObject_VehicleAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleAttributes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleAttributes)
}
MovingObject_VehicleAttributes::MovingObject_VehicleAttributes(const MovingObject_VehicleAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_driver_id()) {
    driver_id_ = new ::osi3::Identifier(*from.driver_id_);
  } else {
    driver_id_ = NULL;
  }
  if (from.has_bbcenter_to_rear()) {
    bbcenter_to_rear_ = new ::osi3::Vector3d(*from.bbcenter_to_rear_);
  } else {
    bbcenter_to_rear_ = NULL;
  }
  if (from.has_bbcenter_to_front()) {
    bbcenter_to_front_ = new ::osi3::Vector3d(*from.bbcenter_to_front_);
  } else {
    bbcenter_to_front_ = NULL;
  }
  ::memcpy(&radius_wheel_, &from.radius_wheel_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_wheels_) -
    reinterpret_cast<char*>(&radius_wheel_)) + sizeof(number_wheels_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleAttributes)
}

void MovingObject_VehicleAttributes::SharedCtor() {
  ::memset(&driver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_wheels_) -
      reinterpret_cast<char*>(&driver_id_)) + sizeof(number_wheels_));
  _cached_size_ = 0;
}

MovingObject_VehicleAttributes::~MovingObject_VehicleAttributes() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleAttributes)
  SharedDtor();
}

void MovingObject_VehicleAttributes::SharedDtor() {
  if (this != internal_default_instance()) delete driver_id_;
  if (this != internal_default_instance()) delete bbcenter_to_rear_;
  if (this != internal_default_instance()) delete bbcenter_to_front_;
}

void MovingObject_VehicleAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject_VehicleAttributes::descriptor() {
  ::protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovingObject_VehicleAttributes& MovingObject_VehicleAttributes::default_instance() {
  ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleAttributes();
  return *internal_default_instance();
}

MovingObject_VehicleAttributes* MovingObject_VehicleAttributes::New(::google::protobuf::Arena* arena) const {
  MovingObject_VehicleAttributes* n = new MovingObject_VehicleAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject_VehicleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && driver_id_ != NULL) {
    delete driver_id_;
  }
  driver_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && bbcenter_to_rear_ != NULL) {
    delete bbcenter_to_rear_;
  }
  bbcenter_to_rear_ = NULL;
  if (GetArenaNoVirtual() == NULL && bbcenter_to_front_ != NULL) {
    delete bbcenter_to_front_;
  }
  bbcenter_to_front_ = NULL;
  ::memset(&radius_wheel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_wheels_) -
      reinterpret_cast<char*>(&radius_wheel_)) + sizeof(number_wheels_));
  _internal_metadata_.Clear();
}

bool MovingObject_VehicleAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier driver_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_driver_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius_wheel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_wheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_wheels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_wheels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d bbcenter_to_rear = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbcenter_to_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d bbcenter_to_front = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbcenter_to_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ground_clearance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ground_clearance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleAttributes)
  return false;
#undef DO_
}

void MovingObject_VehicleAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier driver_id = 1;
  if (this->has_driver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->driver_id_, output);
  }

  // double radius_wheel = 2;
  if (this->radius_wheel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius_wheel(), output);
  }

  // uint32 number_wheels = 3;
  if (this->number_wheels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_wheels(), output);
  }

  // .osi3.Vector3d bbcenter_to_rear = 4;
  if (this->has_bbcenter_to_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bbcenter_to_rear_, output);
  }

  // .osi3.Vector3d bbcenter_to_front = 5;
  if (this->has_bbcenter_to_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bbcenter_to_front_, output);
  }

  // double ground_clearance = 6;
  if (this->ground_clearance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ground_clearance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleAttributes)
}

::google::protobuf::uint8* MovingObject_VehicleAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier driver_id = 1;
  if (this->has_driver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->driver_id_, deterministic, target);
  }

  // double radius_wheel = 2;
  if (this->radius_wheel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius_wheel(), target);
  }

  // uint32 number_wheels = 3;
  if (this->number_wheels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number_wheels(), target);
  }

  // .osi3.Vector3d bbcenter_to_rear = 4;
  if (this->has_bbcenter_to_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->bbcenter_to_rear_, deterministic, target);
  }

  // .osi3.Vector3d bbcenter_to_front = 5;
  if (this->has_bbcenter_to_front()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->bbcenter_to_front_, deterministic, target);
  }

  // double ground_clearance = 6;
  if (this->ground_clearance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ground_clearance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleAttributes)
  return target;
}

size_t MovingObject_VehicleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleAttributes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier driver_id = 1;
  if (this->has_driver_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->driver_id_);
  }

  // .osi3.Vector3d bbcenter_to_rear = 4;
  if (this->has_bbcenter_to_rear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbcenter_to_rear_);
  }

  // .osi3.Vector3d bbcenter_to_front = 5;
  if (this->has_bbcenter_to_front()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbcenter_to_front_);
  }

  // double radius_wheel = 2;
  if (this->radius_wheel() != 0) {
    total_size += 1 + 8;
  }

  // double ground_clearance = 6;
  if (this->ground_clearance() != 0) {
    total_size += 1 + 8;
  }

  // uint32 number_wheels = 3;
  if (this->number_wheels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_wheels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject_VehicleAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_VehicleAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject_VehicleAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleAttributes)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleAttributes::MergeFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_driver_id()) {
    mutable_driver_id()->::osi3::Identifier::MergeFrom(from.driver_id());
  }
  if (from.has_bbcenter_to_rear()) {
    mutable_bbcenter_to_rear()->::osi3::Vector3d::MergeFrom(from.bbcenter_to_rear());
  }
  if (from.has_bbcenter_to_front()) {
    mutable_bbcenter_to_front()->::osi3::Vector3d::MergeFrom(from.bbcenter_to_front());
  }
  if (from.radius_wheel() != 0) {
    set_radius_wheel(from.radius_wheel());
  }
  if (from.ground_clearance() != 0) {
    set_ground_clearance(from.ground_clearance());
  }
  if (from.number_wheels() != 0) {
    set_number_wheels(from.number_wheels());
  }
}

void MovingObject_VehicleAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleAttributes::CopyFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleAttributes::IsInitialized() const {
  return true;
}

void MovingObject_VehicleAttributes::Swap(MovingObject_VehicleAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject_VehicleAttributes::InternalSwap(MovingObject_VehicleAttributes* other) {
  using std::swap;
  swap(driver_id_, other->driver_id_);
  swap(bbcenter_to_rear_, other->bbcenter_to_rear_);
  swap(bbcenter_to_front_, other->bbcenter_to_front_);
  swap(radius_wheel_, other->radius_wheel_);
  swap(ground_clearance_, other->ground_clearance_);
  swap(number_wheels_, other->number_wheels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject_VehicleAttributes::GetMetadata() const {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MovingObject_VehicleClassification_LightState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject_VehicleClassification_LightState::kIndicatorStateFieldNumber;
const int MovingObject_VehicleClassification_LightState::kFrontFogLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kRearFogLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kHeadLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kHighBeamFieldNumber;
const int MovingObject_VehicleClassification_LightState::kReversingLightFieldNumber;
const int MovingObject_VehicleClassification_LightState::kBrakeLightStateFieldNumber;
const int MovingObject_VehicleClassification_LightState::kLicensePlateIlluminationRearFieldNumber;
const int MovingObject_VehicleClassification_LightState::kEmergencyVehicleIlluminationFieldNumber;
const int MovingObject_VehicleClassification_LightState::kServiceVehicleIlluminationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleClassification_LightState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleClassification.LightState)
}
MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState(const MovingObject_VehicleClassification_LightState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&indicator_state_, &from.indicator_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_vehicle_illumination_) -
    reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification.LightState)
}

void MovingObject_VehicleClassification_LightState::SharedCtor() {
  ::memset(&indicator_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_vehicle_illumination_) -
      reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
  _cached_size_ = 0;
}

MovingObject_VehicleClassification_LightState::~MovingObject_VehicleClassification_LightState() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification.LightState)
  SharedDtor();
}

void MovingObject_VehicleClassification_LightState::SharedDtor() {
}

void MovingObject_VehicleClassification_LightState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject_VehicleClassification_LightState::descriptor() {
  ::protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovingObject_VehicleClassification_LightState& MovingObject_VehicleClassification_LightState::default_instance() {
  ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleClassification_LightState();
  return *internal_default_instance();
}

MovingObject_VehicleClassification_LightState* MovingObject_VehicleClassification_LightState::New(::google::protobuf::Arena* arena) const {
  MovingObject_VehicleClassification_LightState* n = new MovingObject_VehicleClassification_LightState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject_VehicleClassification_LightState::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification.LightState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&indicator_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_vehicle_illumination_) -
      reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
  _internal_metadata_.Clear();
}

bool MovingObject_VehicleClassification_LightState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleClassification.LightState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_indicator_state(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_front_fog_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rear_fog_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_head_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_high_beam(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reversing_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_brake_light_state(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_license_plate_illumination_rear(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emergency_vehicle_illumination(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_service_vehicle_illumination(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleClassification.LightState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleClassification.LightState)
  return false;
#undef DO_
}

void MovingObject_VehicleClassification_LightState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleClassification.LightState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->indicator_state(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (this->front_fog_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->front_fog_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (this->rear_fog_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rear_fog_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (this->head_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->head_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (this->high_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->high_beam(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (this->reversing_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reversing_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (this->brake_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->brake_light_state(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (this->license_plate_illumination_rear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->license_plate_illumination_rear(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
  if (this->emergency_vehicle_illumination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->emergency_vehicle_illumination(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
  if (this->service_vehicle_illumination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->service_vehicle_illumination(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleClassification.LightState)
}

::google::protobuf::uint8* MovingObject_VehicleClassification_LightState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification.LightState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->indicator_state(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (this->front_fog_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->front_fog_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (this->rear_fog_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rear_fog_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (this->head_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->head_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (this->high_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->high_beam(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (this->reversing_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reversing_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (this->brake_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->brake_light_state(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (this->license_plate_illumination_rear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->license_plate_illumination_rear(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
  if (this->emergency_vehicle_illumination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->emergency_vehicle_illumination(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
  if (this->service_vehicle_illumination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->service_vehicle_illumination(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification.LightState)
  return target;
}

size_t MovingObject_VehicleClassification_LightState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification.LightState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->indicator_state());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (this->front_fog_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->front_fog_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (this->rear_fog_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rear_fog_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (this->head_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->head_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (this->high_beam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->high_beam());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (this->reversing_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reversing_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (this->brake_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_light_state());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (this->license_plate_illumination_rear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->license_plate_illumination_rear());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
  if (this->emergency_vehicle_illumination() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emergency_vehicle_illumination());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
  if (this->service_vehicle_illumination() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_vehicle_illumination());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject_VehicleClassification_LightState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleClassification.LightState)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_VehicleClassification_LightState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject_VehicleClassification_LightState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleClassification.LightState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleClassification.LightState)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleClassification_LightState::MergeFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification.LightState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.indicator_state() != 0) {
    set_indicator_state(from.indicator_state());
  }
  if (from.front_fog_light() != 0) {
    set_front_fog_light(from.front_fog_light());
  }
  if (from.rear_fog_light() != 0) {
    set_rear_fog_light(from.rear_fog_light());
  }
  if (from.head_light() != 0) {
    set_head_light(from.head_light());
  }
  if (from.high_beam() != 0) {
    set_high_beam(from.high_beam());
  }
  if (from.reversing_light() != 0) {
    set_reversing_light(from.reversing_light());
  }
  if (from.brake_light_state() != 0) {
    set_brake_light_state(from.brake_light_state());
  }
  if (from.license_plate_illumination_rear() != 0) {
    set_license_plate_illumination_rear(from.license_plate_illumination_rear());
  }
  if (from.emergency_vehicle_illumination() != 0) {
    set_emergency_vehicle_illumination(from.emergency_vehicle_illumination());
  }
  if (from.service_vehicle_illumination() != 0) {
    set_service_vehicle_illumination(from.service_vehicle_illumination());
  }
}

void MovingObject_VehicleClassification_LightState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleClassification_LightState::CopyFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification_LightState::IsInitialized() const {
  return true;
}

void MovingObject_VehicleClassification_LightState::Swap(MovingObject_VehicleClassification_LightState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject_VehicleClassification_LightState::InternalSwap(MovingObject_VehicleClassification_LightState* other) {
  using std::swap;
  swap(indicator_state_, other->indicator_state_);
  swap(front_fog_light_, other->front_fog_light_);
  swap(rear_fog_light_, other->rear_fog_light_);
  swap(head_light_, other->head_light_);
  swap(high_beam_, other->high_beam_);
  swap(reversing_light_, other->reversing_light_);
  swap(brake_light_state_, other->brake_light_state_);
  swap(license_plate_illumination_rear_, other->license_plate_illumination_rear_);
  swap(emergency_vehicle_illumination_, other->emergency_vehicle_illumination_);
  swap(service_vehicle_illumination_, other->service_vehicle_illumination_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject_VehicleClassification_LightState::GetMetadata() const {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MovingObject_VehicleClassification::InitAsDefaultInstance() {
  ::osi3::_MovingObject_VehicleClassification_default_instance_._instance.get_mutable()->light_state_ = const_cast< ::osi3::MovingObject_VehicleClassification_LightState*>(
      ::osi3::MovingObject_VehicleClassification_LightState::internal_default_instance());
  ::osi3::_MovingObject_VehicleClassification_default_instance_._instance.get_mutable()->trailer_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
void MovingObject_VehicleClassification::clear_trailer_id() {
  if (GetArenaNoVirtual() == NULL && trailer_id_ != NULL) {
    delete trailer_id_;
  }
  trailer_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject_VehicleClassification::kTypeFieldNumber;
const int MovingObject_VehicleClassification::kLightStateFieldNumber;
const int MovingObject_VehicleClassification::kHasTrailerFieldNumber;
const int MovingObject_VehicleClassification::kTrailerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject_VehicleClassification::MovingObject_VehicleClassification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleClassification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleClassification)
}
MovingObject_VehicleClassification::MovingObject_VehicleClassification(const MovingObject_VehicleClassification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_light_state()) {
    light_state_ = new ::osi3::MovingObject_VehicleClassification_LightState(*from.light_state_);
  } else {
    light_state_ = NULL;
  }
  if (from.has_trailer_id()) {
    trailer_id_ = new ::osi3::Identifier(*from.trailer_id_);
  } else {
    trailer_id_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_trailer_) -
    reinterpret_cast<char*>(&type_)) + sizeof(has_trailer_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification)
}

void MovingObject_VehicleClassification::SharedCtor() {
  ::memset(&light_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_trailer_) -
      reinterpret_cast<char*>(&light_state_)) + sizeof(has_trailer_));
  _cached_size_ = 0;
}

MovingObject_VehicleClassification::~MovingObject_VehicleClassification() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification)
  SharedDtor();
}

void MovingObject_VehicleClassification::SharedDtor() {
  if (this != internal_default_instance()) delete light_state_;
  if (this != internal_default_instance()) delete trailer_id_;
}

void MovingObject_VehicleClassification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject_VehicleClassification::descriptor() {
  ::protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovingObject_VehicleClassification& MovingObject_VehicleClassification::default_instance() {
  ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject_VehicleClassification();
  return *internal_default_instance();
}

MovingObject_VehicleClassification* MovingObject_VehicleClassification::New(::google::protobuf::Arena* arena) const {
  MovingObject_VehicleClassification* n = new MovingObject_VehicleClassification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject_VehicleClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && light_state_ != NULL) {
    delete light_state_;
  }
  light_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && trailer_id_ != NULL) {
    delete trailer_id_;
  }
  trailer_id_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_trailer_) -
      reinterpret_cast<char*>(&type_)) + sizeof(has_trailer_));
  _internal_metadata_.Clear();
}

bool MovingObject_VehicleClassification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleClassification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.MovingObject.VehicleClassification.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::MovingObject_VehicleClassification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_trailer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_trailer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier trailer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trailer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleClassification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleClassification)
  return false;
#undef DO_
}

void MovingObject_VehicleClassification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleClassification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (this->has_light_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->light_state_, output);
  }

  // bool has_trailer = 3;
  if (this->has_trailer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_trailer(), output);
  }

  // .osi3.Identifier trailer_id = 4;
  if (this->has_trailer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->trailer_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleClassification)
}

::google::protobuf::uint8* MovingObject_VehicleClassification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (this->has_light_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->light_state_, deterministic, target);
  }

  // bool has_trailer = 3;
  if (this->has_trailer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_trailer(), target);
  }

  // .osi3.Identifier trailer_id = 4;
  if (this->has_trailer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->trailer_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification)
  return target;
}

size_t MovingObject_VehicleClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (this->has_light_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->light_state_);
  }

  // .osi3.Identifier trailer_id = 4;
  if (this->has_trailer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trailer_id_);
  }

  // .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool has_trailer = 3;
  if (this->has_trailer() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject_VehicleClassification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleClassification)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_VehicleClassification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject_VehicleClassification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleClassification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleClassification)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleClassification::MergeFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_light_state()) {
    mutable_light_state()->::osi3::MovingObject_VehicleClassification_LightState::MergeFrom(from.light_state());
  }
  if (from.has_trailer_id()) {
    mutable_trailer_id()->::osi3::Identifier::MergeFrom(from.trailer_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_trailer() != 0) {
    set_has_trailer(from.has_trailer());
  }
}

void MovingObject_VehicleClassification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleClassification::CopyFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification::IsInitialized() const {
  return true;
}

void MovingObject_VehicleClassification::Swap(MovingObject_VehicleClassification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject_VehicleClassification::InternalSwap(MovingObject_VehicleClassification* other) {
  using std::swap;
  swap(light_state_, other->light_state_);
  swap(trailer_id_, other->trailer_id_);
  swap(type_, other->type_);
  swap(has_trailer_, other->has_trailer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject_VehicleClassification::GetMetadata() const {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MovingObject::InitAsDefaultInstance() {
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->vehicle_attributes_ = const_cast< ::osi3::MovingObject_VehicleAttributes*>(
      ::osi3::MovingObject_VehicleAttributes::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->vehicle_classification_ = const_cast< ::osi3::MovingObject_VehicleClassification*>(
      ::osi3::MovingObject_VehicleClassification::internal_default_instance());
}
void MovingObject::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void MovingObject::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
void MovingObject::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject::kIdFieldNumber;
const int MovingObject::kBaseFieldNumber;
const int MovingObject::kTypeFieldNumber;
const int MovingObject::kAssignedLaneIdFieldNumber;
const int MovingObject::kVehicleAttributesFieldNumber;
const int MovingObject::kVehicleClassificationFieldNumber;
const int MovingObject::kModelReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject::MovingObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject)
}
MovingObject::MovingObject(const MovingObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      assigned_lane_id_(from.assigned_lane_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_reference().size() > 0) {
    model_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseMoving(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_vehicle_attributes()) {
    vehicle_attributes_ = new ::osi3::MovingObject_VehicleAttributes(*from.vehicle_attributes_);
  } else {
    vehicle_attributes_ = NULL;
  }
  if (from.has_vehicle_classification()) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification(*from.vehicle_classification_);
  } else {
    vehicle_classification_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject)
}

void MovingObject::SharedCtor() {
  model_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _cached_size_ = 0;
}

MovingObject::~MovingObject() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject)
  SharedDtor();
}

void MovingObject::SharedDtor() {
  model_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete vehicle_attributes_;
  if (this != internal_default_instance()) delete vehicle_classification_;
}

void MovingObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject::descriptor() {
  ::protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovingObject& MovingObject::default_instance() {
  ::protobuf_osi_5fobject_2eproto::InitDefaultsMovingObject();
  return *internal_default_instance();
}

MovingObject* MovingObject::New(::google::protobuf::Arena* arena) const {
  MovingObject* n = new MovingObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  model_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_attributes_ != NULL) {
    delete vehicle_attributes_;
  }
  vehicle_attributes_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_classification_ != NULL) {
    delete vehicle_classification_;
  }
  vehicle_classification_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool MovingObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::MovingObject_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "osi3.MovingObject.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject)
  return false;
#undef DO_
}

void MovingObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // .osi3.MovingObject.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->assigned_lane_id(static_cast<int>(i)), output);
  }

  // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (this->has_vehicle_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->vehicle_attributes_, output);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (this->has_vehicle_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->vehicle_classification_, output);
  }

  // string model_reference = 7;
  if (this->model_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.MovingObject.model_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->model_reference(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject)
}

::google::protobuf::uint8* MovingObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->base_, deterministic, target);
  }

  // .osi3.MovingObject.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->assigned_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (this->has_vehicle_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->vehicle_attributes_, deterministic, target);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (this->has_vehicle_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->vehicle_classification_, deterministic, target);
  }

  // string model_reference = 7;
  if (this->model_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.MovingObject.model_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->model_reference(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject)
  return target;
}

size_t MovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.Identifier assigned_lane_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // string model_reference = 7;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_);
  }

  // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (this->has_vehicle_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_attributes_);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (this->has_vehicle_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_classification_);
  }

  // .osi3.MovingObject.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject)
    MergeFrom(*source);
  }
}

void MovingObject::MergeFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseMoving::MergeFrom(from.base());
  }
  if (from.has_vehicle_attributes()) {
    mutable_vehicle_attributes()->::osi3::MovingObject_VehicleAttributes::MergeFrom(from.vehicle_attributes());
  }
  if (from.has_vehicle_classification()) {
    mutable_vehicle_classification()->::osi3::MovingObject_VehicleClassification::MergeFrom(from.vehicle_classification());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MovingObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject::CopyFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject::IsInitialized() const {
  return true;
}

void MovingObject::Swap(MovingObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject::InternalSwap(MovingObject* other) {
  using std::swap;
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  model_reference_.Swap(&other->model_reference_);
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(vehicle_attributes_, other->vehicle_attributes_);
  swap(vehicle_classification_, other->vehicle_classification_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject::GetMetadata() const {
  protobuf_osi_5fobject_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5fobject_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
