// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_roadmarking.proto

#include "osi_roadmarking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace osi3 {
class RoadMarking_ClassificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadMarking_Classification>
      _instance;
} _RoadMarking_Classification_default_instance_;
class RoadMarkingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadMarking>
      _instance;
} _RoadMarking_default_instance_;
}  // namespace osi3
namespace protobuf_osi_5froadmarking_2eproto {
void InitDefaultsRoadMarking_ClassificationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5ftrafficsign_2eproto::InitDefaultsTrafficSignValue();
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::osi3::_RoadMarking_Classification_default_instance_;
    new (ptr) ::osi3::RoadMarking_Classification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RoadMarking_Classification::InitAsDefaultInstance();
}

void InitDefaultsRoadMarking_Classification() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadMarking_ClassificationImpl);
}

void InitDefaultsRoadMarkingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_osi_5fcommon_2eproto::InitDefaultsIdentifier();
  protobuf_osi_5fcommon_2eproto::InitDefaultsBaseStationary();
  protobuf_osi_5froadmarking_2eproto::InitDefaultsRoadMarking_Classification();
  {
    void* ptr = &::osi3::_RoadMarking_default_instance_;
    new (ptr) ::osi3::RoadMarking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RoadMarking::InitAsDefaultInstance();
}

void InitDefaultsRoadMarking() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadMarkingImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, traffic_main_sign_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, monochrome_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, value_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, assigned_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking_Classification, is_out_of_service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::osi3::RoadMarking, classification_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::RoadMarking_Classification)},
  { 12, -1, sizeof(::osi3::RoadMarking)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_RoadMarking_Classification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::osi3::_RoadMarking_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "osi_roadmarking.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025osi_roadmarking.proto\022\004osi3\032\020osi_commo"
      "n.proto\032\025osi_trafficsign.proto\"\310\006\n\013RoadM"
      "arking\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022\"\n\004"
      "base\030\002 \001(\0132\024.osi3.BaseStationary\0228\n\016clas"
      "sification\030\003 \001(\0132 .osi3.RoadMarking.Clas"
      "sification\032\274\005\n\016Classification\0223\n\004type\030\001 "
      "\001(\0162%.osi3.RoadMarking.Classification.Ty"
      "pe\022N\n\026traffic_main_sign_type\030\002 \001(\0162..osi"
      "3.TrafficSign.MainSign.Classification.Ty"
      "pe\022@\n\020monochrome_color\030\003 \001(\0162&.osi3.Road"
      "Marking.Classification.Color\022%\n\005value\030\004 "
      "\001(\0132\026.osi3.TrafficSignValue\022\022\n\nvalue_tex"
      "t\030\005 \001(\t\022*\n\020assigned_lane_id\030\006 \003(\0132\020.osi3"
      ".Identifier\022\031\n\021is_out_of_service\030\007 \001(\010\"\315"
      "\001\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020"
      "\001\022\035\n\031TYPE_PAINTED_TRAFFIC_SIGN\020\002\022\036\n\032TYPE"
      "_SYMBOLIC_TRAFFIC_SIGN\020\003\022\035\n\031TYPE_TEXTUAL"
      "_TRAFFIC_SIGN\020\004\022\027\n\023TYPE_GENERIC_SYMBOL\020\005"
      "\022\025\n\021TYPE_GENERIC_LINE\020\006\022\025\n\021TYPE_GENERIC_"
      "TEXT\020\007\"\220\001\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013C"
      "OLOR_OTHER\020\001\022\017\n\013COLOR_WHITE\020\002\022\020\n\014COLOR_Y"
      "ELLOW\020\003\022\016\n\nCOLOR_BLUE\020\005\022\r\n\tCOLOR_RED\020\006\022\017"
      "\n\013COLOR_GREEN\020\007\022\020\n\014COLOR_VIOLET\020\010B\002H\001b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 925);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osi_roadmarking.proto", &protobuf_RegisterTypes);
  ::protobuf_osi_5fcommon_2eproto::AddDescriptors();
  ::protobuf_osi_5ftrafficsign_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_osi_5froadmarking_2eproto
namespace osi3 {
const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Type_descriptor() {
  protobuf_osi_5froadmarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5froadmarking_2eproto::file_level_enum_descriptors[0];
}
bool RoadMarking_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_UNKNOWN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_OTHER;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_PAINTED_TRAFFIC_SIGN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_TEXTUAL_TRAFFIC_SIGN;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_SYMBOL;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_LINE;
const RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_TEXT;
const RoadMarking_Classification_Type RoadMarking_Classification::Type_MIN;
const RoadMarking_Classification_Type RoadMarking_Classification::Type_MAX;
const int RoadMarking_Classification::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadMarking_Classification_Color_descriptor() {
  protobuf_osi_5froadmarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_osi_5froadmarking_2eproto::file_level_enum_descriptors[1];
}
bool RoadMarking_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_UNKNOWN;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_OTHER;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_WHITE;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_YELLOW;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_BLUE;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_RED;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_GREEN;
const RoadMarking_Classification_Color RoadMarking_Classification::COLOR_VIOLET;
const RoadMarking_Classification_Color RoadMarking_Classification::Color_MIN;
const RoadMarking_Classification_Color RoadMarking_Classification::Color_MAX;
const int RoadMarking_Classification::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RoadMarking_Classification::InitAsDefaultInstance() {
  ::osi3::_RoadMarking_Classification_default_instance_._instance.get_mutable()->value_ = const_cast< ::osi3::TrafficSignValue*>(
      ::osi3::TrafficSignValue::internal_default_instance());
}
void RoadMarking_Classification::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
void RoadMarking_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadMarking_Classification::kTypeFieldNumber;
const int RoadMarking_Classification::kTrafficMainSignTypeFieldNumber;
const int RoadMarking_Classification::kMonochromeColorFieldNumber;
const int RoadMarking_Classification::kValueFieldNumber;
const int RoadMarking_Classification::kValueTextFieldNumber;
const int RoadMarking_Classification::kAssignedLaneIdFieldNumber;
const int RoadMarking_Classification::kIsOutOfServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadMarking_Classification::RoadMarking_Classification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5froadmarking_2eproto::InitDefaultsRoadMarking_Classification();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RoadMarking.Classification)
}
RoadMarking_Classification::RoadMarking_Classification(const RoadMarking_Classification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      assigned_lane_id_(from.assigned_lane_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value_text().size() > 0) {
    value_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_text_);
  }
  if (from.has_value()) {
    value_ = new ::osi3::TrafficSignValue(*from.value_);
  } else {
    value_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking.Classification)
}

void RoadMarking_Classification::SharedCtor() {
  value_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&value_)) + sizeof(is_out_of_service_));
  _cached_size_ = 0;
}

RoadMarking_Classification::~RoadMarking_Classification() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking.Classification)
  SharedDtor();
}

void RoadMarking_Classification::SharedDtor() {
  value_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void RoadMarking_Classification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadMarking_Classification::descriptor() {
  ::protobuf_osi_5froadmarking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5froadmarking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadMarking_Classification& RoadMarking_Classification::default_instance() {
  ::protobuf_osi_5froadmarking_2eproto::InitDefaultsRoadMarking_Classification();
  return *internal_default_instance();
}

RoadMarking_Classification* RoadMarking_Classification::New(::google::protobuf::Arena* arena) const {
  RoadMarking_Classification* n = new RoadMarking_Classification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadMarking_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  value_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

bool RoadMarking_Classification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RoadMarking.Classification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.RoadMarking.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::RoadMarking_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traffic_main_sign_type(static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_monochrome_color(static_cast< ::osi3::RoadMarking_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSignValue value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value_text = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value_text().data(), static_cast<int>(this->value_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "osi3.RoadMarking.Classification.value_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RoadMarking.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RoadMarking.Classification)
  return false;
#undef DO_
}

void RoadMarking_Classification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RoadMarking.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.RoadMarking.Classification.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (this->traffic_main_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->traffic_main_sign_type(), output);
  }

  // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (this->monochrome_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->monochrome_color(), output);
  }

  // .osi3.TrafficSignValue value = 4;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  // string value_text = 5;
  if (this->value_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_text().data(), static_cast<int>(this->value_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.value_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value_text(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->assigned_lane_id(static_cast<int>(i)), output);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_out_of_service(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RoadMarking.Classification)
}

::google::protobuf::uint8* RoadMarking_Classification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking.Classification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.RoadMarking.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (this->traffic_main_sign_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->traffic_main_sign_type(), target);
  }

  // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (this->monochrome_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->monochrome_color(), target);
  }

  // .osi3.TrafficSignValue value = 4;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->value_, deterministic, target);
  }

  // string value_text = 5;
  if (this->value_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value_text().data(), static_cast<int>(this->value_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.value_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value_text(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->assigned_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_out_of_service(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking.Classification)
  return target;
}

size_t RoadMarking_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking.Classification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .osi3.Identifier assigned_lane_id = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // string value_text = 5;
  if (this->value_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value_text());
  }

  // .osi3.TrafficSignValue value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // .osi3.RoadMarking.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (this->traffic_main_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->traffic_main_sign_type());
  }

  // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (this->monochrome_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->monochrome_color());
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadMarking_Classification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RoadMarking.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarking_Classification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadMarking_Classification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RoadMarking.Classification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RoadMarking.Classification)
    MergeFrom(*source);
  }
}

void RoadMarking_Classification::MergeFrom(const RoadMarking_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  if (from.value_text().size() > 0) {

    value_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_text_);
  }
  if (from.has_value()) {
    mutable_value()->::osi3::TrafficSignValue::MergeFrom(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.traffic_main_sign_type() != 0) {
    set_traffic_main_sign_type(from.traffic_main_sign_type());
  }
  if (from.monochrome_color() != 0) {
    set_monochrome_color(from.monochrome_color());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void RoadMarking_Classification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RoadMarking.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarking_Classification::CopyFrom(const RoadMarking_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking_Classification::IsInitialized() const {
  return true;
}

void RoadMarking_Classification::Swap(RoadMarking_Classification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadMarking_Classification::InternalSwap(RoadMarking_Classification* other) {
  using std::swap;
  assigned_lane_id_.InternalSwap(&other->assigned_lane_id_);
  value_text_.Swap(&other->value_text_);
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(traffic_main_sign_type_, other->traffic_main_sign_type_);
  swap(monochrome_color_, other->monochrome_color_);
  swap(is_out_of_service_, other->is_out_of_service_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadMarking_Classification::GetMetadata() const {
  protobuf_osi_5froadmarking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5froadmarking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadMarking::InitAsDefaultInstance() {
  ::osi3::_RoadMarking_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_RoadMarking_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_RoadMarking_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::RoadMarking_Classification*>(
      ::osi3::RoadMarking_Classification::internal_default_instance());
}
void RoadMarking::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void RoadMarking::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadMarking::kIdFieldNumber;
const int RoadMarking::kBaseFieldNumber;
const int RoadMarking::kClassificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadMarking::RoadMarking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_osi_5froadmarking_2eproto::InitDefaultsRoadMarking();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RoadMarking)
}
RoadMarking::RoadMarking(const RoadMarking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::RoadMarking_Classification(*from.classification_);
  } else {
    classification_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking)
}

void RoadMarking::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
  _cached_size_ = 0;
}

RoadMarking::~RoadMarking() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking)
  SharedDtor();
}

void RoadMarking::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void RoadMarking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadMarking::descriptor() {
  ::protobuf_osi_5froadmarking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5froadmarking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadMarking& RoadMarking::default_instance() {
  ::protobuf_osi_5froadmarking_2eproto::InitDefaultsRoadMarking();
  return *internal_default_instance();
}

RoadMarking* RoadMarking::New(::google::protobuf::Arena* arena) const {
  RoadMarking* n = new RoadMarking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_ != NULL) {
    delete classification_;
  }
  classification_ = NULL;
  _internal_metadata_.Clear();
}

bool RoadMarking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RoadMarking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.RoadMarking.Classification classification = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RoadMarking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RoadMarking)
  return false;
#undef DO_
}

void RoadMarking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RoadMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // .osi3.RoadMarking.Classification classification = 3;
  if (this->has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->classification_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RoadMarking)
}

::google::protobuf::uint8* RoadMarking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->base_, deterministic, target);
  }

  // .osi3.RoadMarking.Classification classification = 3;
  if (this->has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->classification_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking)
  return target;
}

size_t RoadMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_);
  }

  // .osi3.RoadMarking.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classification_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadMarking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RoadMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadMarking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RoadMarking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RoadMarking)
    MergeFrom(*source);
  }
}

void RoadMarking::MergeFrom(const RoadMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::RoadMarking_Classification::MergeFrom(from.classification());
  }
}

void RoadMarking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RoadMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarking::CopyFrom(const RoadMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking::IsInitialized() const {
  return true;
}

void RoadMarking::Swap(RoadMarking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadMarking::InternalSwap(RoadMarking* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadMarking::GetMetadata() const {
  protobuf_osi_5froadmarking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_osi_5froadmarking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3

// @@protoc_insertion_point(global_scope)
