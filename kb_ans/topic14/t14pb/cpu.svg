<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_Deque_base (1 samples, 0.07%)</title><rect x="1035.6" y="165" width="0.9" height="15.0" fill="rgb(213,90,50)" rx="2" ry="2" />
<text  x="1038.63" y="175.5" ></text>
</g>
<g >
<title>bfs_hk (69 samples, 5.10%)</title><rect x="978.1" y="213" width="60.1" height="15.0" fill="rgb(250,64,31)" rx="2" ry="2" />
<text  x="981.07" y="223.5" >bfs_hk</text>
</g>
<g >
<title>do_group_exit (5 samples, 0.37%)</title><rect x="1182.2" y="229" width="4.3" height="15.0" fill="rgb(232,140,5)" rx="2" ry="2" />
<text  x="1185.15" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.30%)</title><rect x="1186.5" y="245" width="3.5" height="15.0" fill="rgb(254,24,2)" rx="2" ry="2" />
<text  x="1189.51" y="255.5" ></text>
</g>
<g >
<title>event_function (6 samples, 0.44%)</title><rect x="471.4" y="133" width="5.2" height="15.0" fill="rgb(210,134,29)" rx="2" ry="2" />
<text  x="474.36" y="143.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.07%)</title><rect x="481.8" y="37" width="0.9" height="15.0" fill="rgb(215,141,21)" rx="2" ry="2" />
<text  x="484.83" y="47.5" ></text>
</g>
<g >
<title>_pthread_cleanup_push_defer (2 samples, 0.15%)</title><rect x="1162.1" y="229" width="1.7" height="15.0" fill="rgb(249,30,29)" rx="2" ry="2" />
<text  x="1165.09" y="239.5" ></text>
</g>
<g >
<title>exit_mmap (5 samples, 0.37%)</title><rect x="1182.2" y="181" width="4.3" height="15.0" fill="rgb(253,222,25)" rx="2" ry="2" />
<text  x="1185.15" y="191.5" ></text>
</g>
<g >
<title>add_edge (7 samples, 0.52%)</title><rect x="477.5" y="229" width="6.1" height="15.0" fill="rgb(206,52,37)" rx="2" ry="2" />
<text  x="480.46" y="239.5" ></text>
</g>
<g >
<title>find_get_entry (1 samples, 0.07%)</title><rect x="1189.1" y="101" width="0.9" height="15.0" fill="rgb(246,215,53)" rx="2" ry="2" />
<text  x="1192.13" y="111.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.07%)</title><rect x="481.8" y="101" width="0.9" height="15.0" fill="rgb(241,166,35)" rx="2" ry="2" />
<text  x="484.83" y="111.5" ></text>
</g>
<g >
<title>update_curr (1 samples, 0.07%)</title><rect x="976.3" y="69" width="0.9" height="15.0" fill="rgb(215,154,31)" rx="2" ry="2" />
<text  x="979.33" y="79.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.07%)</title><rect x="1188.3" y="101" width="0.8" height="15.0" fill="rgb(250,101,12)" rx="2" ry="2" />
<text  x="1191.26" y="111.5" ></text>
</g>
<g >
<title>t14pb_unittest (1,353 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(246,161,50)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >t14pb_unittest</text>
</g>
<g >
<title>std::allocator&lt;int&gt;::allocator (1 samples, 0.07%)</title><rect x="1035.6" y="133" width="0.9" height="15.0" fill="rgb(233,89,5)" rx="2" ry="2" />
<text  x="1038.63" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::front (10 samples, 0.74%)</title><rect x="1009.5" y="181" width="8.7" height="15.0" fill="rgb(247,21,15)" rx="2" ry="2" />
<text  x="1012.47" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.30%)</title><rect x="1186.5" y="261" width="3.5" height="15.0" fill="rgb(246,11,4)" rx="2" ry="2" />
<text  x="1189.51" y="271.5" ></text>
</g>
<g >
<title>__vfs_read (3 samples, 0.22%)</title><rect x="1187.4" y="181" width="2.6" height="15.0" fill="rgb(224,140,48)" rx="2" ry="2" />
<text  x="1190.38" y="191.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (1 samples, 0.07%)</title><rect x="1083.6" y="165" width="0.9" height="15.0" fill="rgb(227,83,49)" rx="2" ry="2" />
<text  x="1086.60" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_read (3 samples, 0.22%)</title><rect x="1187.4" y="229" width="2.6" height="15.0" fill="rgb(232,71,8)" rx="2" ry="2" />
<text  x="1190.38" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::emplace_back&lt;Edge&gt; (4 samples, 0.30%)</title><rect x="480.1" y="197" width="3.5" height="15.0" fill="rgb(225,176,15)" rx="2" ry="2" />
<text  x="483.08" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::empty (1 samples, 0.07%)</title><rect x="1006.0" y="181" width="0.9" height="15.0" fill="rgb(220,161,20)" rx="2" ry="2" />
<text  x="1008.98" y="191.5" ></text>
</g>
<g >
<title>_pthread_cleanup_pop_restore (2 samples, 0.15%)</title><rect x="1160.3" y="229" width="1.8" height="15.0" fill="rgb(236,99,22)" rx="2" ry="2" />
<text  x="1163.35" y="239.5" ></text>
</g>
<g >
<title>main (1,229 samples, 90.84%)</title><rect x="12.6" y="245" width="1071.9" height="15.0" fill="rgb(242,180,21)" rx="2" ry="2" />
<text  x="15.62" y="255.5" >main</text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::begin (9 samples, 0.67%)</title><rect x="1010.3" y="165" width="7.9" height="15.0" fill="rgb(244,85,12)" rx="2" ry="2" />
<text  x="1013.34" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (1 samples, 0.07%)</title><rect x="1048.7" y="197" width="0.9" height="15.0" fill="rgb(234,183,44)" rx="2" ry="2" />
<text  x="1051.71" y="207.5" ></text>
</g>
<g >
<title>hopcroft_karp_algo (85 samples, 6.28%)</title><rect x="977.2" y="229" width="74.1" height="15.0" fill="rgb(244,4,37)" rx="2" ry="2" />
<text  x="980.20" y="239.5" >hopcroft..</text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.07%)</title><rect x="976.3" y="181" width="0.9" height="15.0" fill="rgb(251,39,46)" rx="2" ry="2" />
<text  x="979.33" y="191.5" ></text>
</g>
<g >
<title>free_pcp_prepare (1 samples, 0.07%)</title><rect x="1183.0" y="101" width="0.9" height="15.0" fill="rgb(218,127,3)" rx="2" ry="2" />
<text  x="1186.02" y="111.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (5 samples, 0.37%)</title><rect x="1080.1" y="181" width="4.4" height="15.0" fill="rgb(234,210,33)" rx="2" ry="2" />
<text  x="1083.11" y="191.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;int*, int*&gt; (6 samples, 0.44%)</title><rect x="1079.2" y="197" width="5.3" height="15.0" fill="rgb(216,119,7)" rx="2" ry="2" />
<text  x="1082.24" y="207.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (1 samples, 0.07%)</title><rect x="1079.2" y="181" width="0.9" height="15.0" fill="rgb(243,168,6)" rx="2" ry="2" />
<text  x="1082.24" y="191.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (6 samples, 0.44%)</title><rect x="471.4" y="213" width="5.2" height="15.0" fill="rgb(205,40,9)" rx="2" ry="2" />
<text  x="474.36" y="223.5" ></text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::front (13 samples, 0.96%)</title><rect x="1006.9" y="197" width="11.3" height="15.0" fill="rgb(212,84,14)" rx="2" ry="2" />
<text  x="1009.85" y="207.5" ></text>
</g>
<g >
<title>_IO_vfscanf (71 samples, 5.25%)</title><rect x="1095.8" y="229" width="61.9" height="15.0" fill="rgb(210,226,38)" rx="2" ry="2" />
<text  x="1098.81" y="239.5" >_IO_vf..</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;long&gt; (1 samples, 0.07%)</title><rect x="1053.9" y="229" width="0.9" height="15.0" fill="rgb(236,98,15)" rx="2" ry="2" />
<text  x="1056.95" y="239.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.29 (6 samples, 0.44%)</title><rect x="471.4" y="53" width="5.2" height="15.0" fill="rgb(237,126,4)" rx="2" ry="2" />
<text  x="474.36" y="63.5" ></text>
</g>
<g >
<title>unmap_page_range (2 samples, 0.15%)</title><rect x="1184.8" y="133" width="1.7" height="15.0" fill="rgb(221,96,51)" rx="2" ry="2" />
<text  x="1187.77" y="143.5" ></text>
</g>
<g >
<title>unmap_vmas (3 samples, 0.22%)</title><rect x="1183.9" y="165" width="2.6" height="15.0" fill="rgb(208,80,37)" rx="2" ry="2" />
<text  x="1186.90" y="175.5" ></text>
</g>
<g >
<title>[unknown] (1,327 samples, 98.08%)</title><rect x="10.0" y="277" width="1157.3" height="15.0" fill="rgb(228,212,26)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >[unknown]</text>
</g>
<g >
<title>smp_call_function_single_interrupt (6 samples, 0.44%)</title><rect x="471.4" y="197" width="5.2" height="15.0" fill="rgb(235,56,33)" rx="2" ry="2" />
<text  x="474.36" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (1,327 samples, 98.08%)</title><rect x="10.0" y="261" width="1157.3" height="15.0" fill="rgb(247,92,13)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >__libc_start_main</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (6 samples, 0.44%)</title><rect x="471.4" y="69" width="5.2" height="15.0" fill="rgb(222,155,54)" rx="2" ry="2" />
<text  x="474.36" y="79.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="976.3" y="197" width="0.9" height="15.0" fill="rgb(216,81,39)" rx="2" ry="2" />
<text  x="979.33" y="207.5" ></text>
</g>
<g >
<title>vfs_read (3 samples, 0.22%)</title><rect x="1187.4" y="197" width="2.6" height="15.0" fill="rgb(212,157,54)" rx="2" ry="2" />
<text  x="1190.38" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (10 samples, 0.74%)</title><rect x="1026.9" y="181" width="8.7" height="15.0" fill="rgb(254,126,38)" rx="2" ry="2" />
<text  x="1029.91" y="191.5" ></text>
</g>
<g >
<title>unmap_single_vma (3 samples, 0.22%)</title><rect x="1183.9" y="149" width="2.6" height="15.0" fill="rgb(224,120,43)" rx="2" ry="2" />
<text  x="1186.90" y="159.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.07%)</title><rect x="481.8" y="133" width="0.9" height="15.0" fill="rgb(207,229,24)" rx="2" ry="2" />
<text  x="484.83" y="143.5" ></text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::push (2 samples, 0.15%)</title><rect x="1049.6" y="213" width="1.7" height="15.0" fill="rgb(228,34,4)" rx="2" ry="2" />
<text  x="1052.59" y="223.5" ></text>
</g>
<g >
<title>std::forward&lt;Edge&gt; (1 samples, 0.07%)</title><rect x="482.7" y="181" width="0.9" height="15.0" fill="rgb(220,133,25)" rx="2" ry="2" />
<text  x="485.70" y="191.5" ></text>
</g>
<g >
<title>std::max&lt;long&gt; (3 samples, 0.22%)</title><rect x="1051.3" y="229" width="2.6" height="15.0" fill="rgb(240,170,43)" rx="2" ry="2" />
<text  x="1054.33" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (2 samples, 0.15%)</title><rect x="1036.5" y="197" width="1.7" height="15.0" fill="rgb(222,100,9)" rx="2" ry="2" />
<text  x="1039.50" y="207.5" ></text>
</g>
<g >
<title>mmput (5 samples, 0.37%)</title><rect x="1182.2" y="197" width="4.3" height="15.0" fill="rgb(224,176,34)" rx="2" ry="2" />
<text  x="1185.15" y="207.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.07%)</title><rect x="476.6" y="213" width="0.9" height="15.0" fill="rgb(245,228,15)" rx="2" ry="2" />
<text  x="479.59" y="223.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (6 samples, 0.44%)</title><rect x="471.4" y="165" width="5.2" height="15.0" fill="rgb(230,156,44)" rx="2" ry="2" />
<text  x="474.36" y="175.5" ></text>
</g>
<g >
<title>xas_load (1 samples, 0.07%)</title><rect x="1189.1" y="85" width="0.9" height="15.0" fill="rgb(233,108,23)" rx="2" ry="2" />
<text  x="1192.13" y="95.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::pop_front (9 samples, 0.67%)</title><rect x="1018.2" y="181" width="7.8" height="15.0" fill="rgb(209,132,9)" rx="2" ry="2" />
<text  x="1021.19" y="191.5" ></text>
</g>
<g >
<title>__GI_____strtoll_l_internal (2 samples, 0.15%)</title><rect x="1157.7" y="229" width="1.8" height="15.0" fill="rgb(208,180,51)" rx="2" ry="2" />
<text  x="1160.73" y="239.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.07%)</title><rect x="976.3" y="101" width="0.9" height="15.0" fill="rgb(252,22,33)" rx="2" ry="2" />
<text  x="979.33" y="111.5" ></text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::pop (9 samples, 0.67%)</title><rect x="1018.2" y="197" width="7.8" height="15.0" fill="rgb(227,7,1)" rx="2" ry="2" />
<text  x="1021.19" y="207.5" ></text>
</g>
<g >
<title>partition_function (18 samples, 1.33%)</title><rect x="1063.5" y="197" width="15.7" height="15.0" fill="rgb(236,5,14)" rx="2" ry="2" />
<text  x="1066.54" y="207.5" ></text>
</g>
<g >
<title>get_prime_factor2 (1 samples, 0.07%)</title><rect x="11.7" y="245" width="0.9" height="15.0" fill="rgb(219,14,49)" rx="2" ry="2" />
<text  x="14.74" y="255.5" ></text>
</g>
<g >
<title>ctx_resched (6 samples, 0.44%)</title><rect x="471.4" y="101" width="5.2" height="15.0" fill="rgb(241,208,28)" rx="2" ry="2" />
<text  x="474.36" y="111.5" ></text>
</g>
<g >
<title>read (4 samples, 0.30%)</title><rect x="1186.5" y="277" width="3.5" height="15.0" fill="rgb(244,190,40)" rx="2" ry="2" />
<text  x="1189.51" y="287.5" ></text>
</g>
<g >
<title>remote_function (6 samples, 0.44%)</title><rect x="471.4" y="149" width="5.2" height="15.0" fill="rgb(211,90,25)" rx="2" ry="2" />
<text  x="474.36" y="159.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (3 samples, 0.22%)</title><rect x="1187.4" y="149" width="2.6" height="15.0" fill="rgb(227,193,47)" rx="2" ry="2" />
<text  x="1190.38" y="159.5" ></text>
</g>
<g >
<title>dfs_hk (2 samples, 0.15%)</title><rect x="1047.0" y="197" width="1.7" height="15.0" fill="rgb(252,134,50)" rx="2" ry="2" />
<text  x="1049.97" y="207.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.15%)</title><rect x="1182.2" y="133" width="1.7" height="15.0" fill="rgb(218,51,11)" rx="2" ry="2" />
<text  x="1185.15" y="143.5" ></text>
</g>
<g >
<title>task_tick_fair (1 samples, 0.07%)</title><rect x="976.3" y="85" width="0.9" height="15.0" fill="rgb(226,81,15)" rx="2" ry="2" />
<text  x="979.33" y="95.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::empty (2 samples, 0.15%)</title><rect x="1004.2" y="197" width="1.8" height="15.0" fill="rgb(236,131,11)" rx="2" ry="2" />
<text  x="1007.24" y="207.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.15%)</title><rect x="1182.2" y="117" width="1.7" height="15.0" fill="rgb(252,39,20)" rx="2" ry="2" />
<text  x="1185.15" y="127.5" ></text>
</g>
<g >
<title>get_prime_factor2 (566 samples, 41.83%)</title><rect x="483.6" y="229" width="493.6" height="15.0" fill="rgb(239,225,5)" rx="2" ry="2" />
<text  x="486.57" y="239.5" >get_prime_factor2</text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (6 samples, 0.44%)</title><rect x="471.4" y="181" width="5.2" height="15.0" fill="rgb(245,215,52)" rx="2" ry="2" />
<text  x="474.36" y="191.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.07%)</title><rect x="481.8" y="53" width="0.9" height="15.0" fill="rgb(234,186,41)" rx="2" ry="2" />
<text  x="484.83" y="63.5" ></text>
</g>
<g >
<title>new_sync_read (3 samples, 0.22%)</title><rect x="1187.4" y="165" width="2.6" height="15.0" fill="rgb(251,159,46)" rx="2" ry="2" />
<text  x="1190.38" y="175.5" ></text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.07%)</title><rect x="1189.1" y="117" width="0.9" height="15.0" fill="rgb(211,116,4)" rx="2" ry="2" />
<text  x="1192.13" y="127.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (2 samples, 0.15%)</title><rect x="10.0" y="245" width="1.7" height="15.0" fill="rgb(247,41,12)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_Deque_iterator (7 samples, 0.52%)</title><rect x="1012.1" y="149" width="6.1" height="15.0" fill="rgb(250,151,33)" rx="2" ry="2" />
<text  x="1015.08" y="159.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_Deque_iterator (1 samples, 0.07%)</title><rect x="1009.5" y="165" width="0.8" height="15.0" fill="rgb(208,92,53)" rx="2" ry="2" />
<text  x="1012.47" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.37%)</title><rect x="1182.2" y="261" width="4.3" height="15.0" fill="rgb(244,84,45)" rx="2" ry="2" />
<text  x="1185.15" y="271.5" ></text>
</g>
<g >
<title>__strtoll_internal (1 samples, 0.07%)</title><rect x="1159.5" y="229" width="0.8" height="15.0" fill="rgb(240,48,22)" rx="2" ry="2" />
<text  x="1162.48" y="239.5" ></text>
</g>
<g >
<title>__perf_event_enable (6 samples, 0.44%)</title><rect x="471.4" y="117" width="5.2" height="15.0" fill="rgb(246,184,47)" rx="2" ry="2" />
<text  x="474.36" y="127.5" ></text>
</g>
<g >
<title>all (1,353 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(243,31,3)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.07%)</title><rect x="976.3" y="133" width="0.9" height="15.0" fill="rgb(227,195,41)" rx="2" ry="2" />
<text  x="979.33" y="143.5" ></text>
</g>
<g >
<title>generic_file_read_iter (3 samples, 0.22%)</title><rect x="1187.4" y="133" width="2.6" height="15.0" fill="rgb(251,92,52)" rx="2" ry="2" />
<text  x="1190.38" y="143.5" ></text>
</g>
<g >
<title>__GI_____strtoll_l_internal (17 samples, 1.26%)</title><rect x="1167.3" y="277" width="14.9" height="15.0" fill="rgb(244,191,47)" rx="2" ry="2" />
<text  x="1170.32" y="287.5" ></text>
</g>
<g >
<title>scanf (91 samples, 6.73%)</title><rect x="1084.5" y="245" width="79.3" height="15.0" fill="rgb(254,180,47)" rx="2" ry="2" />
<text  x="1087.47" y="255.5" >scanf</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Edge&gt;::construct&lt;Edge, Edge&gt; (1 samples, 0.07%)</title><rect x="481.8" y="165" width="0.9" height="15.0" fill="rgb(231,42,48)" rx="2" ry="2" />
<text  x="484.83" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Edge&gt; &gt;::construct&lt;Edge, Edge&gt; (2 samples, 0.15%)</title><rect x="481.0" y="181" width="1.7" height="15.0" fill="rgb(232,35,19)" rx="2" ry="2" />
<text  x="483.95" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::push_back (5 samples, 0.37%)</title><rect x="479.2" y="213" width="4.4" height="15.0" fill="rgb(226,219,4)" rx="2" ry="2" />
<text  x="482.21" y="223.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.07%)</title><rect x="976.3" y="165" width="0.9" height="15.0" fill="rgb(240,207,18)" rx="2" ry="2" />
<text  x="979.33" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (482 samples, 35.62%)</title><rect x="57.1" y="229" width="420.4" height="15.0" fill="rgb(223,77,22)" rx="2" ry="2" />
<text  x="60.10" y="239.5" >__memset_avx2_erms</text>
</g>
<g >
<title>_IO_sputbackc (8 samples, 0.59%)</title><rect x="1088.8" y="229" width="7.0" height="15.0" fill="rgb(227,140,42)" rx="2" ry="2" />
<text  x="1091.83" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int const&amp;&gt; (5 samples, 0.37%)</title><rect x="1030.4" y="149" width="4.4" height="15.0" fill="rgb(230,122,30)" rx="2" ry="2" />
<text  x="1033.40" y="159.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.15%)</title><rect x="1182.2" y="165" width="1.7" height="15.0" fill="rgb(220,164,41)" rx="2" ry="2" />
<text  x="1185.15" y="175.5" ></text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::empty (1 samples, 0.07%)</title><rect x="1006.0" y="197" width="0.9" height="15.0" fill="rgb(243,153,31)" rx="2" ry="2" />
<text  x="1008.98" y="207.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (1 samples, 0.07%)</title><rect x="1034.8" y="149" width="0.8" height="15.0" fill="rgb(233,184,22)" rx="2" ry="2" />
<text  x="1037.76" y="159.5" ></text>
</g>
<g >
<title>dfs_hk (13 samples, 0.96%)</title><rect x="1038.2" y="213" width="11.4" height="15.0" fill="rgb(248,199,21)" rx="2" ry="2" />
<text  x="1041.25" y="223.5" ></text>
</g>
<g >
<title>vm_normal_page (1 samples, 0.07%)</title><rect x="1185.6" y="117" width="0.9" height="15.0" fill="rgb(208,145,6)" rx="2" ry="2" />
<text  x="1188.64" y="127.5" ></text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::queue&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt;, void&gt; (1 samples, 0.07%)</title><rect x="1035.6" y="197" width="0.9" height="15.0" fill="rgb(244,43,48)" rx="2" ry="2" />
<text  x="1038.63" y="207.5" ></text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::push (11 samples, 0.81%)</title><rect x="1026.0" y="197" width="9.6" height="15.0" fill="rgb(250,149,4)" rx="2" ry="2" />
<text  x="1029.04" y="207.5" ></text>
</g>
<g >
<title>do_exit (5 samples, 0.37%)</title><rect x="1182.2" y="213" width="4.3" height="15.0" fill="rgb(253,188,28)" rx="2" ry="2" />
<text  x="1185.15" y="223.5" ></text>
</g>
<g >
<title>std::__partition&lt;int*, bool  (33 samples, 2.44%)</title><rect x="1055.7" y="213" width="28.8" height="15.0" fill="rgb(253,199,27)" rx="2" ry="2" />
<text  x="1058.69" y="223.5" >st..</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.07%)</title><rect x="976.3" y="213" width="0.9" height="15.0" fill="rgb(252,59,24)" rx="2" ry="2" />
<text  x="979.33" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;int, int&amp;, int*&gt; (1 samples, 0.07%)</title><rect x="1006.0" y="165" width="0.9" height="15.0" fill="rgb(212,19,38)" rx="2" ry="2" />
<text  x="1008.98" y="175.5" ></text>
</g>
<g >
<title>std::max&lt;long&gt; (4 samples, 0.30%)</title><rect x="1163.8" y="245" width="3.5" height="15.0" fill="rgb(245,189,51)" rx="2" ry="2" />
<text  x="1166.84" y="255.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.15%)</title><rect x="1182.2" y="149" width="1.7" height="15.0" fill="rgb(244,200,37)" rx="2" ry="2" />
<text  x="1185.15" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.37%)</title><rect x="1182.2" y="277" width="4.3" height="15.0" fill="rgb(250,70,20)" rx="2" ry="2" />
<text  x="1185.15" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int const&amp;&gt; (8 samples, 0.59%)</title><rect x="1028.7" y="165" width="6.9" height="15.0" fill="rgb(210,141,1)" rx="2" ry="2" />
<text  x="1031.65" y="175.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.07%)</title><rect x="481.8" y="85" width="0.9" height="15.0" fill="rgb(245,205,8)" rx="2" ry="2" />
<text  x="484.83" y="95.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.07%)</title><rect x="481.8" y="117" width="0.9" height="15.0" fill="rgb(231,98,8)" rx="2" ry="2" />
<text  x="484.83" y="127.5" ></text>
</g>
<g >
<title>ksys_read (3 samples, 0.22%)</title><rect x="1187.4" y="213" width="2.6" height="15.0" fill="rgb(238,144,21)" rx="2" ry="2" />
<text  x="1190.38" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_Deque_impl::_Deque_impl (1 samples, 0.07%)</title><rect x="1035.6" y="149" width="0.9" height="15.0" fill="rgb(225,22,27)" rx="2" ry="2" />
<text  x="1038.63" y="159.5" ></text>
</g>
<g >
<title>native_write_msr (6 samples, 0.44%)</title><rect x="471.4" y="37" width="5.2" height="15.0" fill="rgb(230,177,33)" rx="2" ry="2" />
<text  x="474.36" y="47.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.07%)</title><rect x="481.8" y="149" width="0.9" height="15.0" fill="rgb(253,13,13)" rx="2" ry="2" />
<text  x="484.83" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (5 samples, 0.37%)</title><rect x="1182.2" y="245" width="4.3" height="15.0" fill="rgb(211,176,3)" rx="2" ry="2" />
<text  x="1185.15" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::destroy&lt;int&gt; (1 samples, 0.07%)</title><rect x="1025.2" y="165" width="0.8" height="15.0" fill="rgb(230,1,38)" rx="2" ry="2" />
<text  x="1028.17" y="175.5" ></text>
</g>
<g >
<title>x86_pmu_enable (6 samples, 0.44%)</title><rect x="471.4" y="85" width="5.2" height="15.0" fill="rgb(211,146,20)" rx="2" ry="2" />
<text  x="474.36" y="95.5" ></text>
</g>
<g >
<title>copy_page_to_iter (1 samples, 0.07%)</title><rect x="1188.3" y="117" width="0.8" height="15.0" fill="rgb(207,145,2)" rx="2" ry="2" />
<text  x="1191.26" y="127.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.07%)</title><rect x="481.8" y="69" width="0.9" height="15.0" fill="rgb(233,16,52)" rx="2" ry="2" />
<text  x="484.83" y="79.5" ></text>
</g>
<g >
<title>partition_function (1 samples, 0.07%)</title><rect x="1054.8" y="213" width="0.9" height="15.0" fill="rgb(221,4,4)" rx="2" ry="2" />
<text  x="1057.82" y="223.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.07%)</title><rect x="976.3" y="149" width="0.9" height="15.0" fill="rgb(251,76,29)" rx="2" ry="2" />
<text  x="979.33" y="159.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::deque (1 samples, 0.07%)</title><rect x="1035.6" y="181" width="0.9" height="15.0" fill="rgb(238,145,54)" rx="2" ry="2" />
<text  x="1038.63" y="191.5" ></text>
</g>
<g >
<title>std::partition&lt;int*, bool  (34 samples, 2.51%)</title><rect x="1054.8" y="229" width="29.7" height="15.0" fill="rgb(215,161,33)" rx="2" ry="2" />
<text  x="1057.82" y="239.5" >st..</text>
</g>
<g >
<title>update_process_times (1 samples, 0.07%)</title><rect x="976.3" y="117" width="0.9" height="15.0" fill="rgb(254,225,16)" rx="2" ry="2" />
<text  x="979.33" y="127.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.07%)</title><rect x="476.6" y="197" width="0.9" height="15.0" fill="rgb(250,157,46)" rx="2" ry="2" />
<text  x="479.59" y="207.5" ></text>
</g>
</g>
</svg>
