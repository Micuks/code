<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>bfs_hk (8 samples, 6.35%)</title><rect x="759.2" y="293" width="74.9" height="15.0" fill="rgb(252,152,53)" rx="2" ry="2" />
<text  x="762.21" y="303.5" >bfs_hk</text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.79%)</title><rect x="10.0" y="309" width="9.4" height="15.0" fill="rgb(248,67,34)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>unmap_single_vma (3 samples, 2.38%)</title><rect x="1124.4" y="229" width="28.1" height="15.0" fill="rgb(253,148,19)" rx="2" ry="2" />
<text  x="1127.44" y="239.5" >u..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.79%)</title><rect x="38.1" y="325" width="9.4" height="15.0" fill="rgb(240,198,52)" rx="2" ry="2" />
<text  x="41.10" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 3.17%)</title><rect x="1152.5" y="341" width="37.5" height="15.0" fill="rgb(243,76,54)" rx="2" ry="2" />
<text  x="1155.54" y="351.5" >ent..</text>
</g>
<g >
<title>unmap_page_range (3 samples, 2.38%)</title><rect x="1124.4" y="213" width="28.1" height="15.0" fill="rgb(211,150,6)" rx="2" ry="2" />
<text  x="1127.44" y="223.5" >u..</text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.79%)</title><rect x="19.4" y="293" width="9.3" height="15.0" fill="rgb(213,113,33)" rx="2" ry="2" />
<text  x="22.37" y="303.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (1 samples, 0.79%)</title><rect x="824.8" y="213" width="9.3" height="15.0" fill="rgb(237,136,43)" rx="2" ry="2" />
<text  x="827.76" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.79%)</title><rect x="19.4" y="325" width="9.3" height="15.0" fill="rgb(226,52,2)" rx="2" ry="2" />
<text  x="22.37" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::push_back (1 samples, 0.79%)</title><rect x="590.6" y="293" width="9.4" height="15.0" fill="rgb(225,29,51)" rx="2" ry="2" />
<text  x="593.63" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::emplace_back&lt;Edge&gt; (1 samples, 0.79%)</title><rect x="590.6" y="277" width="9.4" height="15.0" fill="rgb(226,216,7)" rx="2" ry="2" />
<text  x="593.63" y="287.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 3.17%)</title><rect x="553.2" y="245" width="37.4" height="15.0" fill="rgb(220,140,35)" rx="2" ry="2" />
<text  x="556.17" y="255.5" >han..</text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::push (5 samples, 3.97%)</title><rect x="787.3" y="277" width="46.8" height="15.0" fill="rgb(225,149,44)" rx="2" ry="2" />
<text  x="790.30" y="287.5" >std:..</text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.79%)</title><rect x="562.5" y="181" width="9.4" height="15.0" fill="rgb(226,149,34)" rx="2" ry="2" />
<text  x="565.54" y="191.5" ></text>
</g>
<g >
<title>timekeeping_advance (1 samples, 0.79%)</title><rect x="1143.2" y="53" width="9.3" height="15.0" fill="rgb(234,78,23)" rx="2" ry="2" />
<text  x="1146.17" y="63.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.79%)</title><rect x="19.4" y="277" width="9.3" height="15.0" fill="rgb(227,117,6)" rx="2" ry="2" />
<text  x="22.37" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (4 samples, 3.17%)</title><rect x="1115.1" y="325" width="37.4" height="15.0" fill="rgb(212,103,37)" rx="2" ry="2" />
<text  x="1118.08" y="335.5" >__x..</text>
</g>
<g >
<title>__fxstat64 (1 samples, 0.79%)</title><rect x="28.7" y="341" width="9.4" height="15.0" fill="rgb(252,170,25)" rx="2" ry="2" />
<text  x="31.73" y="351.5" ></text>
</g>
<g >
<title>std::__partition&lt;int*, bool  (19 samples, 15.08%)</title><rect x="899.7" y="293" width="177.9" height="15.0" fill="rgb(222,102,10)" rx="2" ry="2" />
<text  x="902.68" y="303.5" >std::__partition&lt;int*, ..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.79%)</title><rect x="10.0" y="325" width="9.4" height="15.0" fill="rgb(218,65,34)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~stdio_sync_filebuf (1 samples, 0.79%)</title><rect x="38.1" y="341" width="9.4" height="15.0" fill="rgb(238,225,14)" rx="2" ry="2" />
<text  x="41.10" y="351.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.79%)</title><rect x="1143.2" y="149" width="9.3" height="15.0" fill="rgb(240,84,53)" rx="2" ry="2" />
<text  x="1146.17" y="159.5" ></text>
</g>
<g >
<title>__get_free_pages (1 samples, 0.79%)</title><rect x="1133.8" y="181" width="9.4" height="15.0" fill="rgb(211,178,15)" rx="2" ry="2" />
<text  x="1136.81" y="191.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.79%)</title><rect x="347.1" y="213" width="9.4" height="15.0" fill="rgb(228,156,9)" rx="2" ry="2" />
<text  x="350.14" y="223.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.79%)</title><rect x="10.0" y="357" width="9.4" height="15.0" fill="rgb(211,102,18)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_S_buffer_size (1 samples, 0.79%)</title><rect x="777.9" y="213" width="9.4" height="15.0" fill="rgb(233,132,32)" rx="2" ry="2" />
<text  x="780.94" y="223.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.38 (1 samples, 0.79%)</title><rect x="10.0" y="293" width="9.4" height="15.0" fill="rgb(240,224,32)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.79%)</title><rect x="19.4" y="309" width="9.3" height="15.0" fill="rgb(252,77,16)" rx="2" ry="2" />
<text  x="22.37" y="319.5" ></text>
</g>
<g >
<title>perf (1 samples, 0.79%)</title><rect x="10.0" y="373" width="9.4" height="15.0" fill="rgb(252,62,44)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>_pthread_cleanup_push_defer (1 samples, 0.79%)</title><rect x="1077.6" y="309" width="9.4" height="15.0" fill="rgb(236,32,43)" rx="2" ry="2" />
<text  x="1080.62" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int const&amp;&gt; (5 samples, 3.97%)</title><rect x="787.3" y="245" width="46.8" height="15.0" fill="rgb(229,29,6)" rx="2" ry="2" />
<text  x="790.30" y="255.5" >std:..</text>
</g>
<g >
<title>__vfs_write (1 samples, 0.79%)</title><rect x="19.4" y="245" width="9.3" height="15.0" fill="rgb(227,188,30)" rx="2" ry="2" />
<text  x="22.37" y="255.5" ></text>
</g>
<g >
<title>[unknown] (114 samples, 90.48%)</title><rect x="19.4" y="357" width="1067.6" height="15.0" fill="rgb(219,24,22)" rx="2" ry="2" />
<text  x="22.37" y="367.5" >[unknown]</text>
</g>
<g >
<title>do_group_exit (4 samples, 3.17%)</title><rect x="1115.1" y="309" width="37.4" height="15.0" fill="rgb(228,168,2)" rx="2" ry="2" />
<text  x="1118.08" y="319.5" >do_..</text>
</g>
<g >
<title>std::max&lt;long&gt; (2 samples, 1.59%)</title><rect x="881.0" y="309" width="18.7" height="15.0" fill="rgb(254,114,39)" rx="2" ry="2" />
<text  x="883.95" y="319.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 2.38%)</title><rect x="328.4" y="293" width="28.1" height="15.0" fill="rgb(240,201,33)" rx="2" ry="2" />
<text  x="331.41" y="303.5" >d..</text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (1 samples, 0.79%)</title><rect x="581.3" y="197" width="9.3" height="15.0" fill="rgb(211,28,16)" rx="2" ry="2" />
<text  x="584.27" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::pop_front (2 samples, 1.59%)</title><rect x="768.6" y="261" width="18.7" height="15.0" fill="rgb(207,22,28)" rx="2" ry="2" />
<text  x="771.57" y="271.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.79%)</title><rect x="10.0" y="261" width="9.4" height="15.0" fill="rgb(228,93,49)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>vfs_read (4 samples, 3.17%)</title><rect x="1152.5" y="277" width="37.5" height="15.0" fill="rgb(223,55,22)" rx="2" ry="2" />
<text  x="1155.54" y="287.5" >vfs..</text>
</g>
<g >
<title>t14pb_unittest. (125 samples, 99.21%)</title><rect x="19.4" y="373" width="1170.6" height="15.0" fill="rgb(220,211,32)" rx="2" ry="2" />
<text  x="22.37" y="383.5" >t14pb_unittest.</text>
</g>
<g >
<title>perf_event_addr_filters_exec (1 samples, 0.79%)</title><rect x="10.0" y="213" width="9.4" height="15.0" fill="rgb(233,198,40)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::queue&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;::pop (2 samples, 1.59%)</title><rect x="768.6" y="277" width="18.7" height="15.0" fill="rgb(240,13,13)" rx="2" ry="2" />
<text  x="771.57" y="287.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.79%)</title><rect x="553.2" y="181" width="9.3" height="15.0" fill="rgb(245,33,31)" rx="2" ry="2" />
<text  x="556.17" y="191.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 1.59%)</title><rect x="740.5" y="245" width="18.7" height="15.0" fill="rgb(245,78,48)" rx="2" ry="2" />
<text  x="743.48" y="255.5" ></text>
</g>
<g >
<title>main (77 samples, 61.11%)</title><rect x="356.5" y="325" width="721.1" height="15.0" fill="rgb(223,201,0)" rx="2" ry="2" />
<text  x="359.51" y="335.5" >main</text>
</g>
<g >
<title>hopcroft_karp_algo (20 samples, 15.87%)</title><rect x="656.2" y="309" width="187.3" height="15.0" fill="rgb(210,221,3)" rx="2" ry="2" />
<text  x="659.19" y="319.5" >hopcroft_karp_algo</text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5 (1 samples, 0.79%)</title><rect x="1087.0" y="357" width="9.3" height="15.0" fill="rgb(239,169,35)" rx="2" ry="2" />
<text  x="1089.98" y="367.5" ></text>
</g>
<g >
<title>exit_mmap (4 samples, 3.17%)</title><rect x="1115.1" y="261" width="37.4" height="15.0" fill="rgb(218,161,53)" rx="2" ry="2" />
<text  x="1118.08" y="271.5" >exi..</text>
</g>
<g >
<title>do_page_fault (2 samples, 1.59%)</title><rect x="740.5" y="261" width="18.7" height="15.0" fill="rgb(225,207,36)" rx="2" ry="2" />
<text  x="743.48" y="271.5" ></text>
</g>
<g >
<title>__brk (1 samples, 0.79%)</title><rect x="1096.3" y="357" width="9.4" height="15.0" fill="rgb(235,147,34)" rx="2" ry="2" />
<text  x="1099.35" y="367.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.79%)</title><rect x="1143.2" y="133" width="9.3" height="15.0" fill="rgb(211,67,7)" rx="2" ry="2" />
<text  x="1146.17" y="143.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (11 samples, 8.73%)</title><rect x="656.2" y="293" width="103.0" height="15.0" fill="rgb(225,223,52)" rx="2" ry="2" />
<text  x="659.19" y="303.5" >__memset_avx..</text>
</g>
<g >
<title>tty_write (1 samples, 0.79%)</title><rect x="19.4" y="229" width="9.3" height="15.0" fill="rgb(245,37,41)" rx="2" ry="2" />
<text  x="22.37" y="239.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.79%)</title><rect x="562.5" y="213" width="9.4" height="15.0" fill="rgb(209,5,22)" rx="2" ry="2" />
<text  x="565.54" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Edge&gt; &gt;::construct&lt;Edge, Edge&gt; (1 samples, 0.79%)</title><rect x="590.6" y="261" width="9.4" height="15.0" fill="rgb(241,135,49)" rx="2" ry="2" />
<text  x="593.63" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (18 samples, 14.29%)</title><rect x="422.1" y="309" width="168.5" height="15.0" fill="rgb(238,208,22)" rx="2" ry="2" />
<text  x="425.06" y="319.5" >__memset_avx2_erms</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.79%)</title><rect x="1096.3" y="341" width="9.4" height="15.0" fill="rgb(246,63,16)" rx="2" ry="2" />
<text  x="1099.35" y="351.5" ></text>
</g>
<g >
<title>__vfs_read (4 samples, 3.17%)</title><rect x="1152.5" y="261" width="37.5" height="15.0" fill="rgb(239,69,10)" rx="2" ry="2" />
<text  x="1155.54" y="271.5" >__v..</text>
</g>
<g >
<title>n_tty_write (1 samples, 0.79%)</title><rect x="19.4" y="213" width="9.3" height="15.0" fill="rgb(224,211,33)" rx="2" ry="2" />
<text  x="22.37" y="223.5" ></text>
</g>
<g >
<title>new_sync_read (4 samples, 3.17%)</title><rect x="1152.5" y="245" width="37.5" height="15.0" fill="rgb(239,109,38)" rx="2" ry="2" />
<text  x="1155.54" y="255.5" >new..</text>
</g>
<g >
<title>do_exit (4 samples, 3.17%)</title><rect x="1115.1" y="293" width="37.4" height="15.0" fill="rgb(232,153,11)" rx="2" ry="2" />
<text  x="1118.08" y="303.5" >do_..</text>
</g>
<g >
<title>__tlb_remove_page_size (1 samples, 0.79%)</title><rect x="1133.8" y="197" width="9.4" height="15.0" fill="rgb(212,183,4)" rx="2" ry="2" />
<text  x="1136.81" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 3.17%)</title><rect x="553.2" y="277" width="37.4" height="15.0" fill="rgb(207,152,19)" rx="2" ry="2" />
<text  x="556.17" y="287.5" >do_..</text>
</g>
<g >
<title>tick_sched_do_timer (1 samples, 0.79%)</title><rect x="1143.2" y="101" width="9.3" height="15.0" fill="rgb(229,219,44)" rx="2" ry="2" />
<text  x="1146.17" y="111.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 2.38%)</title><rect x="328.4" y="261" width="28.1" height="15.0" fill="rgb(234,102,38)" rx="2" ry="2" />
<text  x="331.41" y="271.5" >h..</text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.79%)</title><rect x="553.2" y="197" width="9.3" height="15.0" fill="rgb(240,24,4)" rx="2" ry="2" />
<text  x="556.17" y="207.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.79%)</title><rect x="1143.2" y="181" width="9.3" height="15.0" fill="rgb(212,18,6)" rx="2" ry="2" />
<text  x="1146.17" y="191.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.79%)</title><rect x="1133.8" y="165" width="9.4" height="15.0" fill="rgb(221,199,17)" rx="2" ry="2" />
<text  x="1136.81" y="175.5" ></text>
</g>
<g >
<title>all (126 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(210,227,6)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 2.38%)</title><rect x="328.4" y="277" width="28.1" height="15.0" fill="rgb(219,194,7)" rx="2" ry="2" />
<text  x="331.41" y="287.5" >_..</text>
</g>
<g >
<title>perf_event_exec (1 samples, 0.79%)</title><rect x="10.0" y="229" width="9.4" height="15.0" fill="rgb(231,38,11)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 3.17%)</title><rect x="1152.5" y="325" width="37.5" height="15.0" fill="rgb(213,227,16)" rx="2" ry="2" />
<text  x="1155.54" y="335.5" >do_..</text>
</g>
<g >
<title>read (4 samples, 3.17%)</title><rect x="1152.5" y="357" width="37.5" height="15.0" fill="rgb(225,73,43)" rx="2" ry="2" />
<text  x="1155.54" y="367.5" >read</text>
</g>
<g >
<title>page_fault (4 samples, 3.17%)</title><rect x="553.2" y="293" width="37.4" height="15.0" fill="rgb(242,93,14)" rx="2" ry="2" />
<text  x="556.17" y="303.5" >pag..</text>
</g>
<g >
<title>add_edge (1 samples, 0.79%)</title><rect x="590.6" y="309" width="9.4" height="15.0" fill="rgb(252,88,48)" rx="2" ry="2" />
<text  x="593.63" y="319.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.79%)</title><rect x="749.8" y="165" width="9.4" height="15.0" fill="rgb(233,145,46)" rx="2" ry="2" />
<text  x="752.84" y="175.5" ></text>
</g>
<g >
<title>partition_function (12 samples, 9.52%)</title><rect x="937.1" y="277" width="112.4" height="15.0" fill="rgb(235,143,44)" rx="2" ry="2" />
<text  x="940.14" y="287.5" >partition_fun..</text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.79%)</title><rect x="1115.1" y="229" width="9.3" height="15.0" fill="rgb(252,74,38)" rx="2" ry="2" />
<text  x="1118.08" y="239.5" ></text>
</g>
<g >
<title>mmput (4 samples, 3.17%)</title><rect x="1115.1" y="277" width="37.4" height="15.0" fill="rgb(247,56,45)" rx="2" ry="2" />
<text  x="1118.08" y="287.5" >mmput</text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.79%)</title><rect x="1115.1" y="245" width="9.3" height="15.0" fill="rgb(223,191,21)" rx="2" ry="2" />
<text  x="1118.08" y="255.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.79%)</title><rect x="1133.8" y="117" width="9.4" height="15.0" fill="rgb(238,85,36)" rx="2" ry="2" />
<text  x="1136.81" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_write (1 samples, 0.79%)</title><rect x="19.4" y="341" width="9.3" height="15.0" fill="rgb(252,55,18)" rx="2" ry="2" />
<text  x="22.37" y="351.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 1.59%)</title><rect x="740.5" y="277" width="18.7" height="15.0" fill="rgb(248,157,13)" rx="2" ry="2" />
<text  x="743.48" y="287.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.79%)</title><rect x="1133.8" y="149" width="9.4" height="15.0" fill="rgb(211,25,18)" rx="2" ry="2" />
<text  x="1136.81" y="159.5" ></text>
</g>
<g >
<title>scanf (1 samples, 0.79%)</title><rect x="1077.6" y="325" width="9.4" height="15.0" fill="rgb(254,111,4)" rx="2" ry="2" />
<text  x="1080.62" y="335.5" ></text>
</g>
<g >
<title>dfs_hk (1 samples, 0.79%)</title><rect x="834.1" y="293" width="9.4" height="15.0" fill="rgb(221,164,22)" rx="2" ry="2" />
<text  x="837.13" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int const&amp;&gt; (4 samples, 3.17%)</title><rect x="796.7" y="229" width="37.4" height="15.0" fill="rgb(247,3,5)" rx="2" ry="2" />
<text  x="799.67" y="239.5" >__g..</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 3.17%)</title><rect x="1115.1" y="341" width="37.4" height="15.0" fill="rgb(253,56,6)" rx="2" ry="2" />
<text  x="1118.08" y="351.5" >do_..</text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (5 samples, 3.97%)</title><rect x="787.3" y="261" width="46.8" height="15.0" fill="rgb(235,53,10)" rx="2" ry="2" />
<text  x="790.30" y="271.5" >std:..</text>
</g>
<g >
<title>ext4_file_read_iter (4 samples, 3.17%)</title><rect x="1152.5" y="229" width="37.5" height="15.0" fill="rgb(253,99,45)" rx="2" ry="2" />
<text  x="1155.54" y="239.5" >ext..</text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (1 samples, 0.79%)</title><rect x="337.8" y="213" width="9.3" height="15.0" fill="rgb(230,143,45)" rx="2" ry="2" />
<text  x="340.78" y="223.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (3 samples, 2.38%)</title><rect x="1161.9" y="181" width="28.1" height="15.0" fill="rgb(248,65,10)" rx="2" ry="2" />
<text  x="1164.90" y="191.5" >c..</text>
</g>
<g >
<title>handle_mm_fault (2 samples, 1.59%)</title><rect x="740.5" y="229" width="18.7" height="15.0" fill="rgb(230,38,3)" rx="2" ry="2" />
<text  x="743.48" y="239.5" ></text>
</g>
<g >
<title>unmap_vmas (3 samples, 2.38%)</title><rect x="1124.4" y="245" width="28.1" height="15.0" fill="rgb(218,109,46)" rx="2" ry="2" />
<text  x="1127.44" y="255.5" >u..</text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.79%)</title><rect x="749.8" y="181" width="9.4" height="15.0" fill="rgb(240,191,44)" rx="2" ry="2" />
<text  x="752.84" y="191.5" ></text>
</g>
<g >
<title>raw_notifier_call_chain (1 samples, 0.79%)</title><rect x="1143.2" y="37" width="9.3" height="15.0" fill="rgb(245,71,49)" rx="2" ry="2" />
<text  x="1146.17" y="47.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.79%)</title><rect x="10.0" y="341" width="9.4" height="15.0" fill="rgb(225,217,33)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 2.38%)</title><rect x="328.4" y="229" width="28.1" height="15.0" fill="rgb(240,55,6)" rx="2" ry="2" />
<text  x="331.41" y="239.5" >m..</text>
</g>
<g >
<title>page_fault (4 samples, 3.17%)</title><rect x="319.0" y="309" width="37.5" height="15.0" fill="rgb(241,188,22)" rx="2" ry="2" />
<text  x="322.05" y="319.5" >pag..</text>
</g>
<g >
<title>__memset_avx2_erms (33 samples, 26.19%)</title><rect x="47.5" y="325" width="309.0" height="15.0" fill="rgb(242,50,25)" rx="2" ry="2" />
<text  x="50.46" y="335.5" >__memset_avx2_erms</text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::_M_pop_front_aux (1 samples, 0.79%)</title><rect x="777.9" y="245" width="9.4" height="15.0" fill="rgb(246,138,28)" rx="2" ry="2" />
<text  x="780.94" y="255.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64.part.15 (1 samples, 0.79%)</title><rect x="1143.2" y="85" width="9.3" height="15.0" fill="rgb(230,0,48)" rx="2" ry="2" />
<text  x="1146.17" y="95.5" ></text>
</g>
<g >
<title>update_wall_time (1 samples, 0.79%)</title><rect x="1143.2" y="69" width="9.3" height="15.0" fill="rgb(240,175,7)" rx="2" ry="2" />
<text  x="1146.17" y="79.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (1 samples, 0.79%)</title><rect x="38.1" y="309" width="9.4" height="15.0" fill="rgb(208,175,21)" rx="2" ry="2" />
<text  x="41.10" y="319.5" ></text>
</g>
<g >
<title>std::partition&lt;int*, bool  (19 samples, 15.08%)</title><rect x="899.7" y="309" width="177.9" height="15.0" fill="rgb(215,62,54)" rx="2" ry="2" />
<text  x="902.68" y="319.5" >std::partition&lt;int*, bo..</text>
</g>
<g >
<title>init_prime (4 samples, 3.17%)</title><rect x="843.5" y="309" width="37.5" height="15.0" fill="rgb(210,52,4)" rx="2" ry="2" />
<text  x="846.49" y="319.5" >ini..</text>
</g>
<g >
<title>vfs_write (1 samples, 0.79%)</title><rect x="19.4" y="261" width="9.3" height="15.0" fill="rgb(244,181,54)" rx="2" ry="2" />
<text  x="22.37" y="271.5" ></text>
</g>
<g >
<title>__libc_start_main (111 samples, 88.10%)</title><rect x="47.5" y="341" width="1039.5" height="15.0" fill="rgb(243,41,9)" rx="2" ry="2" />
<text  x="50.46" y="351.5" >__libc_start_main</text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.79%)</title><rect x="1143.2" y="117" width="9.3" height="15.0" fill="rgb(215,183,4)" rx="2" ry="2" />
<text  x="1146.17" y="127.5" ></text>
</g>
<g >
<title>get_prime_factor2 (6 samples, 4.76%)</title><rect x="600.0" y="309" width="56.2" height="15.0" fill="rgb(205,18,14)" rx="2" ry="2" />
<text  x="603.00" y="319.5" >get_p..</text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.79%)</title><rect x="553.2" y="213" width="9.3" height="15.0" fill="rgb(242,29,54)" rx="2" ry="2" />
<text  x="556.17" y="223.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.79%)</title><rect x="1115.1" y="213" width="9.3" height="15.0" fill="rgb(241,220,12)" rx="2" ry="2" />
<text  x="1118.08" y="223.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.79%)</title><rect x="749.8" y="197" width="9.4" height="15.0" fill="rgb(242,3,24)" rx="2" ry="2" />
<text  x="752.84" y="207.5" ></text>
</g>
<g >
<title>setup_new_exec (1 samples, 0.79%)</title><rect x="10.0" y="245" width="9.4" height="15.0" fill="rgb(211,228,42)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;int*, int*&gt; (3 samples, 2.38%)</title><rect x="1049.5" y="277" width="28.1" height="15.0" fill="rgb(233,21,7)" rx="2" ry="2" />
<text  x="1052.52" y="287.5" >s..</text>
</g>
<g >
<title>ksys_read (4 samples, 3.17%)</title><rect x="1152.5" y="293" width="37.5" height="15.0" fill="rgb(247,36,33)" rx="2" ry="2" />
<text  x="1155.54" y="303.5" >ksy..</text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 1.59%)</title><rect x="740.5" y="213" width="18.7" height="15.0" fill="rgb(235,186,23)" rx="2" ry="2" />
<text  x="743.48" y="223.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 1.59%)</title><rect x="571.9" y="213" width="18.7" height="15.0" fill="rgb(242,189,24)" rx="2" ry="2" />
<text  x="574.90" y="223.5" ></text>
</g>
<g >
<title>copy_page_to_iter (3 samples, 2.38%)</title><rect x="1161.9" y="197" width="28.1" height="15.0" fill="rgb(228,151,27)" rx="2" ry="2" />
<text  x="1164.90" y="207.5" >c..</text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.79%)</title><rect x="562.5" y="197" width="9.4" height="15.0" fill="rgb(249,188,46)" rx="2" ry="2" />
<text  x="565.54" y="207.5" ></text>
</g>
<g >
<title>page_remove_rmap (1 samples, 0.79%)</title><rect x="1143.2" y="197" width="9.3" height="15.0" fill="rgb(206,142,21)" rx="2" ry="2" />
<text  x="1146.17" y="207.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.79%)</title><rect x="1133.8" y="133" width="9.4" height="15.0" fill="rgb(221,84,27)" rx="2" ry="2" />
<text  x="1136.81" y="143.5" ></text>
</g>
<g >
<title>generic_file_read_iter (4 samples, 3.17%)</title><rect x="1152.5" y="213" width="37.5" height="15.0" fill="rgb(250,30,21)" rx="2" ry="2" />
<text  x="1155.54" y="223.5" >gen..</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.79%)</title><rect x="1105.7" y="357" width="9.4" height="15.0" fill="rgb(225,166,35)" rx="2" ry="2" />
<text  x="1108.71" y="367.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (3 samples, 2.38%)</title><rect x="1049.5" y="261" width="28.1" height="15.0" fill="rgb(243,131,3)" rx="2" ry="2" />
<text  x="1052.52" y="271.5" >s..</text>
</g>
<g >
<title>search_binary_handler (1 samples, 0.79%)</title><rect x="10.0" y="277" width="9.4" height="15.0" fill="rgb(249,201,11)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.79%)</title><rect x="749.8" y="149" width="9.4" height="15.0" fill="rgb(249,168,0)" rx="2" ry="2" />
<text  x="752.84" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_read (4 samples, 3.17%)</title><rect x="1152.5" y="309" width="37.5" height="15.0" fill="rgb(227,78,22)" rx="2" ry="2" />
<text  x="1155.54" y="319.5" >__x..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.79%)</title><rect x="1143.2" y="165" width="9.3" height="15.0" fill="rgb(247,60,12)" rx="2" ry="2" />
<text  x="1146.17" y="175.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 3.17%)</title><rect x="553.2" y="229" width="37.4" height="15.0" fill="rgb(239,133,15)" rx="2" ry="2" />
<text  x="556.17" y="239.5" >__h..</text>
</g>
<g >
<title>operator new (1 samples, 0.79%)</title><rect x="815.4" y="213" width="9.4" height="15.0" fill="rgb(212,229,50)" rx="2" ry="2" />
<text  x="818.40" y="223.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.79%)</title><rect x="347.1" y="197" width="9.4" height="15.0" fill="rgb(241,66,28)" rx="2" ry="2" />
<text  x="350.14" y="207.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 3.17%)</title><rect x="553.2" y="261" width="37.4" height="15.0" fill="rgb(247,136,22)" rx="2" ry="2" />
<text  x="556.17" y="271.5" >__d..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_M_set_node (1 samples, 0.79%)</title><rect x="777.9" y="229" width="9.4" height="15.0" fill="rgb(242,96,49)" rx="2" ry="2" />
<text  x="780.94" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 3.17%)</title><rect x="1115.1" y="357" width="37.4" height="15.0" fill="rgb(206,55,29)" rx="2" ry="2" />
<text  x="1118.08" y="367.5" >ent..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Edge&gt;::construct&lt;Edge, Edge&gt; (1 samples, 0.79%)</title><rect x="590.6" y="245" width="9.4" height="15.0" fill="rgb(232,63,18)" rx="2" ry="2" />
<text  x="593.63" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 2.38%)</title><rect x="328.4" y="245" width="28.1" height="15.0" fill="rgb(253,228,27)" rx="2" ry="2" />
<text  x="331.41" y="255.5" >_..</text>
</g>
</g>
</svg>
